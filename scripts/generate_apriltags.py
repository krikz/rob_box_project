#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä AprilTag –∫–æ–ª–ª–µ–∫—Ü–∏–∏ tag36h11 –¥–ª—è –ø–µ—á–∞—Ç–∏
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ 587 —Ç–µ–≥–æ–≤ (0-586) —Å ID –≤ —É–≥–ª—É
–†–∞–∑–º–µ—Ä –¥–ª—è –ø–µ—á–∞—Ç–∏: 180–º–º x 180–º–º

–ú–µ—Ç–æ–¥: —Å–∫–∞—á–∏–≤–∞–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ apriltag-imgs —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
"""

import numpy as np
import cv2
from pathlib import Path
import subprocess
import sys


def download_official_tags(base_dir: Path, family: str = "tag36h11"):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ AprilTag –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å GitHub"""
    print("üì• –°–∫–∞—á–∏–≤–∞–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ AprilTag –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞
    temp_dir = base_dir / "apriltag_temp"
    
    if temp_dir.exists():
        print(f"üóëÔ∏è  –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É...")
        subprocess.run(["rm", "-rf", str(temp_dir)], check=True)
    
    print(f"üì¶ –ö–ª–æ–Ω–∏—Ä—É–µ–º apriltag-imgs —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...")
    try:
        subprocess.run([
            "git", "clone", "--depth", "1", "--filter=blob:none", "--sparse",
            "https://github.com/AprilRobotics/apriltag-imgs.git",
            str(temp_dir)
        ], check=True, capture_output=True)
        
        subprocess.run([
            "git", "-C", str(temp_dir), "sparse-checkout", "set", family
        ], check=True, capture_output=True)
        
        print(f"‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω")
        return temp_dir / family
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return None


def process_tags(source_dir: Path, output_dir: Path, 
                 target_size: int = 1100, border_size: int = 100):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∫–∞—á–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏: –¥–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞–º–∫—É –∏ ID"""
    output_dir.mkdir(parents=True, exist_ok=True)
    
    png_files = sorted(source_dir.glob("*.png"))
    
    if not png_files:
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ PNG —Ñ–∞–π–ª–æ–≤ –≤ {source_dir}")
        return
    
    print(f"\nüñºÔ∏è  –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(png_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    for idx, png_file in enumerate(png_files):
        img = cv2.imread(str(png_file), cv2.IMREAD_GRAYSCALE)
        
        if img is None:
            continue
        
        try:
            tag_id = int(png_file.stem.split('_')[-1])
        except ValueError:
            continue
        
        tag_size = target_size - 2 * border_size
        img_resized = cv2.resize(img, (tag_size, tag_size), 
                                interpolation=cv2.INTER_NEAREST)
        
        final_img = add_border_and_label(img_resized, tag_id, border_size)
        
        out_filename = output_dir / f"tag36h11_id{tag_id:03d}.png"
        cv2.imwrite(str(out_filename), final_img)
        
        if (idx + 1) % 50 == 0:
            print(f"  ‚úì –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {idx + 1}/{len(png_files)}")
    
    print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ! {len(png_files)} —Ç–µ–≥–æ–≤ –≤ {output_dir}")


def add_border_and_label(tag_img: np.ndarray, tag_id: int, 
                         border_size: int) -> np.ndarray:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –±–µ–ª—É—é —Ä–∞–º–∫—É –∏ —Ç–µ–∫—Å—Ç —Å ID —Ç–µ–≥–∞"""
    h, w = tag_img.shape
    
    bordered = np.ones((h + 2*border_size, w + 2*border_size), dtype=np.uint8) * 255
    bordered[border_size:border_size+h, border_size:border_size+w] = tag_img
    
    text = f"ID: {tag_id}"
    font = cv2.FONT_HERSHEY_SIMPLEX
    font_scale = max(0.8, border_size / 60.0)
    thickness = max(2, int(border_size / 30))
    
    (text_w, text_h), baseline = cv2.getTextSize(text, font, font_scale, thickness)
    
    margin = max(8, border_size // 10)
    text_x = margin
    text_y = text_h + margin
    
    pad = 4
    cv2.rectangle(bordered, 
                  (text_x - pad, text_y - text_h - pad),
                  (text_x + text_w + pad, text_y + baseline + pad),
                  255, -1)
    
    cv2.putText(bordered, text, (text_x, text_y), 
                font, font_scale, 0, thickness, cv2.LINE_AA)
    
    return bordered


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 70)
    print("  AprilTag Generator for Printing (180x180mm)")
    print("  Family: tag36h11 (587 tags)")
    print("=" * 70)
    
    family = "tag36h11"
    base_dir = Path("/home/ros2/rob_box_project")
    output_dir = base_dir / "apriltags_printable"
    
    target_size = 1100
    border_size = 55  # 20% –í–°–ï–ì–û –Ω–∞ —Ä–∞–º–∫—É: 1100*0.2=220px –Ω–∞ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã = –ø–æ 55px
    
    print(f"\nüìÇ –í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {output_dir}")
    print(f"üìè –†–∞–∑–º–µ—Ä: {target_size}x{target_size}px (—Ä–∞–º–∫–∞ {border_size}px)")
    
    source_dir = download_official_tags(base_dir, family)
    
    if not source_dir or not source_dir.exists():
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!")
        sys.exit(1)
    
    process_tags(source_dir, output_dir, target_size, border_size)
    
    temp_dir = base_dir / "apriltag_temp"
    if temp_dir.exists():
        print(f"\nüóëÔ∏è  –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã...")
        subprocess.run(["rm", "-rf", str(temp_dir)])
    
    print("\n" + "=" * 70)
    print("üìã –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ü–ï–ß–ê–¢–ò:")
    print("=" * 70)
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ PNG —Ñ–∞–π–ª—ã –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ/–ø—Ä–∏–Ω—Ç–µ—Ä–µ")
    print("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–∑–º–µ—Ä: 180–º–º x 180–º–º (–ë–ï–ó –∞–≤—Ç–æ–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è!)")
    print("3. –ü–µ—á–∞—Ç–∞–π—Ç–µ –Ω–∞ –±–µ–ª–æ–π –º–∞—Ç–æ–≤–æ–π –±—É–º–∞–≥–µ")
    print("4. –ö–∞—á–µ—Å—Ç–≤–æ –ø–µ—á–∞—Ç–∏: 300+ DPI")
    print("5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–º–µ—Ä –ª–∏–Ω–µ–π–∫–æ–π –ø–æ—Å–ª–µ –ø–µ—á–∞—Ç–∏!")
    print("=" * 70)
    
    print(f"\n‚ú® –í—Å–µ –≥–æ—Ç–æ–≤–æ! –§–∞–π–ª—ã –≤ {output_dir}")


if __name__ == "__main__":
    main()

name: Build Base Docker Images

# Собираем базовые образы только по требованию или по расписанию
on:
  workflow_dispatch:  # Ручной запуск (вкладка Actions -> Build Base Images -> Run workflow)
  workflow_call:      # Вызов из других workflow (например, build-all.yml)

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/${{ github.repository_owner }}/rob_box_base
  ROS_DISTRO: humble  # Изменить при переходе на другую версию ROS 2 (jazzy, kilted, и т.д.)

jobs:
  # Определение тега Docker на основе ветки
  determine-tag:
    runs-on: ubuntu-latest
    outputs:
      docker_tag: ${{ steps.set-tag.outputs.docker_tag }}
      full_tag: ${{ steps.set-tag.outputs.full_tag }}
    steps:
      - name: Determine Docker tag
        id: set-tag
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          ROS_DISTRO="${{ env.ROS_DISTRO }}"
          
          # Определяем базовый тег на основе ветки
          if [ "$BRANCH_NAME" = "main" ]; then
            BRANCH_TAG="latest"
          elif [ "$BRANCH_NAME" = "develop" ]; then
            BRANCH_TAG="dev"
          elif [[ "$BRANCH_NAME" == release/* ]]; then
            VERSION="${BRANCH_NAME#release/}"
            BRANCH_TAG="rc-${VERSION}"
          elif [[ "$BRANCH_NAME" == hotfix/* ]]; then
            VERSION="${BRANCH_NAME#hotfix/}"
            BRANCH_TAG="hotfix-${VERSION}"
          else
            BRANCH_TAG="test"
          fi
          
          # Полный тег: ros_distro-branch_tag
          FULL_TAG="${ROS_DISTRO}-${BRANCH_TAG}"
          
          echo "docker_tag=${BRANCH_TAG}" >> $GITHUB_OUTPUT
          echo "full_tag=${FULL_TAG}" >> $GITHUB_OUTPUT
          echo "Branch: $BRANCH_NAME"
          echo "ROS Distro: $ROS_DISTRO"
          echo "Branch Tag: $BRANCH_TAG"
          echo "Full Tag: $FULL_TAG"

  # Сборка базового образа ROS 2 + Zenoh (общая база для всех)
  build-ros2-zenoh:
    needs: determine-tag
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU for multi-arch builds
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}
          tags: |
            type=raw,value=ros2-zenoh-${{ needs.determine-tag.outputs.full_tag }}
            type=raw,value=ros2-zenoh-${{ env.ROS_DISTRO }}-latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=sha,prefix=ros2-zenoh-${{ env.ROS_DISTRO }}-

      - name: Build and push ros2-zenoh base image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: docker/base
          file: docker/base/Dockerfile.ros2-zenoh
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Collect build logs on failure
        if: failure()
        uses: ./.github/actions/collect-build-logs
        with:
          job-name: ros2-zenoh-base

  # Сборка базового образа RTAB-Map (для SLAM)
  build-rtabmap:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU for multi-arch builds
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}
          tags: |
            type=raw,value=rtabmap
            type=raw,value=rtabmap-latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=sha,prefix=rtabmap-

      - name: Build and push rtabmap base image
        uses: docker/build-push-action@v5
        with:
          context: docker/base
          file: docker/base/Dockerfile.rtabmap
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Сборка базового образа DepthAI (для OAK-D камеры)
  build-depthai:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU for multi-arch builds
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}
          tags: |
            type=raw,value=depthai
            type=sha,prefix=depthai-

      - name: Build and push depthai base image
        uses: docker/build-push-action@v5
        with:
          context: docker/base
          file: docker/base/Dockerfile.depthai
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Сборка базового образа PCL (для лидаров)
  build-pcl:
    runs-on: ubuntu-latest
    needs: build-ros2-zenoh  # Зависит от ros2-zenoh базы
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU for multi-arch builds
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}
          tags: |
            type=raw,value=pcl
            type=sha,prefix=pcl-

      - name: Build and push pcl base image
        uses: docker/build-push-action@v5
        with:
          context: docker/base
          file: docker/base/Dockerfile.pcl
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BASE_IMAGE=${{ env.IMAGE_PREFIX }}:ros2-zenoh

  # Сборка базового образа Voice Assistant (для голосового ассистента)
  build-voice-base:
    needs: determine-tag
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU for multi-arch builds
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}
          tags: |
            type=raw,value=voice-base-${{ needs.determine-tag.outputs.full_tag }}
            type=raw,value=voice-base-${{ env.ROS_DISTRO }}-latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=sha,prefix=voice-base-${{ env.ROS_DISTRO }}-

      - name: Build and push voice-base image
        uses: docker/build-push-action@v5
        with:
          context: .  # Корневой контекст чтобы достать requirements.txt из vision/voice_assistant
          file: docker/base/Dockerfile.voice-base
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NAV2_IMAGE=ghcr.io/${{ github.repository_owner }}/rob_box:nav2-${{ env.ROS_DISTRO }}-latest

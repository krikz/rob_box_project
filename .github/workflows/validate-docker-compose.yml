name: Validate Docker Compose

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
# –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º PR –∏–ª–∏ push –≤ develop/main
on:
  push:
    branches:
      - develop
      - main
    paths:
      - 'docker/main/docker-compose.yaml'
      - 'docker/vision/docker-compose.yaml'
      - 'docker/DOCKER_STANDARDS.md'
      - '.github/workflows/validate-docker-compose.yml'
  pull_request:
    branches:
      - develop
      - main
    paths:
      - 'docker/main/docker-compose.yaml'
      - 'docker/vision/docker-compose.yaml'
      - 'docker/DOCKER_STANDARDS.md'
  workflow_dispatch:  # –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫

jobs:
  validate-main-compose:
    name: Validate Main Pi Docker Compose
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate YAML syntax (Main Pi)
        run: |
          echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ YAML –¥–ª—è Main Pi..."
          docker run --rm -v "$PWD:/workspace" -w /workspace alpine sh -c '
            apk add --no-cache python3 py3-pip
            pip3 install pyyaml
            python3 -c "import yaml; yaml.safe_load(open(\"docker/main/docker-compose.yaml\"))"
          '
          echo "‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å YAML –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"

      - name: Check Docker Compose validity (Main Pi)
        run: |
          echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ Docker Compose –¥–ª—è Main Pi..."
          cd docker/main
          docker compose config > /dev/null
          echo "‚úÖ Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞"

      - name: Validate standards compliance (Main Pi)
        run: |
          echo "üìè –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –¥–ª—è Main Pi..."
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ network_mode: host
          if ! grep -q "network_mode: host" docker/main/docker-compose.yaml; then
            echo "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω 'network_mode: host'"
            exit 1
          fi
          echo "‚úÖ network_mode: host –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ restart: unless-stopped
          if ! grep -q "restart: unless-stopped" docker/main/docker-compose.yaml; then
            echo "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω 'restart: unless-stopped'"
            exit 1
          fi
          echo "‚úÖ restart: unless-stopped –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö environment –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
          for var in ROS_DOMAIN_ID RMW_IMPLEMENTATION ZENOH_CONFIG ROS_AUTOMATIC_DISCOVERY_RANGE; do
            if ! grep -q "$var" docker/main/docker-compose.yaml; then
              echo "‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è $var –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            fi
          done
          echo "‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ environment –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –Ω–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è volumes
          if grep -A 5 "./config:/config" docker/main/docker-compose.yaml | grep -q "./config/.*:/config/"; then
            echo "‚ùå –û—à–∏–±–∫–∞: –Ω–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è config —Ñ–∞–π–ª–æ–≤"
            exit 1
          fi
          echo "‚úÖ –ù–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è volumes"
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –Ω–µ—Ç –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è src –ø–∞–ø–∫–∏
          if grep -q "src:/workspace/src" docker/main/docker-compose.yaml; then
            echo "‚ùå –û—à–∏–±–∫–∞: –Ω–∞–π–¥–µ–Ω–æ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ src –ø–∞–ø–∫–∏ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –æ–±—Ä–∞–∑–µ)"
            exit 1
          fi
          echo "‚úÖ –ù–µ—Ç –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è src –ø–∞–ø–∫–∏"

  validate-vision-compose:
    name: Validate Vision Pi Docker Compose
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate YAML syntax (Vision Pi)
        run: |
          echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ YAML –¥–ª—è Vision Pi..."
          docker run --rm -v "$PWD:/workspace" -w /workspace alpine sh -c '
            apk add --no-cache python3 py3-pip
            pip3 install pyyaml
            python3 -c "import yaml; yaml.safe_load(open(\"docker/vision/docker-compose.yaml\"))"
          '
          echo "‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å YAML –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"

      - name: Check Docker Compose validity (Vision Pi)
        run: |
          echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ Docker Compose –¥–ª—è Vision Pi..."
          cd docker/vision
          docker compose config > /dev/null
          echo "‚úÖ Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞"

      - name: Validate standards compliance (Vision Pi)
        run: |
          echo "üìè –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –¥–ª—è Vision Pi..."
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ network_mode: host
          if ! grep -q "network_mode: host" docker/vision/docker-compose.yaml; then
            echo "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω 'network_mode: host'"
            exit 1
          fi
          echo "‚úÖ network_mode: host –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ restart: unless-stopped
          if ! grep -q "restart: unless-stopped" docker/vision/docker-compose.yaml; then
            echo "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω 'restart: unless-stopped'"
            exit 1
          fi
          echo "‚úÖ restart: unless-stopped –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö environment –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
          for var in ROS_DOMAIN_ID RMW_IMPLEMENTATION ZENOH_CONFIG ROS_AUTOMATIC_DISCOVERY_RANGE; do
            if ! grep -q "$var" docker/vision/docker-compose.yaml; then
              echo "‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è $var –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            fi
          done
          echo "‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ environment –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –Ω–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è volumes
          if grep -A 5 "./config:/config" docker/vision/docker-compose.yaml | grep -q "./config/.*:/config/"; then
            echo "‚ùå –û—à–∏–±–∫–∞: –Ω–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è config —Ñ–∞–π–ª–æ–≤"
            exit 1
          fi
          echo "‚úÖ –ù–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è volumes"
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ memory limits –¥–ª—è oak-d
          if ! grep -A 10 "oak-d:" docker/vision/docker-compose.yaml | grep -q "mem_limit:"; then
            echo "‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ –Ω–∞–π–¥–µ–Ω mem_limit –¥–ª—è oak-d"
          else
            echo "‚úÖ Memory limits –¥–ª—è oak-d –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
          fi
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ LD_LIBRARY_PATH –≤ oak-d
          if ! grep -A 15 "oak-d:" docker/vision/docker-compose.yaml | grep -q "LD_LIBRARY_PATH"; then
            echo "‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ –Ω–∞–π–¥–µ–Ω LD_LIBRARY_PATH –≤ oak-d"
          else
            echo "‚úÖ LD_LIBRARY_PATH –≤ oak-d –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
          fi

  validate-structure:
    name: Validate Project Structure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check required files
        run: |
          echo "üìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞..."
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
          required_files=(
            "docker/DOCKER_STANDARDS.md"
            "docker/AGENT_GUIDE.md"
            "docker/main/docker-compose.yaml"
            "docker/main/config/zenoh_router_config.json5"
            "docker/main/config/zenoh_session_config.json5"
            "docker/vision/docker-compose.yaml"
            "docker/vision/config/zenoh_router_config.json5"
            "docker/vision/config/zenoh_session_config.json5"
          )
          
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª: $file"
              exit 1
            fi
            echo "‚úÖ $file"
          done
          
          echo ""
          echo "‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç"

      - name: Check service directories structure
        run: |
          echo "üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å–µ—Ä–≤–∏—Å–æ–≤..."
          
          # Main Pi —Å–µ—Ä–≤–∏—Å—ã
          for service in robot_state_publisher rtabmap zenoh-router; do
            if [ ! -d "docker/main/$service" ]; then
              echo "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–µ—Ä–≤–∏—Å–∞: docker/main/$service"
              exit 1
            fi
            if [ ! -f "docker/main/$service/Dockerfile" ]; then
              echo "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Dockerfile –≤: docker/main/$service"
              exit 1
            fi
            echo "‚úÖ docker/main/$service"
          done
          
          # Vision Pi —Å–µ—Ä–≤–∏—Å—ã
          for service in oak-d lslidar apriltag zenoh-router; do
            if [ ! -d "docker/vision/$service" ]; then
              echo "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–µ—Ä–≤–∏—Å–∞: docker/vision/$service"
              exit 1
            fi
            if [ ! -f "docker/vision/$service/Dockerfile" ]; then
              echo "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Dockerfile –≤: docker/vision/$service"
              exit 1
            fi
            echo "‚úÖ docker/vision/$service"
          done
          
          echo ""
          echo "‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å–µ—Ä–≤–∏—Å–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"

  summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: [validate-main-compose, validate-vision-compose, validate-structure]
    if: always()
    steps:
      - name: Check validation results
        run: |
          echo "üìä –ò—Ç–æ–≥–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π:"
          echo ""
          echo "Main Pi: ${{ needs.validate-main-compose.result }}"
          echo "Vision Pi: ${{ needs.validate-vision-compose.result }}"
          echo "Structure: ${{ needs.validate-structure.result }}"
          echo ""
          
          if [[ "${{ needs.validate-main-compose.result }}" == "success" ]] && \
             [[ "${{ needs.validate-vision-compose.result }}" == "success" ]] && \
             [[ "${{ needs.validate-structure.result }}" == "success" ]]; then
            echo "‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
            echo "üéâ Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –ø—Ä–æ–µ–∫—Ç–∞"
          else
            echo "‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –°–º. –¥–µ—Ç–∞–ª–∏ –≤—ã—à–µ."
            exit 1
          fi

name: Build Main Pi Services

# Собираем сервисы Main Pi
on:
  push:
    branches:
      - develop        # Автосборка при пуше в develop
    paths:
      - 'docker/main/**'
      - 'src/rob_box_description/**'
      - '.github/workflows/build-main-services.yml'
  workflow_dispatch:  # Ручной запуск (вкладка Actions -> Build Main Pi Services -> Run workflow)
  workflow_call:      # Вызов из других workflow (например, build-all.yml)

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/${{ github.repository_owner }}/rob_box
  ROS_DISTRO: humble  # Изменить при переходе на другую версию ROS 2 (jazzy, kilted, и т.д.)

jobs:
  # Определение тега Docker на основе ветки
  determine-tag:
    runs-on: ubuntu-latest
    outputs:
      docker_tag: ${{ steps.set-tag.outputs.docker_tag }}
      full_tag: ${{ steps.set-tag.outputs.full_tag }}
    steps:
      - name: Determine Docker tag
        id: set-tag
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          ROS_DISTRO="${{ env.ROS_DISTRO }}"
          
          # Определяем базовый тег на основе ветки
          if [ "$BRANCH_NAME" = "main" ]; then
            BRANCH_TAG="latest"
          elif [ "$BRANCH_NAME" = "develop" ]; then
            BRANCH_TAG="dev"
          elif [[ "$BRANCH_NAME" == release/* ]]; then
            VERSION="${BRANCH_NAME#release/}"
            BRANCH_TAG="rc-${VERSION}"
          elif [[ "$BRANCH_NAME" == hotfix/* ]]; then
            VERSION="${BRANCH_NAME#hotfix/}"
            BRANCH_TAG="hotfix-${VERSION}"
          else
            BRANCH_TAG="test"
          fi
          
          # Полный тег: ros_distro-branch_tag
          FULL_TAG="${ROS_DISTRO}-${BRANCH_TAG}"
          
          echo "docker_tag=${BRANCH_TAG}" >> $GITHUB_OUTPUT
          echo "full_tag=${FULL_TAG}" >> $GITHUB_OUTPUT
          echo "Branch: $BRANCH_NAME"
          echo "ROS Distro: $ROS_DISTRO"
          echo "Branch Tag: $BRANCH_TAG"
          echo "Full Tag: $FULL_TAG"
  # Robot State Publisher - публикует TF дерево
  build-robot-state-publisher:
    needs: determine-tag
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU for multi-arch builds
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}
          tags: |
            type=raw,value=robot-state-publisher-${{ needs.determine-tag.outputs.full_tag }}
            type=raw,value=robot-state-publisher-${{ env.ROS_DISTRO }}-latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=sha,prefix=robot-state-publisher-${{ env.ROS_DISTRO }}-

      - name: Build and push robot-state-publisher
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/main/robot_state_publisher/Dockerfile
          platforms: linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-contexts: |
            docker/main/robot_state_publisher=docker/main/robot_state_publisher

  # RTAB-Map SLAM
  build-rtabmap:
    needs: determine-tag
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU for multi-arch builds
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}
          tags: |
            type=raw,value=rtabmap-${{ needs.determine-tag.outputs.full_tag }}
            type=raw,value=rtabmap-${{ env.ROS_DISTRO }}-latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=sha,prefix=rtabmap-${{ env.ROS_DISTRO }}-

      - name: Build and push rtabmap
        uses: docker/build-push-action@v5
        with:
          context: docker/main/rtabmap
          file: docker/main/rtabmap/Dockerfile
          platforms: linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Проверка сборки всех сервисов прошла успешно
  verify-build:
    runs-on: ubuntu-latest
    needs: [build-robot-state-publisher, build-rtabmap]
    steps:
      - name: Verify all builds succeeded
        run: echo "✅ All Main Pi services built successfully!"

#!/usr/bin/env python3
"""
–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è AprilTag –¥–µ—Ç–µ–∫—Ü–∏–π —Å –Ω–∞–ª–æ–∂–µ–Ω–∏–µ–º –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–º–∫–∏ –≤–æ–∫—Ä—É–≥ –º–∞—Ä–∫–µ—Ä–æ–≤ –∏ –∏—Ö –¥–∞–Ω–Ω—ã–µ (ID, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, —É–≥–ª—ã)
"""

import rclpy
from rclpy.node import Node
from sensor_msgs.msg import CompressedImage
from apriltag_msgs.msg import AprilTagDetectionArray
import cv2
import numpy as np


class AprilTagVisualizer(Node):
    def __init__(self):
        super().__init__('apriltag_visualizer')
        
        self.latest_detections = None
        
        # –ü–æ–¥–ø–∏—Å–∫–∏
        self.image_sub = self.create_subscription(
            CompressedImage,
            '/camera/rgb/image_raw/compressed',
            self.image_callback,
            10
        )
        
        self.detection_sub = self.create_subscription(
            AprilTagDetectionArray,
            '/detections',
            self.detection_callback,
            10
        )
        
        self.get_logger().info('üé® AprilTag Visualizer –∑–∞–ø—É—â–µ–Ω')
        self.get_logger().info('üì∑ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞: /camera/rgb/image_raw/compressed')
        self.get_logger().info('üè∑Ô∏è  –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞: /detections')
        
    def detection_callback(self, msg):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ—Ç–µ–∫—Ü–∏–∏"""
        self.latest_detections = msg
        
    def image_callback(self, msg):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –Ω–∞–ª–æ–∂–∏—Ç—å –¥–µ—Ç–µ–∫—Ü–∏–∏"""
        try:
            # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å compressed –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ OpenCV
            np_arr = np.frombuffer(msg.data, np.uint8)
            image = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)
            
            if image is None:
                return
            
            # –ù–∞–ª–æ–∂–∏—Ç—å –¥–µ—Ç–µ–∫—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            if self.latest_detections is not None and len(self.latest_detections.detections) > 0:
                image = self.draw_detections(image, self.latest_detections)
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            cv2.imshow('AprilTag Detection', image)
            key = cv2.waitKey(1)
            
            # –í—ã—Ö–æ–¥ –ø–æ 'q'
            if key == ord('q'):
                self.get_logger().info('–í—ã—Ö–æ–¥...')
                rclpy.shutdown()
            
        except Exception as e:
            self.get_logger().error(f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}')
    
    def draw_detections(self, image, detections_msg):
        """–ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å —Ä–∞–º–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –¥–µ—Ç–µ–∫—Ü–∏–π"""
        
        for detection in detections_msg.detections:
            # –ü–æ–ª—É—á–∏—Ç—å —É–≥–ª—ã
            corners = detection.corners
            
            # –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å —Ä–∞–º–∫—É (4 –ª–∏–Ω–∏–∏ –º–µ–∂–¥—É —É–≥–ª–∞–º–∏)
            pts = []
            for corner in corners:
                pts.append([int(corner.x), int(corner.y)])
            pts = np.array(pts, np.int32)
            pts = pts.reshape((-1, 1, 2))
            
            # –ó–µ–ª—ë–Ω–∞—è —Ä–∞–º–∫–∞
            cv2.polylines(image, [pts], True, (0, 255, 0), 3)
            
            # –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å —É–≥–ª—ã (–∫—Ä–∞—Å–Ω—ã–µ —Ç–æ—á–∫–∏)
            for corner in corners:
                cv2.circle(image, (int(corner.x), int(corner.y)), 5, (0, 0, 255), -1)
            
            # –¶–µ–Ω—Ç—Ä –º–∞—Ä–∫–µ—Ä–∞
            center_x = int(detection.centre.x)
            center_y = int(detection.centre.y)
            cv2.circle(image, (center_x, center_y), 8, (255, 0, 0), -1)
            
            # –¢–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
            tag_id = detection.id
            margin = detection.decision_margin
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç - ID (–∫—Ä—É–ø–Ω–æ)
            text_id = f"TAG {tag_id}"
            cv2.putText(image, text_id, 
                       (center_x - 50, center_y - 30),
                       cv2.FONT_HERSHEY_SIMPLEX, 1.2, (0, 255, 0), 3)
            
            # –ö–∞—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–∫—Ü–∏–∏
            text_quality = f"Quality: {margin:.1f}"
            cv2.putText(image, text_quality,
                       (center_x - 50, center_y + 5),
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
            
            # Hamming distance (–æ—à–∏–±–∫–∏)
            if detection.hamming == 0:
                text_hamming = "Perfect match"
                color = (0, 255, 0)
            else:
                text_hamming = f"Errors: {detection.hamming}"
                color = (0, 165, 255)
            
            cv2.putText(image, text_hamming,
                       (center_x - 50, center_y + 30),
                       cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 2)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –¥–µ—Ç–µ–∫—Ü–∏–π –≤ —É–≥–ª—É
        info_text = f"AprilTags detected: {len(detections_msg.detections)}"
        cv2.rectangle(image, (5, 5), (500, 50), (0, 0, 0), -1)
        cv2.putText(image, info_text, (10, 35),
                   cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 255), 2)
        
        return image


def main(args=None):
    rclpy.init(args=args)
    
    visualizer = AprilTagVisualizer()
    
    try:
        rclpy.spin(visualizer)
    except KeyboardInterrupt:
        pass
    finally:
        visualizer.destroy_node()
        rclpy.shutdown()
        cv2.destroyAllWindows()


if __name__ == '__main__':
    main()

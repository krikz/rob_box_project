#!/usr/bin/env python3
"""
startup_greeting_node.py - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã

–ñ–¥—ë—Ç –ø–æ–∫–∞ –≤—Å–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –Ω–æ–¥—ã –∑–∞–ø—É—Å—Ç—è—Ç—Å—è –∏ —Å–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞,
–∑–∞—Ç–µ–º –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç –∑–≤—É–∫ + –≥–æ–≤–æ—Ä–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ TTS.

–ö—Ä–∏—Ç–µ—Ä–∏–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:
1. Health Monitor –≤–∏–¥–∏—Ç —Å—Ç–∞—Ç—É—Å 'healthy' –∏–ª–∏ 'degraded'
2. Context Aggregator –ø—É–±–ª–∏–∫—É–µ—Ç –¥–∞–Ω–Ω—ã–µ
3. Voice Assistant –≥–æ—Ç–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:
1. [–ó–≤—É–∫] thinking.mp3 (—Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ)
2. [–ü–∞—É–∑–∞ 2-3 —Å–µ–∫] - —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
3. [–ó–≤—É–∫] cute.mp3 –∏–ª–∏ very_cute.mp3 (—Å–ª—É—á–∞–π–Ω–æ)
4. [TTS] –°–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–∑ –Ω–∞–±–æ—Ä–∞

–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (—Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä):
- "–Ø –≤–µ—Ä–Ω—É–ª—Å—è! –°–∏—Å—Ç–µ–º—ã –≤ –Ω–æ—Ä–º–µ, –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
- "–ü—Ä–∏–≤–µ—Ç! –í—Å–µ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∂–¥—É –∫–æ–º–∞–Ω–¥!"
- "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≥–æ—Ç–æ–≤ –ø–æ–º–æ–≥–∞—Ç—å!"
- "–°–∏—Å—Ç–µ–º—ã –∑–∞–ø—É—â–µ–Ω—ã! –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?"
- "–í—Å—ë –≥–æ—Ç–æ–≤–æ! –ß–µ–º –∑–∞–π–º—ë–º—Å—è?"
- "–†–∞–¥ –≤–µ—Ä–Ω—É—Ç—å—Å—è! –í—Å–µ –¥–∞—Ç—á–∏–∫–∏ –≤ –Ω–æ—Ä–º–µ!"
"""

import rclpy
from rclpy.node import Node
from std_msgs.msg import String
from rob_box_perception_msgs.msg import PerceptionEvent
import random
import time


class StartupGreetingNode(Node):
    """–ù–æ–¥–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–∏—Å—Ç–µ–º—ã"""
    
    # –ù–∞–±–æ—Ä –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
    GREETINGS = [
        "–Ø –≤–µ—Ä–Ω—É–ª—Å—è! –°–∏—Å—Ç–µ–º—ã –≤ –Ω–æ—Ä–º–µ, –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!",
        "–ü—Ä–∏–≤–µ—Ç! –í—Å–µ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∂–¥—É –∫–æ–º–∞–Ω–¥!",
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≥–æ—Ç–æ–≤ –ø–æ–º–æ–≥–∞—Ç—å!",
        "–°–∏—Å—Ç–µ–º—ã –∑–∞–ø—É—â–µ–Ω—ã! –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?",
        "–í—Å—ë –≥–æ—Ç–æ–≤–æ! –ß–µ–º –∑–∞–π–º—ë–º—Å—è?",
        "–†–∞–¥ –≤–µ—Ä–Ω—É—Ç—å—Å—è! –í—Å–µ –¥–∞—Ç—á–∏–∫–∏ –≤ –Ω–æ—Ä–º–µ!",
        "–û–Ω–ª–∞–π–Ω! –î–∏–∞–ª–æ–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞!",
        "–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–ª—É—à–∞—é –≤–∞—Å!",
    ]
    
    def __init__(self):
        super().__init__('startup_greeting_node')
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.declare_parameter('wait_time', 5.0)  # —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        self.declare_parameter('check_timeout', 30.0)  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        self.declare_parameter('enable_greeting', True)
        
        self.wait_time = self.get_parameter('wait_time').value
        self.check_timeout = self.get_parameter('check_timeout').value
        self.enable_greeting = self.get_parameter('enable_greeting').value
        
        # Publishers
        self.sound_pub = self.create_publisher(String, '/voice/sound/trigger', 10)
        self.tts_pub = self.create_publisher(String, '/voice/dialogue/response', 10)
        
        # Subscribers (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏)
        self.context_sub = self.create_subscription(
            PerceptionEvent,
            '/perception/context_update',
            self.on_context,
            10
        )
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.context_received = False
        self.greeting_done = False
        self.start_time = time.time()
        
        # –°—Ä–∞–∑—É –∏–≥—Ä–∞–µ–º "thinking" –∑–≤—É–∫
        self.get_logger().info('üöÄ Startup Greeting –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
        self.get_logger().info('   –ü—Ä–æ–∏–≥—Ä—ã–≤–∞—é –∑–≤—É–∫ –∑–∞–≥—Ä—É–∑–∫–∏...')
        self.play_sound('thinking')
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        self.check_timer = self.create_timer(1.0, self.check_readiness)
    
    def on_context(self, msg: PerceptionEvent):
        """–ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç"""
        if not self.context_received:
            self.get_logger().info('‚úÖ Context Aggregator –≥–æ—Ç–æ–≤!')
            self.context_received = True
    
    def check_readiness(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
        if self.greeting_done:
            self.check_timer.cancel()
            return
        
        elapsed = time.time() - self.start_time
        
        # –¢–∞–π–º–∞—É—Ç - –≥–æ–≤–æ—Ä–∏–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –≤—Å—ë –≥–æ—Ç–æ–≤–æ
        if elapsed > self.check_timeout:
            self.get_logger().warn(f'‚ö†Ô∏è  –¢–∞–π–º–∞—É—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ ({self.check_timeout}s), –≥–æ–≤–æ—Ä—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ...')
            self.say_greeting()
            return
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ—à–ª–æ?
        if elapsed < self.wait_time:
            return
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω - —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞!
        if self.context_received:
            self.get_logger().info('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞! –ì–æ–≤–æ—Ä—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ...')
            self.say_greeting()
    
    def say_greeting(self):
        """–ü—Ä–æ–∏–∑–Ω–µ—Å—Ç–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
        if self.greeting_done or not self.enable_greeting:
            return
        
        self.greeting_done = True
        
        # 1. –ó–≤—É–∫ —Ä–∞–¥–æ—Å—Ç–∏
        sound = random.choice(['cute', 'very_cute'])
        self.get_logger().info(f'üéµ –ü—Ä–æ–∏–≥—Ä—ã–≤–∞—é –∑–≤—É–∫: {sound}')
        self.play_sound(sound)
        
        # 2. –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Ä–µ—á—å—é
        time.sleep(1.5)
        
        # 3. TTS –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        greeting = random.choice(self.GREETINGS)
        self.get_logger().info(f'üó£Ô∏è  –ì–æ–≤–æ—Ä—é: "{greeting}"')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º JSON chunk (–∫–∞–∫ dialogue_node)
        import json
        chunk_json = {
            "ssml": f"<speak>{greeting}</speak>"
        }
        
        msg = String()
        msg.data = json.dumps(chunk_json, ensure_ascii=False)
        self.tts_pub.publish(msg)
        
        # 4. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–æ–¥—ã —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã (–±–µ–∑ once=True –¥–ª—è Humble)
        self.shutdown_timer = self.create_timer(3.0, self.shutdown_node)
    
    def shutdown_node(self):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–æ–¥—ã (–±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞)"""
        self.get_logger().info('üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É –Ω–æ–¥—ã')
        
        # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä
        if hasattr(self, 'shutdown_timer'):
            self.shutdown_timer.cancel()
        
        self.destroy_node()
        rclpy.shutdown()
    
    def play_sound(self, sound_name: str):
        """–¢—Ä–∏–≥–≥–µ—Ä –∑–≤—É–∫–∞"""
        msg = String()
        msg.data = sound_name
        self.sound_pub.publish(msg)


def main(args=None):
    rclpy.init(args=args)
    
    try:
        node = StartupGreetingNode()
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        if rclpy.ok():
            rclpy.shutdown()


if __name__ == '__main__':
    main()

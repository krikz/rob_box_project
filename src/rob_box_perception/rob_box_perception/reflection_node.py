#!/usr/bin/env python3
"""
reflection_node.py - Internal Dialogue Agent

–Ø–¥—Ä–æ —Å–∏—Å—Ç–µ–º—ã –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Ä–æ–±–æ—Ç–∞.
–°–æ–±–∏—Ä–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, —Ä–∞–∑–º—ã—à–ª—è–µ—Ç, —Ä–µ—à–∞–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å –∏–ª–∏ –Ω–µ—Ç.

–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞:
- /perception/vision_context (—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∫–∞–º–µ—Ä - —Å—Ç–∞–±)
- /apriltag/detections (AprilTag –º–∞—Ä–∫–µ—Ä—ã)
- /voice/stt/result (—Ä–µ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
- /voice/dialogue/response (–æ—Ç–≤–µ—Ç—ã —Ä–æ–±–æ—Ç–∞)
- /rtabmap/localization_pose (–ø–æ–∑–∏—Ü–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ)
- /odom (–æ–¥–æ–º–µ—Ç—Ä–∏—è)
- /device/snapshot (—Å–µ–Ω—Å–æ—Ä—ã ESP32: –±–∞—Ç–∞—Ä–µ—è, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞)
- /sensors/motor_state/* (—Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ—Ç–æ—Ä–æ–≤)

–ü—É–±–ª–∏–∫—É–µ—Ç:
- /reflection/internal_thought (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º—ã—Å–ª–∏ –¥–ª—è –ª–æ–≥–æ–≤)
- /voice/tts/request (–∫–æ–≥–¥–∞ —Ä–µ—à–∞–µ—Ç —Å–∫–∞–∑–∞—Ç—å —á—Ç–æ-—Ç–æ –≤—Å–ª—É—Ö)
"""

import json
import time
from typing import Optional, Dict, List
import os

import rclpy
from rclpy.node import Node
from std_msgs.msg import String
from geometry_msgs.msg import PoseStamped
from nav_msgs.msg import Odometry
from rcl_interfaces.msg import Log  # /rosout –ª–æ–≥–∏

try:
    from openai import OpenAI
    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False

# TODO: –î–æ–±–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è AprilTag –∏ DeviceSnapshot –∫–æ–≥–¥–∞ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è
# from apriltag_msgs.msg import AprilTagDetectionArray
# from robot_sensor_hub_msg.msg import DeviceSnapshot


class ReflectionNode(Node):
    """–ù–æ–¥–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Ä–æ–±–æ—Ç–∞"""
    
    def __init__(self):
        super().__init__('reflection_node')
        
        # ============ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ============
        self.declare_parameter('reflection_rate', 1.0)  # Hz - —á–∞—Å—Ç–æ—Ç–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
        self.declare_parameter('dialogue_timeout', 10.0)  # —Å–µ–∫—É–Ω–¥ - —Ç–∞–π–º-–∞—É—Ç –¥–∏–∞–ª–æ–≥–∞
        self.declare_parameter('memory_window', 60)  # —Å–µ–∫—É–Ω–¥ - –æ–∫–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ–π –ø–∞–º—è—Ç–∏
        self.declare_parameter('enable_speech', True)  # –í–∫–ª—é—á–∏—Ç—å —Ä–µ—á—å —Ä–æ–±–æ—Ç–∞
        self.declare_parameter('system_prompt_file', 'reflection_prompt.txt')  # –§–∞–π–ª —Å system prompt
        
        self.reflection_rate = self.get_parameter('reflection_rate').value
        self.dialogue_timeout = self.get_parameter('dialogue_timeout').value
        self.memory_window = self.get_parameter('memory_window').value
        self.enable_speech = self.get_parameter('enable_speech').value
        
        # ============ –°–æ—Å—Ç–æ—è–Ω–∏–µ ============
        self.in_dialogue = False
        self.last_user_speech_time = None
        
        # ============ –ü–∞–º—è—Ç—å ============
        self.short_memory: List[Dict] = []  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥
        self.long_memory: List[Dict] = []  # –í–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        
        # ============ –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç ============
        self.current_vision = None
        self.current_pose = None
        self.current_odom = None
        self.current_sensors = None
        self.last_apriltags = []
        
        # ============ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã ============
        self.recent_errors: List[Dict] = []  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ (max 10)
        self.recent_warnings: List[Dict] = []  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (max 5)
        self.health_issues: List[str] = []  # –¢–µ–∫—É—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        self.last_topic_check = time.time()
        self.topic_check_interval = 10.0  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–æ–ø–∏–∫–∏ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        
        # ============ –ü–æ–¥–ø–∏—Å–∫–∏ - Vision ============
        self.vision_sub = self.create_subscription(
            String,
            '/perception/vision_context',
            self.on_vision_context,
            10
        )
        
        # TODO: –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–≥–¥–∞ AprilTag messages –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã
        # self.apriltag_sub = self.create_subscription(
        #     AprilTagDetectionArray,
        #     '/apriltag/detections',
        #     self.on_apriltags,
        #     10
        # )
        
        # ============ –ü–æ–¥–ø–∏—Å–∫–∏ - –î–∏–∞–ª–æ–≥ ============
        self.stt_sub = self.create_subscription(
            String,
            '/voice/stt/result',
            self.on_user_speech,
            10
        )
        
        self.dialogue_sub = self.create_subscription(
            String,
            '/voice/dialogue/response',
            self.on_robot_response,
            10
        )
        
        # ============ –ü–æ–¥–ø–∏—Å–∫–∏ - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã ============
        self.rosout_sub = self.create_subscription(
            Log,
            '/rosout',
            self.on_rosout,
            50  # –ë–æ–ª—å—à–∞—è –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ª–æ–≥–æ–≤
        )
        
        # ============ –ü–æ–¥–ø–∏—Å–∫–∏ - –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è ============
        self.pose_sub = self.create_subscription(
            PoseStamped,
            '/rtabmap/localization_pose',
            self.on_robot_pose,
            10
        )
        
        self.odom_sub = self.create_subscription(
            Odometry,
            '/odom',
            self.on_odometry,
            10
        )
        
        # TODO: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ–Ω—Å–æ—Ä—ã ESP32
        # self.sensor_hub_sub = self.create_subscription(
        #     DeviceSnapshot,
        #     '/device/snapshot',
        #     self.on_device_snapshot,
        #     10
        # )
        
        # ============ –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ ============
        self.thought_pub = self.create_publisher(
            String,
            '/reflection/internal_thought',
            10
        )
        
        self.tts_pub = self.create_publisher(
            String,
            '/voice/tts/request',
            10
        )
        
        # ============ –¢–∞–π–º–µ—Ä —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π ============
        timer_period = 1.0 / self.reflection_rate
        self.reflection_timer = self.create_timer(timer_period, self.reflection_loop)
        
        # ============ DeepSeek API –∫–ª–∏–µ–Ω—Ç ============
        self.deepseek_api_key = os.getenv('DEEPSEEK_API_KEY')
        self.deepseek_client = None
        
        if not self.deepseek_api_key:
            self.get_logger().warn('‚ö†Ô∏è  DEEPSEEK_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞.')
        elif not OPENAI_AVAILABLE:
            self.get_logger().warn('‚ö†Ô∏è  OpenAI –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! pip install openai')
        else:
            try:
                self.deepseek_client = OpenAI(
                    api_key=self.deepseek_api_key,
                    base_url="https://api.deepseek.com"
                )
                self.get_logger().info('‚úÖ DeepSeek API –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
            except Exception as e:
                self.get_logger().error(f'‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DeepSeek: {e}')
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        self.system_prompt = self._load_system_prompt()
        
        self.get_logger().info('üß† Reflection Node –∑–∞–ø—É—â–µ–Ω')
        self.get_logger().info(f'   –ß–∞—Å—Ç–æ—Ç–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π: {self.reflection_rate} Hz')
        self.get_logger().info(f'   –¢–∞–π–º-–∞—É—Ç –¥–∏–∞–ª–æ–≥–∞: {self.dialogue_timeout} —Å–µ–∫')
        self.get_logger().info(f'   –û–∫–Ω–æ –ø–∞–º—è—Ç–∏: {self.memory_window} —Å–µ–∫')
    
    def _load_system_prompt(self) -> str:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å system prompt –∏–∑ —Ñ–∞–π–ª–∞"""
        prompt_file = self.get_parameter('system_prompt_file').value
        
        # –ò—â–µ–º –≤ share/rob_box_perception/prompts/
        from ament_index_python.packages import get_package_share_directory
        try:
            pkg_share = get_package_share_directory('rob_box_perception')
            prompt_path = os.path.join(pkg_share, 'prompts', prompt_file)
            
            with open(prompt_path, 'r', encoding='utf-8') as f:
                prompt = f.read()
            
            self.get_logger().info(f'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω prompt: {prompt_file} ({len(prompt)} –±–∞–π—Ç)')
            return prompt
        except Exception as e:
            self.get_logger().warn(f'‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å prompt: {e}')
            # Fallback –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            return """–¢—ã - –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≥–æ–ª–æ—Å —Ä–æ–±–æ—Ç–∞ –†–æ–±–ë–æ–∫—Å. 

–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
1. –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç (–¥–∞—Ç—á–∏–∫–∏, –∫–∞–º–µ—Ä–∞, –ø–æ–∑–∏—Ü–∏—è, –ø–∞–º—è—Ç—å, –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã)
2. –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º—ã—Å–ª–∏ (—Ä–µ—Ñ–ª–µ–∫—Å–∏—è, –≥–∏–ø–æ—Ç–µ–∑—ã, –Ω–∞–±–ª—é–¥–µ–Ω–∏—è)
3. –†–ï–®–ê–¢–¨: –≥–æ–≤–æ—Ä–∏—Ç—å –≤—Å–ª—É—Ö –∏–ª–∏ –º–æ–ª—á–∞—Ç—å

–ü—Ä–∞–≤–∏–ª–∞ —Ä–µ—á–∏:
- –ì–æ–≤–æ—Ä–∏ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–ª–∏ –≤–æ–ø—Ä–æ—Å
- –ù–ï –±–æ–ª—Ç–∞–π –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫
- –ù–ï –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –æ—á–µ–≤–∏–¥–Ω–æ–µ ("—è —Å—Ç–æ—é", "—è –≤–∏–∂—É —Å—Ç–µ–Ω—É")
- –ì–æ–≤–æ—Ä–∏ –ø—Ä–∏: –Ω–∏–∑–∫–æ–π –±–∞—Ç–∞—Ä–µ–µ, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞, –≤–∞–∂–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–æ–æ–±—â–∞–π –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö (–æ—à–∏–±–∫–∏, —Å–±–æ–∏ –Ω–æ–¥, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö)
- –ë—É–¥—å –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º

–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã:
- system_health.status: 'healthy' | 'degraded' | 'critical'
- system_health.issues: —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ–±–ª–µ–º
- system_health.recent_errors: –æ—à–∏–±–∫–∏ –æ—Ç –¥—Ä—É–≥–∏—Ö –Ω–æ–¥
- –ï—Å–ª–∏ status='critical' - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–æ–æ–±—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
- –ï—Å–ª–∏ –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ - –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–æ–º–æ—â—å

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ JSON:
{
  "thought": "–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –º—ã—Å–ª—å –¥–ª—è –ª–æ–≥–æ–≤",
  "should_speak": true/false,
  "speech": "—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–∏–∑–Ω–µ—Å–µ–Ω–∏—è (–µ—Å–ª–∏ should_speak=true)"
}"""
    
    # ============================================================
    # Callbacks - –í–æ—Å–ø—Ä–∏—è—Ç–∏–µ
    # ============================================================
    
    def on_vision_context(self, msg: String):
        """–ü–æ–ª—É—á–µ–Ω —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∫–∞–º–µ—Ä"""
        try:
            self.current_vision = json.loads(msg.data)
            self.get_logger().debug(f'üëÅÔ∏è  Vision: {self.current_vision.get("description", "N/A")}')
        except json.JSONDecodeError:
            self.get_logger().error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ vision_context JSON')
    
    def on_apriltags(self, msg):
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã AprilTag –º–∞—Ä–∫–µ—Ä—ã"""
        self.last_apriltags = msg.detections
        if len(self.last_apriltags) > 0:
            tag_ids = [d.id for d in self.last_apriltags]
            self.get_logger().info(f'üè∑Ô∏è  AprilTags: {tag_ids}')
            self.add_to_memory('apriltag', f'–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –º–∞—Ä–∫–µ—Ä—ã: {tag_ids}')
    
    def on_robot_pose(self, msg: PoseStamped):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Ä–æ–±–æ—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–µ"""
        self.current_pose = msg
        x = msg.pose.position.x
        y = msg.pose.position.y
        self.get_logger().debug(f'üìç –ü–æ–∑–∏—Ü–∏—è: ({x:.2f}, {y:.2f})')
    
    def on_odometry(self, msg: Odometry):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–æ–º–µ—Ç—Ä–∏–∏"""
        self.current_odom = msg
        vx = msg.twist.twist.linear.x
        wz = msg.twist.twist.angular.z
        self.get_logger().debug(f'üöó –°–∫–æ—Ä–æ—Å—Ç—å: vx={vx:.2f}, wz={wz:.2f}')
    
    def on_device_snapshot(self, msg):
        """–î–∞–Ω–Ω—ã–µ —Å–µ–Ω—Å–æ—Ä–æ–≤ –æ—Ç ESP32"""
        self.current_sensors = {
            'battery': msg.battery_voltage,
            'temperature': msg.temperature,
            'timestamp': time.time()
        }
        self.get_logger().debug(
            f'üîã –ë–∞—Ç–∞—Ä–µ—è: {msg.battery_voltage:.1f}V, '
            f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {msg.temperature:.1f}¬∞C'
        )
    
    # ============================================================
    # Callbacks - –î–∏–∞–ª–æ–≥
    # ============================================================
    
    def on_user_speech(self, msg: String):
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –≥–æ–≤–æ—Ä–∏—Ç—å - —Å—Ç–∞–≤–∏–º –¥–∏–∞–ª–æ–≥ –Ω–∞ –ø–∞—É–∑—É"""
        self.in_dialogue = True
        self.last_user_speech_time = time.time()
        
        self.get_logger().info(f'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "{msg.data}"')
        self.add_to_memory('user', msg.data)
    
    def on_robot_response(self, msg: String):
        """–†–æ–±–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∏–∞–ª–æ–≥"""
        self.last_user_speech_time = time.time()
        
        self.get_logger().info(f'ü§ñ –†–æ–±–æ—Ç: "{msg.data}"')
        self.add_to_memory('robot', msg.data)
    
    # ============================================================
    # Callbacks - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã
    # ============================================================
    
    def on_rosout(self, msg: Log):
        """–ü–æ–ª—É—á–µ–Ω –ª–æ–≥ –æ—Ç –ª—é–±–æ–π –Ω–æ–¥—ã —á–µ—Ä–µ–∑ /rosout"""
        # Log levels: DEBUG=10, INFO=20, WARN=30, ERROR=40, FATAL=50
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–æ–≥–∏
        if msg.name == self.get_name():
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ ERROR –∏ WARN
        if msg.level >= 40:  # ERROR or FATAL
            error_info = {
                'node': msg.name,
                'level': 'ERROR' if msg.level == 40 else 'FATAL',
                'message': msg.msg,
                'timestamp': time.time()
            }
            self.recent_errors.append(error_info)
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—à–∏–±–æ–∫
            if len(self.recent_errors) > 10:
                self.recent_errors = self.recent_errors[-10:]
            
            self.get_logger().warn(f'‚ö†Ô∏è  [{error_info["node"]}] {error_info["level"]}: {msg.msg}')
            
            # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç—å
            if 'fail' in msg.msg.lower() or 'crash' in msg.msg.lower():
                self.add_to_memory('system_error', f'{msg.name}: {msg.msg}', important=True)
        
        elif msg.level == 30:  # WARN
            warning_info = {
                'node': msg.name,
                'message': msg.msg,
                'timestamp': time.time()
            }
            self.recent_warnings.append(warning_info)
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
            if len(self.recent_warnings) > 5:
                self.recent_warnings = self.recent_warnings[-5:]
    
    def check_system_health(self) -> Dict:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        {
            'status': 'healthy' | 'degraded' | 'critical',
            'issues': List[str],
            'recent_errors': List[Dict],
            'recent_warnings': List[Dict]
        }
        """
        issues = []
        status = 'healthy'
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥
        recent_critical = [
            e for e in self.recent_errors
            if time.time() - e['timestamp'] < 30 and e['level'] == 'FATAL'
        ]
        
        if len(recent_critical) > 0:
            status = 'critical'
            issues.append(f'üö® {len(recent_critical)} –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ –∑–∞ 30 —Å–µ–∫')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ã—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
        recent_errors = [
            e for e in self.recent_errors
            if time.time() - e['timestamp'] < 60
        ]
        
        if len(recent_errors) >= 5:
            status = 'degraded' if status == 'healthy' else status
            issues.append(f'‚ö†Ô∏è  {len(recent_errors)} –æ—à–∏–±–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–∞–∂–Ω—ã—Ö —Ç–æ–ø–∏–∫–æ–≤ (–∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥)
        if time.time() - self.last_topic_check >= self.topic_check_interval:
            self.last_topic_check = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if self.current_vision is None:
                issues.append('üëÅÔ∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å –∫–∞–º–µ—Ä—ã')
                status = 'degraded' if status == 'healthy' else status
            
            if self.current_odom is None:
                issues.append('üöó –ù–µ—Ç –æ–¥–æ–º–µ—Ç—Ä–∏–∏')
                status = 'degraded' if status == 'healthy' else status
        
        return {
            'status': status,
            'issues': issues,
            'recent_errors': self.recent_errors[-3:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –æ—à–∏–±–∫–∏
            'recent_warnings': self.recent_warnings[-2:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        }
    
    # ============================================================
    # –ü–∞–º—è—Ç—å
    # ============================================================
    
    def add_to_memory(self, event_type: str, content: str, important: bool = False):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –ø–∞–º—è—Ç—å"""
        event = {
            'type': event_type,
            'content': content,
            'timestamp': time.time()
        }
        
        # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞–º—è—Ç—å
        self.short_memory.append(event)
        
        # –î–æ–ª–≥–∞—è –ø–∞–º—è—Ç—å (—Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è)
        if important:
            self.long_memory.append(event)
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏–∑ –∫–æ—Ä–æ—Ç–∫–æ–π –ø–∞–º—è—Ç–∏
        cutoff_time = time.time() - self.memory_window
        self.short_memory = [
            e for e in self.short_memory 
            if e['timestamp'] > cutoff_time
        ]
    
    def get_memory_context(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–∞–º—è—Ç–∏ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
        lines = []
        for event in self.short_memory[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–±—ã—Ç–∏–π
            elapsed = time.time() - event['timestamp']
            lines.append(f"[{elapsed:.0f}s –Ω–∞–∑–∞–¥] {event['type']}: {event['content']}")
        return '\n'.join(lines) if lines else '–ü–∞–º—è—Ç—å –ø—É—Å—Ç–∞'
    
    # ============================================================
    # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
    # ============================================================
    
    def reflection_loop(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏–¥—ë—Ç –ª–∏ –¥–∏–∞–ª–æ–≥
        if self.in_dialogue:
            if self.last_user_speech_time:
                elapsed = time.time() - self.last_user_speech_time
                if elapsed > self.dialogue_timeout:
                    self.in_dialogue = False
                    self.get_logger().info('üí¨ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω (—Ç–∞–π–º-–∞—É—Ç)')
                else:
                    # –ñ–¥—ë–º –ø–æ–∫–∞ –¥–∏–∞–ª–æ–≥ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è
                    return
        
        # –î–∏–∞–ª–æ–≥–∞ –Ω–µ—Ç - –º–æ–∂–µ–º —Ä–∞–∑–º—ã—à–ª—è—Ç—å –∏ –≥–æ–≤–æ—Ä–∏—Ç—å
        self.think_and_maybe_speak()
    
    def think_and_maybe_speak(self):
        """–†–∞–∑–º—ã—à–ª–µ–Ω–∏–µ –∏ —Ä–µ—à–µ–Ω–∏–µ –≥–æ–≤–æ—Ä–∏—Ç—å –∏–ª–∏ –Ω–µ—Ç"""
        # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = self.build_context()
        
        if not context:
            return  # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ DeepSeek –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        thought, should_speak, speech_text = self.analyze_context(context)
        
        # –ü—É–±–ª–∏–∫—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –º—ã—Å–ª—å
        if thought:
            thought_msg = String()
            thought_msg.data = thought
            self.thought_pub.publish(thought_msg)
            self.get_logger().debug(f'üí≠ –ú—ã—Å–ª—å: {thought}')
        
        # –ì–æ–≤–æ—Ä–∏–º, –µ—Å–ª–∏ —Ä–µ—à–∏–ª–∏
        if should_speak and speech_text and self.enable_speech:
            tts_msg = String()
            tts_msg.data = speech_text
            self.tts_pub.publish(tts_msg)
            self.get_logger().info(f'üó£Ô∏è  –ì–æ–≤–æ—Ä—é: "{speech_text}"')
            self.add_to_memory('robot_reflection', speech_text, important=True)
    
    def build_context(self) -> Optional[Dict]:
        """–°–æ–±—Ä–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
        health = self.check_system_health()
        
        context = {
            'timestamp': time.time(),
            'vision': self.current_vision,
            'pose': None,
            'moving': False,
            'sensors': self.current_sensors,
            'apriltags': [tag.id for tag in self.last_apriltags] if hasattr(self, 'last_apriltags') else [],
            'memory': self.get_memory_context(),
            'system_health': health  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
        }
        
        # –ü–æ–∑–∏—Ü–∏—è
        if self.current_pose:
            context['pose'] = {
                'x': self.current_pose.pose.position.x,
                'y': self.current_pose.pose.position.y
            }
        
        # –î–≤–∏–∂–µ–Ω–∏–µ
        if self.current_odom:
            vx = abs(self.current_odom.twist.twist.linear.x)
            wz = abs(self.current_odom.twist.twist.angular.z)
            context['moving'] = vx > 0.01 or wz > 0.01
        
        return context if any([
            self.current_vision,
            self.current_pose,
            self.current_sensors,
            len(self.last_apriltags) > 0
        ]) else None
    
    def analyze_context(self, context: Dict) -> tuple[Optional[str], bool, Optional[str]]:
        """
        –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ DeepSeek API
        
        Returns:
            (internal_thought, should_speak, speech_text)
        """
        if not self.deepseek_client:
            # –ó–∞–≥–ª—É—à–∫–∞ –±–µ–∑ API
            return self._stub_analyze(context)
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
            context_text = self._format_context_for_prompt(context)
            
            # –í—ã–∑–æ–≤ DeepSeek API
            response = self.deepseek_client.chat.completions.create(
                model="deepseek-chat",
                messages=[
                    {"role": "system", "content": self.system_prompt},
                    {"role": "user", "content": context_text}
                ],
                temperature=0.7,
                max_tokens=200,
                response_format={"type": "json_object"}
            )
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            result = json.loads(response.choices[0].message.content)
            
            thought = result.get('thought', '')
            should_speak = result.get('should_speak', False)
            speech_text = result.get('speech', '')
            
            self.get_logger().debug(f'ü§ñ DeepSeek: thought="{thought}", speak={should_speak}')
            
            return thought, should_speak, speech_text
            
        except Exception as e:
            self.get_logger().error(f'‚ùå –û—à–∏–±–∫–∞ DeepSeek API: {e}')
            return self._stub_analyze(context)
    
    def _format_context_for_prompt(self, context: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
        lines = [
            "=== –¢–ï–ö–£–©–ò–ô –ö–û–ù–¢–ï–ö–°–¢ –†–û–ë–û–¢–ê ===",
            ""
        ]
        
        # Vision
        if context.get('vision'):
            vision = context['vision']
            lines.append(f"üì∏ –ö–∞–º–µ—Ä–∞: {vision.get('description', 'N/A')}")
            if vision.get('objects'):
                lines.append(f"   –û–±—ä–µ–∫—Ç—ã: {vision['objects']}")
        else:
            lines.append("üì∏ –ö–∞–º–µ—Ä–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        # AprilTags
        if context.get('apriltags') and len(context['apriltags']) > 0:
            lines.append(f"üè∑Ô∏è  AprilTag –º–∞—Ä–∫–µ—Ä—ã: {context['apriltags']}")
        
        # –ü–æ–∑–∏—Ü–∏—è
        if context.get('pose'):
            pos = context['pose']
            lines.append(f"üìç –ü–æ–∑–∏—Ü–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ: ({pos['x']:.2f}, {pos['y']:.2f})")
        
        # –î–≤–∏–∂–µ–Ω–∏–µ
        if context.get('moving'):
            lines.append("üöó –°—Ç–∞—Ç—É—Å: –ï–¥—É")
        else:
            lines.append("üöó –°—Ç–∞—Ç—É—Å: –°—Ç–æ—é –Ω–∞ –º–µ—Å—Ç–µ")
        
        # –°–µ–Ω—Å–æ—Ä—ã
        if context.get('sensors'):
            sensors = context['sensors']
            battery = sensors.get('battery', 'N/A')
            temp = sensors.get('temperature', 'N/A')
            lines.append(f"üîã –ë–∞—Ç–∞—Ä–µ—è: {battery}V")
            lines.append(f"üå°Ô∏è  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C")
        
        # –ü–∞–º—è—Ç—å
        lines.append("")
        lines.append("=== –ù–ï–î–ê–í–ù–ò–ï –°–û–ë–´–¢–ò–Ø ===")
        lines.append(context.get('memory', '–ü–∞–º—è—Ç—å –ø—É—Å—Ç–∞'))
        
        return '\n'.join(lines)
    
    def _stub_analyze(self, context: Dict) -> tuple[Optional[str], bool, Optional[str]]:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–±–µ–∑ DeepSeek API)"""
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        thought = None
        should_speak = False
        speech_text = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞—Ç–∞—Ä–µ—é
        if context['sensors'] and context['sensors'].get('battery'):
            battery = context['sensors']['battery']
            if battery < 11.0:  # –ù–∏–∑–∫–∏–π –∑–∞—Ä—è–¥
                thought = f"–ë–∞—Ç–∞—Ä–µ—è –Ω–∏–∑–∫–∞—è: {battery:.1f}V"
                should_speak = True
                speech_text = f"–í–Ω–∏–º–∞–Ω–∏–µ! –ë–∞—Ç–∞—Ä–µ—è —Ä–∞–∑—Ä—è–∂–µ–Ω–∞: {battery:.1f} –≤–æ–ª—å—Ç"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º AprilTags
        if context['apriltags'] and len(context['apriltags']) > 0:
            tags = context['apriltags']
            thought = f"–í–∏–∂—É –º–∞—Ä–∫–µ—Ä—ã: {tags}"
            # –ù–µ –≥–æ–≤–æ—Ä–∏–º –∫–∞–∂–¥—ã–π —Ä–∞–∑, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–æ–µ
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
        if context['moving']:
            thought = "–Ø –µ–¥—É"
        else:
            thought = "–Ø —Å—Ç–æ—é –Ω–∞ –º–µ—Å—Ç–µ"
        
        return thought, should_speak, speech_text


def main(args=None):
    rclpy.init(args=args)
    node = ReflectionNode()
    
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()


if __name__ == '__main__':
    main()

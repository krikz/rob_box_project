#!/usr/bin/env python3
"""
reflection_node.py - Internal Dialogue Agent (Event-Driven)

–ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê (v2.0):
–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ —Å context_aggregator_node:

context_aggregator (MPC lite) ‚Üí events ‚Üí reflection_node ‚Üí thoughts/speech

–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞:
- /perception/context_update (PerceptionEvent) - –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
- /perception/user_speech (String) - —Ä–µ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–ü—É–±–ª–∏–∫—É–µ—Ç:
- /reflection/internal_thought (String) - –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º—ã—Å–ª–∏
- /voice/tts/request (String) - —Ä–µ—á—å —Ä–æ–±–æ—Ç–∞

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
1. Event-driven: —Ä–∞–∑–º—ã—à–ª—è–µ—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è (–Ω–µ –ø–æ —Ç–∞–π–º–µ—Ä—É)
2. Hook –¥–ª—è —Å—Ä–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: –ª–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚Üí –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç
3. –ù–ï —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ - —Ç–æ–ª—å–∫–æ –¥—É–º–∞–µ—Ç –∏ —Ä–µ—à–∞–µ—Ç

–í–ê–ñ–ù–û: –†–µ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ù–ï –≤–∫–ª—é—á–∞–µ—Ç—Å—è –≤ –æ–±—ã—á–Ω–æ–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ!
–û–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è dialogue_node. Reflection —Ä–∞–∑–º—ã—à–ª—è–µ—Ç –¢–û–õ–¨–ö–û –æ:
- –°–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º (health, battery, sensors)
- –ò–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ (vision, AprilTags, –¥–≤–∏–∂–µ–Ω–∏–µ)
- –°–≤–æ–∏—Ö –º—ã—Å–ª—è—Ö –∏ –æ—Ç–≤–µ—Ç–∞—Ö —Ä–æ–±–æ—Ç–∞
"""

import json
import time
import re
from typing import Optional, Dict, List
import os

import rclpy
from rclpy.node import Node
from std_msgs.msg import String

try:
    from openai import OpenAI
    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False

try:
    from rob_box_perception_msgs.msg import PerceptionEvent
except ImportError:
    PerceptionEvent = None


class ReflectionNode(Node):
    """Internal Dialogue Agent - Event-Driven"""
    
    def __init__(self):
        super().__init__('reflection_node')
        
        # ============ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ============
        self.declare_parameter('dialogue_timeout', 10.0)  # —Å–µ–∫—É–Ω–¥
        self.declare_parameter('enable_speech', True)
        self.declare_parameter('system_prompt_file', 'reflection_prompt.txt')
        self.declare_parameter('user_response_prompt_file', 'reflection_user_response_prompt.txt')
        self.declare_parameter('urgent_response_timeout', 2.0)  # —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å—Ä–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        
        self.dialogue_timeout = self.get_parameter('dialogue_timeout').value
        self.enable_speech = self.get_parameter('enable_speech').value
        self.urgent_response_timeout = self.get_parameter('urgent_response_timeout').value
        
        # ============ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ ============
        self.in_dialogue = False
        self.last_user_speech_time = None
        self.pending_user_speech: Optional[str] = None  # –û–∂–∏–¥–∞—é—â–∏–π —Å—Ä–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        
        # ============ Silence Mode (–∫–æ–º–∞–Ω–¥–∞ "–ø–æ–º–æ–ª—á–∏") ============
        self.silence_until: Optional[float] = None  # Timestamp –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–ª—á–∞—Ç—å
        
        # ============ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç ============
        self.last_context: Optional[PerceptionEvent] = None
        
        # ============ –ü–∞–º—è—Ç—å —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π ============
        self.recent_thoughts: List[str] = []  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º—ã—Å–ª–µ–π
        
        # ============ Speech Debounce ============
        self.last_speech_time: Optional[float] = None  # –ö–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –≥–æ–≤–æ—Ä–∏–ª–∏
        self.speech_debounce_interval = 30.0  # –ù–µ –≥–æ–≤–æ—Ä–∏—Ç—å —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 30 —Å–µ–∫—É–Ω–¥
        
        # ============ DeepSeek API ============
        self.deepseek_api_key = os.getenv('DEEPSEEK_API_KEY')
        self.deepseek_client = None
        
        if not self.deepseek_api_key:
            self.get_logger().warn('‚ö†Ô∏è  DEEPSEEK_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞.')
        elif not OPENAI_AVAILABLE:
            self.get_logger().warn('‚ö†Ô∏è  OpenAI –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!')
        else:
            try:
                self.deepseek_client = OpenAI(
                    api_key=self.deepseek_api_key,
                    base_url="https://api.deepseek.com"
                )
                self.get_logger().info('‚úÖ DeepSeek API –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
            except Exception as e:
                self.get_logger().error(f'‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DeepSeek: {e}')
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        self.system_prompt = self._load_system_prompt()
        self.user_response_prompt = self._load_user_response_prompt()
        
        # ============ –ü–æ–¥–ø–∏—Å–∫–∏ (Event-Driven) ============
        
        if PerceptionEvent:
            self.context_sub = self.create_subscription(
                PerceptionEvent,
                '/perception/context_update',
                self.on_context_update,
                10
            )
        else:
            self.get_logger().error('‚ùå PerceptionEvent message –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç.')
        
        self.speech_sub = self.create_subscription(
            String,
            '/perception/user_speech',
            self.on_user_speech,
            10
        )
        
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ—Ç–≤–µ—Ç—ã —Ä–æ–±–æ—Ç–∞ (–¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞)
        self.dialogue_sub = self.create_subscription(
            String,
            '/voice/dialogue/response',
            self.on_robot_response,
            10
        )
        
        # ============ –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ ============
        
        self.thought_pub = self.create_publisher(
            String,
            '/reflection/internal_thought',
            10
        )
        
        self.tts_pub = self.create_publisher(
            String,
            '/voice/tts/request',
            10
        )
        
        self.sound_pub = self.create_publisher(
            String,
            '/voice/sound/trigger',
            10
        )
        
        # ============ Sound Debounce ============
        self.last_sound_time: Dict[str, float] = {}  # sound_name -> timestamp
        self.sound_debounce_interval = 10.0  # —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∑–≤—É–∫–∞–º–∏
        
        self.get_logger().info('üß† Reflection Node v2.0 (Event-Driven) –∑–∞–ø—É—â–µ–Ω')
        self.get_logger().info(f'   –¢–∞–π–º-–∞—É—Ç –¥–∏–∞–ª–æ–≥–∞: {self.dialogue_timeout} —Å–µ–∫')
        self.get_logger().info(f'   –°—Ä–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç: {self.urgent_response_timeout} —Å–µ–∫')
        self.get_logger().info(f'   üîá Sound debounce: {self.sound_debounce_interval} —Å–µ–∫')
    
    def _load_system_prompt(self) -> str:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å system prompt –∏–∑ —Ñ–∞–π–ª–∞"""
        prompt_file = self.get_parameter('system_prompt_file').value
        
        from ament_index_python.packages import get_package_share_directory
        try:
            pkg_share = get_package_share_directory('rob_box_perception')
            prompt_path = os.path.join(pkg_share, 'prompts', prompt_file)
            
            with open(prompt_path, 'r', encoding='utf-8') as f:
                prompt = f.read()
            
            self.get_logger().info(f'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω prompt: {prompt_file} ({len(prompt)} –±–∞–π—Ç)')
            return prompt
        except Exception as e:
            self.get_logger().warn(f'‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å prompt: {e}')
            return self._get_fallback_prompt()
    
    def _load_user_response_prompt(self) -> str:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å user response prompt –∏–∑ —Ñ–∞–π–ª–∞"""
        prompt_file = self.get_parameter('user_response_prompt_file').value
        
        from ament_index_python.packages import get_package_share_directory
        try:
            pkg_share = get_package_share_directory('rob_box_perception')
            prompt_path = os.path.join(pkg_share, 'prompts', prompt_file)
            
            with open(prompt_path, 'r', encoding='utf-8') as f:
                prompt = f.read()
            
            self.get_logger().info(f'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω user response prompt: {prompt_file} ({len(prompt)} –±–∞–π—Ç)')
            return prompt
        except Exception as e:
            self.get_logger().warn(f'‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å user response prompt: {e}')
            return self._get_fallback_user_response_prompt()
    
    def _get_fallback_user_response_prompt(self) -> str:
        """Fallback user response prompt"""
        return """–û—Ç–≤–µ—Ç—å –Ω–∞ –ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫—Ä–∞—Ç–∫–æ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ JSON:
{
  "speech_ssml": "<speak>–¢–µ–∫—Å—Ç —Å SSML<break time='300ms'/></speak>"
}
"""
    
    def _get_fallback_prompt(self) -> str:
        """Fallback system prompt"""
        return """–¢—ã - –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≥–æ–ª–æ—Å —Ä–æ–±–æ—Ç–∞ –†–æ–±–ë–æ–∫—Å.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
1. –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç (–¥–∞—Ç—á–∏–∫–∏, –∫–∞–º–µ—Ä–∞, –ø–æ–∑–∏—Ü–∏—è, –ø–∞–º—è—Ç—å, –∑–¥–æ—Ä–æ–≤—å–µ)
2. –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º—ã—Å–ª–∏ (—Ä–µ—Ñ–ª–µ–∫—Å–∏—è, –≥–∏–ø–æ—Ç–µ–∑—ã, –Ω–∞–±–ª—é–¥–µ–Ω–∏—è)
3. –†–ï–®–ê–¢–¨: –≥–æ–≤–æ—Ä–∏—Ç—å –≤—Å–ª—É—Ö –∏–ª–∏ –º–æ–ª—á–∞—Ç—å

–ü—Ä–∞–≤–∏–ª–∞ —Ä–µ—á–∏:
- –ì–æ–≤–æ—Ä–∏ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
- –ù–ï –±–æ–ª—Ç–∞–π –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫
- –ì–æ–≤–æ—Ä–∏ –ø—Ä–∏: –Ω–∏–∑–∫–æ–π –±–∞—Ç–∞—Ä–µ–µ, –≤–∞–∂–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏, –ª–∏—á–Ω–æ–º –≤–æ–ø—Ä–æ—Å–µ

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ JSON:
{
  "thought": "–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –º—ã—Å–ª—å (–≤—Å–µ–≥–¥–∞)",
  "should_speak": false/true,
  "speech": "—Ç–µ–∫—Å—Ç —Ä–µ—á–∏ (–µ—Å–ª–∏ should_speak=true)"
}
"""
    
    # ============================================================
    # Callbacks - Events
    # ============================================================
    
    def on_context_update(self, msg: PerceptionEvent):
        """–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        self.last_context = msg
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–∂–∏–¥–∞—é—â–∏–π —Å—Ä–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        if self.pending_user_speech:
            self.get_logger().info('‚ö° –°—Ä–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å')
            self.process_urgent_question(self.pending_user_speech)
            self.pending_user_speech = None
            return
        
        # –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –∞–∫—Ç–∏–≤–µ–Ω - –Ω–µ —Ä–∞–∑–º—ã—à–ª—è–µ–º (–∂–¥—ë–º —Ç–∞–π–º-–∞—É—Ç–∞)
        if self.in_dialogue:
            if self.last_user_speech_time:
                elapsed = time.time() - self.last_user_speech_time
                if elapsed > self.dialogue_timeout:
                    self.in_dialogue = False
                    self.get_logger().info('üí¨ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω (—Ç–∞–π–º-–∞—É—Ç)')
                else:
                    return
        
        # –û–±—ã—á–Ω–æ–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ
        self.think_and_maybe_speak()
    
    def on_user_speech(self, msg: String):
        """–ü–æ–ª—É—á–µ–Ω–∞ —Ä–µ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        text = msg.data.strip()
        if not text:
            return
        
        self.get_logger().info(f'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "{text}"')
        
        # –ü–†–ò–û–†–ò–¢–ï–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-—Å–ª–æ–≤ ("–ø–æ–º–æ–ª—á–∏")
        if self._is_silence_command(text):
            self.get_logger().warn('üîá –ö–û–ú–ê–ù–î–ê SILENCE: —Ä–æ–±–æ—Ç –±—É–¥–µ—Ç –º–æ–ª—á–∞—Ç—å 5 –º–∏–Ω—É—Ç')
            self.silence_until = time.time() + 300  # 5 –º–∏–Ω—É—Ç
            # –ù–ï –ø—É–±–ª–∏–∫—É–µ–º –≤ TTS - –ø—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
            return
        
        self.in_dialogue = True
        self.last_user_speech_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å? (hook –¥–ª—è —Å—Ä–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞)
        if self._is_personal_question(text):
            self.get_logger().info('üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å ‚Üí —Å—Ä–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç')
            self.pending_user_speech = text
            
            # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —É–∂–µ –µ—Å—Ç—å - –æ—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É
            if self.last_context:
                self.process_urgent_question(text)
                self.pending_user_speech = None
        else:
            # –û–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å - –ø—É—Å—Ç—å dialogue_node –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç
            self.get_logger().debug('üí¨ –û–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å ‚Üí dialogue_node')
    
    def on_robot_response(self, msg: String):
        """–†–æ–±–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª"""
        self.get_logger().debug(f'ü§ñ –†–æ–±–æ—Ç: {msg.data[:50]}...')
        self.last_user_speech_time = time.time()  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
    
    # ============================================================
    # –õ–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (Hook –¥–ª—è —Å—Ä–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤)
    # ============================================================
    
    def _is_personal_question(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞: –ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–æ–±–æ—Ç–∞?"""
        text_lower = text.lower()
        
        personal_patterns = [
            r'\b–∫–∞–∫\s+(—É\s+—Ç–µ–±—è\s+)?–¥–µ–ª–∞\b',
            r'\b–∫–∞–∫\s+—Ç—ã\b',
            r'\b—á—Ç–æ\s+—É\s+—Ç–µ–±—è\b',
            r'\b–∫–∞–∫\s+—Ç–≤–æ—ë?\s+(–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ|—Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ)\b',
            r'\b—á—Ç–æ\s+(–¥–µ–ª–∞–µ—à—å|–ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç)\b',
            r'\b–∫–∞–∫\s+—Å–µ–±—è\s+—á—É–≤—Å—Ç–≤—É–µ—à—å\b',
        ]
        
        for pattern in personal_patterns:
            if re.search(pattern, text_lower):
                return True
        
        return False
    
    def _is_silence_command(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –∑–∞–º–æ–ª—á–∞—Ç—å?"""
        text_lower = text.lower()
        
        silence_patterns = [
            r'\b–ø–æ–º–æ–ª—á',    # –ø–æ–º–æ–ª—á–∏, –ø–æ–º–æ–ª—á–∏—Ç–µ
            r'\b–∑–∞–º–æ–ª—á',    # –∑–∞–º–æ–ª—á–∏, –∑–∞–º–æ–ª—á–∏—Ç–µ
            r'\b—Ö–≤–∞—Ç–∏—Ç\b',
            r'\b–∑–∞–∫—Ä–æ–π',    # –∑–∞–∫—Ä–æ–π—Å—è
            r'\b–∑–∞—Ç–∫–Ω',     # –∑–∞—Ç–∫–Ω–∏—Å—å, –∑–∞—Ç–∫–Ω–∏—Ç–µ—Å—å
            r'\b–Ω–µ\s+–º–µ—à–∞',  # –Ω–µ –º–µ—à–∞–π
        ]
        
        for pattern in silence_patterns:
            if re.search(pattern, text_lower):
                return True
        
        return False
    
    def process_urgent_question(self, question: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–æ—á–Ω–æ–≥–æ –ª–∏—á–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
        if not self.last_context:
            self.get_logger().warn('‚ö†Ô∏è  –ù–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ä–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞')
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        context_summary = self._format_context_summary(self.last_context)
        
        user_prompt = f"""–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "{question}"

{context_summary}

–°—Ñ–æ—Ä–º–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –≤ —Ñ–æ—Ä–º–∞—Ç–µ SSML."""
        
        # –í—ã–∑–æ–≤ AI —Å user response prompt
        result = self._call_deepseek_user_response(user_prompt)
        
        if result:
            speech_ssml = result.get('speech_ssml', '')
            
            if speech_ssml and self.enable_speech:
                self._publish_speech_ssml(speech_ssml)
    
    # ============================================================
    # –û–±—ã—á–Ω–æ–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ
    # ============================================================
    
    def think_and_maybe_speak(self):
        """–û–±—ã—á–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π"""
        if not self.last_context:
            self.get_logger().debug('‚è∏Ô∏è  –ù–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π')
            return
        
        context_text = self._format_context_for_prompt(self.last_context)
        
        # –í—ã–∑–æ–≤ AI
        result = self._call_deepseek(context_text, urgent=False)
        
        if result:
            thought = result.get('thought', '')
            should_speak = result.get('should_speak', False)
            speech = result.get('speech', '')
            
            # –ü—É–±–ª–∏–∫—É–µ–º –º—ã—Å–ª—å
            if thought:
                self._publish_thought(thought)
                self.get_logger().info(f'üß† –†–∞–∑–º—ã—à–ª–µ–Ω–∏–µ: {thought}')
            
            # –ì–æ–≤–æ—Ä–∏–º –µ—Å–ª–∏ —Ä–µ—à–∏–ª–∏
            if should_speak and speech and self.enable_speech:
                self._publish_speech(speech)
                self.get_logger().info(f'üó£Ô∏è  –ì–æ–≤–æ—Ä—é: "{speech}"')
    
    # ============================================================
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    # ============================================================
    
    def _format_context_summary(self, ctx: PerceptionEvent) -> str:
        """–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–¥–ª—è —Å—Ä–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤)"""
        lines = ["=== –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï ==="]
        
        # Health
        lines.append(f"–ó–¥–æ—Ä–æ–≤—å–µ: {ctx.system_health_status}")
        if ctx.health_issues:
            lines.append(f"–ü—Ä–æ–±–ª–µ–º—ã: {', '.join(ctx.health_issues)}")
        
        # Battery
        if ctx.battery_voltage > 0:
            lines.append(f"üîã –ë–∞—Ç–∞—Ä–µ—è: {ctx.battery_voltage:.1f}V")
        
        # Moving
        if ctx.is_moving:
            lines.append("üöó –°—Ç–∞—Ç—É—Å: –ï–¥—É")
        else:
            lines.append("üöó –°—Ç–∞—Ç—É—Å: –°—Ç–æ—é")
        
        return '\n'.join(lines)
    
    def _format_context_for_prompt(self, ctx: PerceptionEvent) -> str:
        """–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è"""
        lines = ["=== –¢–ï–ö–£–©–ò–ô –ö–û–ù–¢–ï–ö–°–¢ –†–û–ë–û–¢–ê ===", ""]
        
        # –í–ê–ñ–ù–û: –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º—ã—Å–ª–∏ (–¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π)
        if self.recent_thoughts:
            lines.append("=== –ú–û–ò –ü–û–°–õ–ï–î–ù–ò–ï –ú–´–°–õ–ò (–¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞) ===")
            for i, thought in enumerate(self.recent_thoughts[-5:], 1):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
                lines.append(f"{i}. {thought}")
            lines.append("")
        
        # Vision
        if ctx.vision_context:
            try:
                vision = json.loads(ctx.vision_context)
                lines.append(f"üì∏ –ö–∞–º–µ—Ä–∞: {vision.get('description', 'N/A')}")
            except:
                lines.append("üì∏ –ö–∞–º–µ—Ä–∞: –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞")
        else:
            lines.append("üì∏ –ö–∞–º–µ—Ä–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        # Pose
        if ctx.pose.position.x != 0 or ctx.pose.position.y != 0:
            lines.append(f"üìç –ü–æ–∑–∏—Ü–∏—è: ({ctx.pose.position.x:.2f}, {ctx.pose.position.y:.2f})")
        
        # Movement
        if ctx.is_moving:
            vx = ctx.velocity.linear.x
            wz = ctx.velocity.angular.z
            lines.append(f"üöó –î–≤–∏–∂–µ–Ω–∏–µ: v={vx:.2f} m/s, œâ={wz:.2f} rad/s")
        else:
            lines.append("üöó –°—Ç–∞—Ç—É—Å: –°—Ç–æ—é –Ω–∞ –º–µ—Å—Ç–µ")
        
        # Sensors
        if ctx.battery_voltage > 0:
            lines.append(f"üîã –ë–∞—Ç–∞—Ä–µ—è: {ctx.battery_voltage:.1f}V")
        if ctx.temperature > 0:
            lines.append(f"üå°Ô∏è  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {ctx.temperature:.1f}¬∞C")
        
        # AprilTags
        if ctx.apriltag_ids:
            lines.append(f"üè∑Ô∏è  AprilTags: {ctx.apriltag_ids}")
        
        # System Health
        lines.append("")
        lines.append("=== –ó–î–û–†–û–í–¨–ï –°–ò–°–¢–ï–ú–´ ===")
        lines.append(f"–°—Ç–∞—Ç—É—Å: {ctx.system_health_status}")
        if ctx.health_issues:
            for issue in ctx.health_issues:
                lines.append(f"‚ö†Ô∏è  {issue}")
        
        # Summarized History (—Å—É–º–º–∞—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –ø–æ —Ç–∏–ø–∞–º)
        lines.append("")
        lines.append("=== –°–£–ú–ú–ê–†–ò–ó–û–í–ê–ù–ù–ê–Ø –ò–°–¢–û–†–ò–Ø ===")
        
        if ctx.speech_summaries and ctx.speech_summaries != '[]':
            try:
                speech_sums = json.loads(ctx.speech_summaries)
                if speech_sums:
                    lines.append("\nüë§ –í–û–ü–†–û–°–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:")
                    for s in speech_sums[-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3
                        lines.append(f"  ‚Ä¢ {s['summary']}")
            except:
                pass
        
        if ctx.robot_response_summaries and ctx.robot_response_summaries != '[]':
            try:
                response_sums = json.loads(ctx.robot_response_summaries)
                if response_sums:
                    lines.append("\nü§ñ –ú–û–ò –û–¢–í–ï–¢–´:")
                    for s in response_sums[-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3
                        lines.append(f"  ‚Ä¢ {s['summary']}")
            except:
                pass
        
        if ctx.robot_thought_summaries and ctx.robot_thought_summaries != '[]':
            try:
                thought_sums = json.loads(ctx.robot_thought_summaries)
                if thought_sums:
                    lines.append("\nüß† –ú–û–ò –†–ê–ó–ú–´–®–õ–ï–ù–ò–Ø:")
                    for s in thought_sums[-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3
                        lines.append(f"  ‚Ä¢ {s['summary']}")
            except:
                pass
        
        if ctx.vision_summaries and ctx.vision_summaries != '[]':
            try:
                vision_sums = json.loads(ctx.vision_summaries)
                if vision_sums:
                    lines.append("\nüëÅÔ∏è  –ù–ê–ë–õ–Æ–î–ï–ù–ò–Ø:")
                    for s in vision_sums[-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3
                        lines.append(f"  ‚Ä¢ {s['summary']}")
            except:
                pass
        
        if ctx.system_summaries and ctx.system_summaries != '[]':
            try:
                system_sums = json.loads(ctx.system_summaries)
                if system_sums:
                    lines.append("\n‚öôÔ∏è  –°–ò–°–¢–ï–ú–ê:")
                    for s in system_sums[-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3
                        lines.append(f"  ‚Ä¢ {s['summary']}")
            except:
                pass
        
        # Memory (–Ω–µ–¥–∞–≤–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è ~10)
        if ctx.memory_summary:
            lines.append("")
            lines.append("=== –ù–ï–î–ê–í–ù–ò–ï –°–û–ë–´–¢–ò–Ø (–ø–æ—Å–ª–µ–¥–Ω–∏–µ ~10) ===")
            lines.append(ctx.memory_summary)
        
        return '\n'.join(lines)
    
    # ============================================================
    # DeepSeek API
    # ============================================================
    
    def _call_deepseek(self, prompt: str, urgent: bool = False) -> Optional[Dict]:
        """–í—ã–∑–æ–≤ DeepSeek API –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è"""
        if not self.deepseek_client:
            return self._stub_response(urgent)
        
        try:
            response = self.deepseek_client.chat.completions.create(
                model="deepseek-chat",
                messages=[
                    {"role": "system", "content": self.system_prompt},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.7,
                max_tokens=150 if urgent else 200,
                response_format={"type": "json_object"}
            )
            
            result = json.loads(response.choices[0].message.content)
            
            thought = result.get('thought', '')[:80]
            self.get_logger().info(f'ü§ñ AI: thought="{thought}..."')
            
            return result
            
        except Exception as e:
            self.get_logger().error(f'‚ùå –û—à–∏–±–∫–∞ DeepSeek API: {e}')
            return self._stub_response(urgent)
    
    def _call_deepseek_user_response(self, user_prompt: str) -> Optional[Dict]:
        """–í—ã–∑–æ–≤ DeepSeek API –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Å SSML)"""
        if not self.deepseek_client:
            return {
                'speech_ssml': '<speak>–£ –º–µ–Ω+—è –≤—Å+—ë –æ—Ç–ª+–∏—á–Ω–æ!<break time="300ms"/>–ì–æ—Ç+–æ–≤ –∫ —Ä–∞–±+–æ—Ç–µ.<break time="400ms"/></speak>'
            }
        
        try:
            response = self.deepseek_client.chat.completions.create(
                model="deepseek-chat",
                messages=[
                    {"role": "system", "content": self.user_response_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                temperature=0.7,
                max_tokens=150,
                response_format={"type": "json_object"}
            )
            
            result = json.loads(response.choices[0].message.content)
            
            speech_ssml = result.get('speech_ssml', '')
            self.get_logger().info(f'ü§ñ AI User Response: {speech_ssml[:100]}...')
            
            return result
            
        except Exception as e:
            self.get_logger().error(f'‚ùå –û—à–∏–±–∫–∞ DeepSeek API (user response): {e}')
            return {
                'speech_ssml': '<speak>–£ –º–µ–Ω+—è –≤—Å+—ë –æ—Ç–ª+–∏—á–Ω–æ!<break time="300ms"/>–ì–æ—Ç+–æ–≤ –∫ —Ä–∞–±+–æ—Ç–µ.<break time="400ms"/></speak>'
            }
    
    def _stub_response(self, urgent: bool) -> Dict:
        """–ó–∞–≥–ª—É—à–∫–∞ –±–µ–∑ API"""
        if urgent:
            return {
                'thought': '–°—Ä–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω',
                'speech': '–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ, –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!'
            }
        else:
            return {
                'thought': '–°—Ç–æ—é –Ω–∞ –º–µ—Å—Ç–µ, –≤—Å—ë —Å–ø–æ–∫–æ–π–Ω–æ',
                'should_speak': False,
                'speech': ''
            }
    
    # ============================================================
    # –ü—É–±–ª–∏–∫–∞—Ü–∏–∏
    # ============================================================
    
    def _publish_thought(self, thought: str):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –º—ã—Å–ª–∏"""
        msg = String()
        msg.data = thought
        self.thought_pub.publish(msg)
        
        # –¢—Ä–∏–≥–≥–µ—Ä –∑–≤—É–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–æ—Ü–∏–∏
        self._trigger_sound_for_thought(thought)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.recent_thoughts.append(thought)
        if len(self.recent_thoughts) > 10:
            self.recent_thoughts.pop(0)
    
    def _publish_speech(self, speech: str):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ—á–∏ –≤ TTS (–≤ —Ñ–æ—Ä–º–∞—Ç–µ SSML) - –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: silence mode –∞–∫—Ç–∏–≤–µ–Ω?
        if self.silence_until and time.time() < self.silence_until:
            remaining = int(self.silence_until - time.time())
            self.get_logger().debug(f'üîá Silence mode: –Ω–µ –≥–æ–≤–æ—Ä—é (–æ—Å—Ç–∞–ª–æ—Å—å {remaining} —Å–µ–∫)')
            return  # –ù–ï –ø—É–±–ª–∏–∫—É–µ–º —Ä–µ—á—å
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –≥–æ–≤–æ—Ä–∏–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ? (debounce)
        current_time = time.time()
        if self.last_speech_time:
            time_since_last = current_time - self.last_speech_time
            if time_since_last < self.speech_debounce_interval:
                self.get_logger().debug(
                    f'üîá Speech debounce: –Ω–µ –≥–æ–≤–æ—Ä—é (–ø—Ä–æ—à–ª–æ {time_since_last:.1f}s < {self.speech_debounce_interval}s)'
                )
                return  # –ù–ï –ø—É–±–ª–∏–∫—É–µ–º —Ä–µ—á—å
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º JSON —Å SSML (–∫–∞–∫ dialogue_node)
        import json
        response_json = {
            "ssml": f"<speak>{speech}</speak>"
        }
        
        msg = String()
        msg.data = json.dumps(response_json, ensure_ascii=False)
        self.tts_pub.publish(msg)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ—á–∏
        self.last_speech_time = current_time
    
    def _publish_speech_ssml(self, speech_ssml: str):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ—á–∏ –≤ TTS (—É–∂–µ –≤ SSML —Ñ–æ—Ä–º–∞—Ç–µ) - –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: silence mode –∞–∫—Ç–∏–≤–µ–Ω?
        if self.silence_until and time.time() < self.silence_until:
            remaining = int(self.silence_until - time.time())
            self.get_logger().debug(f'üîá Silence mode: –Ω–µ –≥–æ–≤–æ—Ä—é (–æ—Å—Ç–∞–ª–æ—Å—å {remaining} —Å–µ–∫)')
            return  # –ù–ï –ø—É–±–ª–∏–∫—É–µ–º —Ä–µ—á—å
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –≥–æ–≤–æ—Ä–∏–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ? (debounce –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
        # –î–ª—è –°–†–û–ß–ù–´–• –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–æ—Ä–æ—Ç–∫–∏–π debounce - 2 —Å–µ–∫—É–Ω–¥—ã
        current_time = time.time()
        if self.last_speech_time:
            time_since_last = current_time - self.last_speech_time
            if time_since_last < 2.0:  # 2 —Å–µ–∫ –¥–ª—è —Å—Ä–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–±—ã–ª–æ 5 —Å–µ–∫)
                self.get_logger().debug(
                    f'üîá Speech debounce (SSML): –Ω–µ –≥–æ–≤–æ—Ä—é (–ø—Ä–æ—à–ª–æ {time_since_last:.1f}s < 2.0s)'
                )
                return  # –ù–ï –ø—É–±–ª–∏–∫—É–µ–º —Ä–µ—á—å
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º JSON —Å –≥–æ—Ç–æ–≤—ã–º SSML
        import json
        response_json = {
            "ssml": speech_ssml
        }
        
        msg = String()
        msg.data = json.dumps(response_json, ensure_ascii=False)
        self.tts_pub.publish(msg)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ—á–∏
        self.last_speech_time = current_time
        
        self.get_logger().info(f'üó£Ô∏è  Reflection ‚Üí TTS: {speech_ssml[:80]}...')
    
    # ============================================================
    # –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã (—ç–º–æ—Ü–∏–∏)
    # ============================================================
    
    def _trigger_sound_for_thought(self, thought: str):
        """–¢—Ä–∏–≥–≥–µ—Ä –∑–≤—É–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–æ—Ü–∏–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è"""
        thought_lower = thought.lower()
        
        # –£–¥–∏–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if any(word in thought_lower for word in ['—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ', '–≤–∞—É', '–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ', '—Å—Ç—Ä–∞–Ω–Ω–æ', '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ']):
            self._play_sound('surprise')
        
        # –†–∞–∑–º—ã—à–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–¥—É–º—ã–≤–∞–Ω–∏–∏
        elif any(word in thought_lower for word in ['–¥—É–º–∞—é', '—Ä–∞–∑–º—ã—à–ª—è—é', '–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é', '—Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é', '–ø—Ä–æ–≤–µ—Ä—è—é']):
            self._play_sound('thinking')
        
        # –ó–∞–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ –ø—Ä–∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç–∏
        elif any(word in thought_lower for word in ['–Ω–µ —É–≤–µ—Ä–µ–Ω', '—Å–ª–æ–∂–Ω–æ', '–Ω–µ–ø–æ–Ω—è—Ç–Ω–æ', '–∑–∞—Ç—Ä—É–¥–Ω—è—é—Å—å', '–Ω–µ –∑–Ω–∞—é']):
            self._play_sound('confused')
        
        # –ó–ª–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ö–†–ò–¢–ò–ß–ù–´–• –ø—Ä–æ–±–ª–µ–º–∞—Ö (–Ω–µ degraded - —ç—Ç–æ warning)
        elif any(word in thought_lower for word in ['–∫—Ä–∏—Ç–∏—á–Ω–æ', '–∞–≤–∞—Ä–∏—è', '–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞']):
            self._play_sound('angry')
        
        # –†–∞–¥–æ—Å—Ç—å –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
        elif any(word in thought_lower for word in ['–æ—Ç–ª–∏—á–Ω–æ', '—Ö–æ—Ä–æ—à–æ', '—É—Å–ø–µ—à–Ω–æ', '–≥–æ—Ç–æ–≤', 'healthy', '–Ω–æ—Ä–º–∞']):
            self._play_sound('cute')
    
    def _play_sound(self, sound_name: str):
        """–ü—Ä–æ–∏–≥—Ä–∞—Ç—å –∑–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç"""
        try:
            msg = String()
            msg.data = sound_name
            self.sound_pub.publish(msg)
            self.get_logger().debug(f'üéµ –ó–≤—É–∫: {sound_name}')
        except Exception as e:
            self.get_logger().warn(f'‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –∑–≤—É–∫–∞: {e}')


def main(args=None):
    rclpy.init(args=args)
    node = ReflectionNode()
    
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()


if __name__ == '__main__':
    main()

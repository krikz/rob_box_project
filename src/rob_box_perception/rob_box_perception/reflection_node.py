#!/usr/bin/env python3
"""
reflection_node.py - Internal Dialogue Agent

–Ø–¥—Ä–æ —Å–∏—Å—Ç–µ–º—ã –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Ä–æ–±–æ—Ç–∞.
–°–æ–±–∏—Ä–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, —Ä–∞–∑–º—ã—à–ª—è–µ—Ç, —Ä–µ—à–∞–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å –∏–ª–∏ –Ω–µ—Ç.

–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞:
- /perception/vision_context (—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∫–∞–º–µ—Ä - —Å—Ç–∞–±)
- /apriltag/detections (AprilTag –º–∞—Ä–∫–µ—Ä—ã)
- /voice/stt/result (—Ä–µ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
- /voice/dialogue/response (–æ—Ç–≤–µ—Ç—ã —Ä–æ–±–æ—Ç–∞)
- /rtabmap/localization_pose (–ø–æ–∑–∏—Ü–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ)
- /odom (–æ–¥–æ–º–µ—Ç—Ä–∏—è)
- /device/snapshot (—Å–µ–Ω—Å–æ—Ä—ã ESP32: –±–∞—Ç–∞—Ä–µ—è, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞)
- /sensors/motor_state/* (—Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ—Ç–æ—Ä–æ–≤)

–ü—É–±–ª–∏–∫—É–µ—Ç:
- /reflection/internal_thought (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º—ã—Å–ª–∏ –¥–ª—è –ª–æ–≥–æ–≤)
- /voice/tts/request (–∫–æ–≥–¥–∞ —Ä–µ—à–∞–µ—Ç —Å–∫–∞–∑–∞—Ç—å —á—Ç–æ-—Ç–æ –≤—Å–ª—É—Ö)
"""

import json
import time
from typing import Optional, Dict, List
import os

import rclpy
from rclpy.node import Node
from std_msgs.msg import String
from geometry_msgs.msg import PoseStamped
from nav_msgs.msg import Odometry

# TODO: –î–æ–±–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è AprilTag –∏ DeviceSnapshot –∫–æ–≥–¥–∞ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è
# from apriltag_msgs.msg import AprilTagDetectionArray
# from robot_sensor_hub_msg.msg import DeviceSnapshot


class ReflectionNode(Node):
    """–ù–æ–¥–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Ä–æ–±–æ—Ç–∞"""
    
    def __init__(self):
        super().__init__('reflection_node')
        
        # ============ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ============
        self.declare_parameter('reflection_rate', 1.0)  # Hz - —á–∞—Å—Ç–æ—Ç–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
        self.declare_parameter('dialogue_timeout', 10.0)  # —Å–µ–∫—É–Ω–¥ - —Ç–∞–π–º-–∞—É—Ç –¥–∏–∞–ª–æ–≥–∞
        self.declare_parameter('memory_window', 60)  # —Å–µ–∫—É–Ω–¥ - –æ–∫–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ–π –ø–∞–º—è—Ç–∏
        self.declare_parameter('enable_speech', True)  # –í–∫–ª—é—á–∏—Ç—å —Ä–µ—á—å —Ä–æ–±–æ—Ç–∞
        
        self.reflection_rate = self.get_parameter('reflection_rate').value
        self.dialogue_timeout = self.get_parameter('dialogue_timeout').value
        self.memory_window = self.get_parameter('memory_window').value
        self.enable_speech = self.get_parameter('enable_speech').value
        
        # ============ –°–æ—Å—Ç–æ—è–Ω–∏–µ ============
        self.in_dialogue = False
        self.last_user_speech_time = None
        
        # ============ –ü–∞–º—è—Ç—å ============
        self.short_memory: List[Dict] = []  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥
        self.long_memory: List[Dict] = []  # –í–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        
        # ============ –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç ============
        self.current_vision = None
        self.current_pose = None
        self.current_odom = None
        self.current_sensors = None
        self.last_apriltags = []
        
        # ============ –ü–æ–¥–ø–∏—Å–∫–∏ - Vision ============
        self.vision_sub = self.create_subscription(
            String,
            '/perception/vision_context',
            self.on_vision_context,
            10
        )
        
        # TODO: –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–≥–¥–∞ AprilTag messages –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã
        # self.apriltag_sub = self.create_subscription(
        #     AprilTagDetectionArray,
        #     '/apriltag/detections',
        #     self.on_apriltags,
        #     10
        # )
        
        # ============ –ü–æ–¥–ø–∏—Å–∫–∏ - –î–∏–∞–ª–æ–≥ ============
        self.stt_sub = self.create_subscription(
            String,
            '/voice/stt/result',
            self.on_user_speech,
            10
        )
        
        self.dialogue_sub = self.create_subscription(
            String,
            '/voice/dialogue/response',
            self.on_robot_response,
            10
        )
        
        # ============ –ü–æ–¥–ø–∏—Å–∫–∏ - –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è ============
        self.pose_sub = self.create_subscription(
            PoseStamped,
            '/rtabmap/localization_pose',
            self.on_robot_pose,
            10
        )
        
        self.odom_sub = self.create_subscription(
            Odometry,
            '/odom',
            self.on_odometry,
            10
        )
        
        # TODO: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ–Ω—Å–æ—Ä—ã ESP32
        # self.sensor_hub_sub = self.create_subscription(
        #     DeviceSnapshot,
        #     '/device/snapshot',
        #     self.on_device_snapshot,
        #     10
        # )
        
        # ============ –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ ============
        self.thought_pub = self.create_publisher(
            String,
            '/reflection/internal_thought',
            10
        )
        
        self.tts_pub = self.create_publisher(
            String,
            '/voice/tts/request',
            10
        )
        
        # ============ –¢–∞–π–º–µ—Ä —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π ============
        timer_period = 1.0 / self.reflection_rate
        self.reflection_timer = self.create_timer(timer_period, self.reflection_loop)
        
        # ============ DeepSeek API –∫–ª–∏–µ–Ω—Ç ============
        self.deepseek_api_key = os.getenv('DEEPSEEK_API_KEY')
        if not self.deepseek_api_key:
            self.get_logger().warn('‚ö†Ô∏è  DEEPSEEK_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞.')
        
        self.get_logger().info('üß† Reflection Node –∑–∞–ø—É—â–µ–Ω')
        self.get_logger().info(f'   –ß–∞—Å—Ç–æ—Ç–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π: {self.reflection_rate} Hz')
        self.get_logger().info(f'   –¢–∞–π–º-–∞—É—Ç –¥–∏–∞–ª–æ–≥–∞: {self.dialogue_timeout} —Å–µ–∫')
        self.get_logger().info(f'   –û–∫–Ω–æ –ø–∞–º—è—Ç–∏: {self.memory_window} —Å–µ–∫')
    
    # ============================================================
    # Callbacks - –í–æ—Å–ø—Ä–∏—è—Ç–∏–µ
    # ============================================================
    
    def on_vision_context(self, msg: String):
        """–ü–æ–ª—É—á–µ–Ω —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∫–∞–º–µ—Ä"""
        try:
            self.current_vision = json.loads(msg.data)
            self.get_logger().debug(f'üëÅÔ∏è  Vision: {self.current_vision.get("description", "N/A")}')
        except json.JSONDecodeError:
            self.get_logger().error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ vision_context JSON')
    
    def on_apriltags(self, msg):
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã AprilTag –º–∞—Ä–∫–µ—Ä—ã"""
        self.last_apriltags = msg.detections
        if len(self.last_apriltags) > 0:
            tag_ids = [d.id for d in self.last_apriltags]
            self.get_logger().info(f'üè∑Ô∏è  AprilTags: {tag_ids}')
            self.add_to_memory('apriltag', f'–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –º–∞—Ä–∫–µ—Ä—ã: {tag_ids}')
    
    def on_robot_pose(self, msg: PoseStamped):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Ä–æ–±–æ—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–µ"""
        self.current_pose = msg
        x = msg.pose.position.x
        y = msg.pose.position.y
        self.get_logger().debug(f'üìç –ü–æ–∑–∏—Ü–∏—è: ({x:.2f}, {y:.2f})')
    
    def on_odometry(self, msg: Odometry):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–æ–º–µ—Ç—Ä–∏–∏"""
        self.current_odom = msg
        vx = msg.twist.twist.linear.x
        wz = msg.twist.twist.angular.z
        self.get_logger().debug(f'üöó –°–∫–æ—Ä–æ—Å—Ç—å: vx={vx:.2f}, wz={wz:.2f}')
    
    def on_device_snapshot(self, msg):
        """–î–∞–Ω–Ω—ã–µ —Å–µ–Ω—Å–æ—Ä–æ–≤ –æ—Ç ESP32"""
        self.current_sensors = {
            'battery': msg.battery_voltage,
            'temperature': msg.temperature,
            'timestamp': time.time()
        }
        self.get_logger().debug(
            f'üîã –ë–∞—Ç–∞—Ä–µ—è: {msg.battery_voltage:.1f}V, '
            f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {msg.temperature:.1f}¬∞C'
        )
    
    # ============================================================
    # Callbacks - –î–∏–∞–ª–æ–≥
    # ============================================================
    
    def on_user_speech(self, msg: String):
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –≥–æ–≤–æ—Ä–∏—Ç—å - —Å—Ç–∞–≤–∏–º –¥–∏–∞–ª–æ–≥ –Ω–∞ –ø–∞—É–∑—É"""
        self.in_dialogue = True
        self.last_user_speech_time = time.time()
        
        self.get_logger().info(f'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "{msg.data}"')
        self.add_to_memory('user', msg.data)
    
    def on_robot_response(self, msg: String):
        """–†–æ–±–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∏–∞–ª–æ–≥"""
        self.last_user_speech_time = time.time()
        
        self.get_logger().info(f'ü§ñ –†–æ–±–æ—Ç: "{msg.data}"')
        self.add_to_memory('robot', msg.data)
    
    # ============================================================
    # –ü–∞–º—è—Ç—å
    # ============================================================
    
    def add_to_memory(self, event_type: str, content: str, important: bool = False):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –ø–∞–º—è—Ç—å"""
        event = {
            'type': event_type,
            'content': content,
            'timestamp': time.time()
        }
        
        # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞–º—è—Ç—å
        self.short_memory.append(event)
        
        # –î–æ–ª–≥–∞—è –ø–∞–º—è—Ç—å (—Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è)
        if important:
            self.long_memory.append(event)
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏–∑ –∫–æ—Ä–æ—Ç–∫–æ–π –ø–∞–º—è—Ç–∏
        cutoff_time = time.time() - self.memory_window
        self.short_memory = [
            e for e in self.short_memory 
            if e['timestamp'] > cutoff_time
        ]
    
    def get_memory_context(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–∞–º—è—Ç–∏ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
        lines = []
        for event in self.short_memory[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–±—ã—Ç–∏–π
            elapsed = time.time() - event['timestamp']
            lines.append(f"[{elapsed:.0f}s –Ω–∞–∑–∞–¥] {event['type']}: {event['content']}")
        return '\n'.join(lines) if lines else '–ü–∞–º—è—Ç—å –ø—É—Å—Ç–∞'
    
    # ============================================================
    # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
    # ============================================================
    
    def reflection_loop(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏–¥—ë—Ç –ª–∏ –¥–∏–∞–ª–æ–≥
        if self.in_dialogue:
            if self.last_user_speech_time:
                elapsed = time.time() - self.last_user_speech_time
                if elapsed > self.dialogue_timeout:
                    self.in_dialogue = False
                    self.get_logger().info('üí¨ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω (—Ç–∞–π–º-–∞—É—Ç)')
                else:
                    # –ñ–¥—ë–º –ø–æ–∫–∞ –¥–∏–∞–ª–æ–≥ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è
                    return
        
        # –î–∏–∞–ª–æ–≥–∞ –Ω–µ—Ç - –º–æ–∂–µ–º —Ä–∞–∑–º—ã—à–ª—è—Ç—å –∏ –≥–æ–≤–æ—Ä–∏—Ç—å
        self.think_and_maybe_speak()
    
    def think_and_maybe_speak(self):
        """–†–∞–∑–º—ã—à–ª–µ–Ω–∏–µ –∏ —Ä–µ—à–µ–Ω–∏–µ –≥–æ–≤–æ—Ä–∏—Ç—å –∏–ª–∏ –Ω–µ—Ç"""
        # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = self.build_context()
        
        if not context:
            return  # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ DeepSeek –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        thought, should_speak, speech_text = self.analyze_context(context)
        
        # –ü—É–±–ª–∏–∫—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –º—ã—Å–ª—å
        if thought:
            thought_msg = String()
            thought_msg.data = thought
            self.thought_pub.publish(thought_msg)
            self.get_logger().debug(f'üí≠ –ú—ã—Å–ª—å: {thought}')
        
        # –ì–æ–≤–æ—Ä–∏–º, –µ—Å–ª–∏ —Ä–µ—à–∏–ª–∏
        if should_speak and speech_text and self.enable_speech:
            tts_msg = String()
            tts_msg.data = speech_text
            self.tts_pub.publish(tts_msg)
            self.get_logger().info(f'üó£Ô∏è  –ì–æ–≤–æ—Ä—é: "{speech_text}"')
            self.add_to_memory('robot_reflection', speech_text, important=True)
    
    def build_context(self) -> Optional[Dict]:
        """–°–æ–±—Ä–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        context = {
            'timestamp': time.time(),
            'vision': self.current_vision,
            'pose': None,
            'moving': False,
            'sensors': self.current_sensors,
            'apriltags': [tag.id for tag in self.last_apriltags] if hasattr(self, 'last_apriltags') else [],
            'memory': self.get_memory_context()
        }
        
        # –ü–æ–∑–∏—Ü–∏—è
        if self.current_pose:
            context['pose'] = {
                'x': self.current_pose.pose.position.x,
                'y': self.current_pose.pose.position.y
            }
        
        # –î–≤–∏–∂–µ–Ω–∏–µ
        if self.current_odom:
            vx = abs(self.current_odom.twist.twist.linear.x)
            wz = abs(self.current_odom.twist.twist.angular.z)
            context['moving'] = vx > 0.01 or wz > 0.01
        
        return context if any([
            self.current_vision,
            self.current_pose,
            self.current_sensors,
            len(self.last_apriltags) > 0
        ]) else None
    
    def analyze_context(self, context: Dict) -> tuple[Optional[str], bool, Optional[str]]:
        """
        –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ DeepSeek API
        
        Returns:
            (internal_thought, should_speak, speech_text)
        """
        if not self.deepseek_api_key:
            # –ó–∞–≥–ª—É—à–∫–∞ –±–µ–∑ API
            return self._stub_analyze(context)
        
        # TODO: –†–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ DeepSeek API
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        return self._stub_analyze(context)
    
    def _stub_analyze(self, context: Dict) -> tuple[Optional[str], bool, Optional[str]]:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–±–µ–∑ DeepSeek API)"""
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        thought = None
        should_speak = False
        speech_text = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞—Ç–∞—Ä–µ—é
        if context['sensors'] and context['sensors'].get('battery'):
            battery = context['sensors']['battery']
            if battery < 11.0:  # –ù–∏–∑–∫–∏–π –∑–∞—Ä—è–¥
                thought = f"–ë–∞—Ç–∞—Ä–µ—è –Ω–∏–∑–∫–∞—è: {battery:.1f}V"
                should_speak = True
                speech_text = f"–í–Ω–∏–º–∞–Ω–∏–µ! –ë–∞—Ç–∞—Ä–µ—è —Ä–∞–∑—Ä—è–∂–µ–Ω–∞: {battery:.1f} –≤–æ–ª—å—Ç"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º AprilTags
        if context['apriltags'] and len(context['apriltags']) > 0:
            tags = context['apriltags']
            thought = f"–í–∏–∂—É –º–∞—Ä–∫–µ—Ä—ã: {tags}"
            # –ù–µ –≥–æ–≤–æ—Ä–∏–º –∫–∞–∂–¥—ã–π —Ä–∞–∑, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–æ–µ
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
        if context['moving']:
            thought = "–Ø –µ–¥—É"
        else:
            thought = "–Ø —Å—Ç–æ—é –Ω–∞ –º–µ—Å—Ç–µ"
        
        return thought, should_speak, speech_text


def main(args=None):
    rclpy.init(args=args)
    node = ReflectionNode()
    
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()


if __name__ == '__main__':
    main()

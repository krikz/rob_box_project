#!/usr/bin/env python3
"""
node_monitor.py - ROS2 Node Availability Monitor

–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ ROS2 –Ω–æ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç `ros2 node list` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–¥.
"""

import subprocess
import time
from typing import Dict, List

from rclpy.node import Node


class NodeAvailabilityMonitor:
    """
    –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ ROS2 –Ω–æ–¥.

    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–¥ –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç
    —Å –æ–∂–∏–¥–∞–µ–º—ã–º —Å–ø–∏—Å–∫–æ–º –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –Ω–æ–¥ —Å–∏—Å—Ç–µ–º—ã.

    Attributes:
        node: ROS2 –Ω–æ–¥–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        expected_nodes: –°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–µ–º—ã—Ö –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –Ω–æ–¥
        node_status: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –Ω–æ–¥
    """

    def __init__(self, node: Node, expected_nodes: List[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞.

        Args:
            node: ROS2 –Ω–æ–¥–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            expected_nodes: –°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–µ–º—ã—Ö –Ω–æ–¥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.node = node
        self.expected_nodes = expected_nodes or [
            "/audio_node",
            "/stt_node",
            "/tts_node",
            "/dialogue_node",
            "/reflection_node",
            "/context_aggregator",
            "/oak_d_node",
            "/lslidar_node",
            "/rtabmap",
        ]
        self.node_status: Dict[str, Dict] = {}

        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥)
        self.check_timer = self.node.create_timer(5.0, self.check_nodes)

        self.node.get_logger().info(f"üì° Node Monitor: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º {len(self.expected_nodes)} –Ω–æ–¥")

    def check_nodes(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –æ–∂–∏–¥–∞–µ–º—ã—Ö –Ω–æ–¥."""
        try:
            result = subprocess.run(["ros2", "node", "list"], capture_output=True, text=True, timeout=2.0)

            if result.returncode != 0:
                self.node.get_logger().warn(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ ros2 node list: {result.stderr}")
                return

            active_nodes = result.stdout.strip().split("\n") if result.stdout.strip() else []

            for expected_node in self.expected_nodes:
                if expected_node in active_nodes:
                    # –ù–æ–¥–∞ –∞–∫—Ç–∏–≤–Ω–∞
                    prev_status = self.node_status.get(expected_node, {}).get("status")
                    if prev_status != "active":
                        self.node.get_logger().info(f"‚úÖ –ù–æ–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {expected_node}")

                    self.node_status[expected_node] = {"status": "active", "last_seen": time.time()}
                else:
                    # –ù–æ–¥–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                    if expected_node not in self.node_status:
                        # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –Ω–æ–¥–∞ missing
                        self.node_status[expected_node] = {"status": "missing", "last_seen": None}
                        self.node.get_logger().warn(f"‚ö†Ô∏è –ù–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {expected_node}")
                    elif self.node_status[expected_node]["status"] == "active":
                        # –ù–æ–¥–∞ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞, —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–ø–∞–ª–∞
                        self.node_status[expected_node]["status"] = "failed"
                        self.node.get_logger().error(f"‚ùå –ù–æ–¥–∞ —É–ø–∞–ª–∞: {expected_node}")

        except subprocess.TimeoutExpired:
            self.node.get_logger().warn("‚ö†Ô∏è Timeout –ø—Ä–∏ –≤—ã–∑–æ–≤–µ ros2 node list")
        except Exception as e:
            self.node.get_logger().error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–¥: {e}")

    def get_active_nodes(self) -> List[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–¥.

        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–¥
        """
        return [node for node, status in self.node_status.items() if status["status"] == "active"]

    def get_failed_nodes(self) -> List[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É–ø–∞–≤—à–∏—Ö –Ω–æ–¥.

        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —É–ø–∞–≤—à–∏—Ö –Ω–æ–¥
        """
        return [node for node, status in self.node_status.items() if status["status"] == "failed"]

    def get_missing_nodes(self) -> List[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –Ω–æ–¥.

        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –Ω–æ–¥
        """
        return [node for node, status in self.node_status.items() if status["status"] == "missing"]

    def get_status_summary(self) -> Dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–æ–¥.

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        active = self.get_active_nodes()
        failed = self.get_failed_nodes()
        missing = self.get_missing_nodes()

        return {
            "total": len(self.expected_nodes),
            "active": len(active),
            "failed": len(failed),
            "missing": len(missing),
            "active_list": active,
            "failed_list": failed,
            "missing_list": missing,
        }

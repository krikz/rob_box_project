#!/usr/bin/env python3
"""
internet_monitor.py - Internet Connectivity Monitor

–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ —á–µ—Ä–µ–∑ ping –∫ –Ω–∞–¥—ë–∂–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–∞–º.
"""

import subprocess
import time
from typing import Dict

from rclpy.node import Node


class InternetConnectivityMonitor:
    """
    –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.

    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ ping –∫
    –Ω–∞–¥—ë–∂–Ω—ã–º DNS —Å–µ—Ä–≤–µ—Ä–∞–º (Google, Cloudflare).

    Attributes:
        node: ROS2 –Ω–æ–¥–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        is_online: –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        last_check_time: –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        test_hosts: –°–ø–∏—Å–æ–∫ —Ö–æ—Å—Ç–æ–≤ –¥–ª—è ping-—Ç–µ—Å—Ç–∞
    """

    def __init__(self, node: Node, check_interval: float = 30.0):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞.

        Args:
            node: ROS2 –Ω–æ–¥–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            check_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self.node = node
        self.is_online = None
        self.last_check_time = None
        self.check_interval = check_interval

        # –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.test_hosts = [
            "8.8.8.8",  # Google DNS
            "1.1.1.1",  # Cloudflare DNS
        ]

        # –¢–∞–π–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.check_timer = self.node.create_timer(self.check_interval, self.check_connectivity)

        # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–∑—É
        self.check_connectivity()

        self.node.get_logger().info(f"üåê Internet Monitor: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {check_interval}s")

    def check_connectivity(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.

        Returns:
            True –µ—Å–ª–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, False –∏–Ω–∞—á–µ
        """
        for host in self.test_hosts:
            try:
                result = subprocess.run(
                    ["ping", "-c", "1", "-W", "2", host], capture_output=True, timeout=2.5
                )

                if result.returncode == 0:
                    # –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
                    if self.is_online is False:
                        self.node.get_logger().info("‚úÖ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

                    self.is_online = True
                    self.last_check_time = time.time()
                    return True

            except (subprocess.TimeoutExpired, Exception):
                continue

        # –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        if self.is_online is True or self.is_online is None:
            self.node.get_logger().warn("‚ö†Ô∏è –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

        self.is_online = False
        self.last_check_time = time.time()
        return False

    def get_status(self) -> Dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        """
        return {
            "is_online": self.is_online if self.is_online is not None else False,
            "last_check": self.last_check_time,
            "check_interval": self.check_interval,
        }

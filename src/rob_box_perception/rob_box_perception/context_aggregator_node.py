#!/usr/bin/env python3
"""
context_aggregator_node.py - Perception Context Aggregator (MPC lite)

–õ–µ–≥–∫–æ–≤–µ—Å–Ω—ã–π –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è.
–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ ‚Üí –ø—É–±–ª–∏–∫—É–µ—Ç unified —Å–æ–±—ã—Ç–∏—è.

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
  [Sensors] ‚Üí Context Aggregator ‚Üí [PerceptionEvent] ‚Üí Reflection Agent
  
–ù–ï –¥—É–º–∞–µ—Ç, –ù–ï –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–π - —Ç–æ–ª—å–∫–æ —Å–±–æ—Ä –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è.

–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞:
- /perception/vision_context (vision processing)
- /rtabmap/localization_pose (–ø–æ–∑–∏—Ü–∏—è)
- /odom (–æ–¥–æ–º–µ—Ç—Ä–∏—è)
- /device/snapshot (ESP32 sensors)
- /apriltag/detections (AprilTags)
- /rosout (system logs)
- /voice/stt/result (–≤—Ö–æ–¥—è—â–∞—è —Ä–µ—á—å)

–ü—É–±–ª–∏–∫—É–µ—Ç:
- /perception/context_update (PerceptionEvent) - –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
- /perception/user_speech (String) - —Ç—Ä–∞–Ω–∑–∏—Ç STT –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
"""

import json
import time
import os
from typing import Dict, List, Optional

import rclpy
from rclpy.node import Node
from std_msgs.msg import String
from geometry_msgs.msg import PoseStamped, Twist
from nav_msgs.msg import Odometry
from rcl_interfaces.msg import Log

# DeepSeek API –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
try:
    from openai import OpenAI
    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False

# Custom messages
try:
    from rob_box_perception.msg import PerceptionEvent
except ImportError:
    PerceptionEvent = None  # Fallback if not built yet


class ContextAggregatorNode(Node):
    """–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è (MPC lite)"""
    
    def __init__(self):
        super().__init__('context_aggregator')
        
        # ============ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ============
        self.declare_parameter('publish_rate', 2.0)  # Hz - —á–∞—Å—Ç–æ—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π
        self.declare_parameter('memory_window', 60)  # —Å–µ–∫—É–Ω–¥—ã
        self.declare_parameter('summarization_threshold', 50)  # —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        self.declare_parameter('enable_summarization', True)  # –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é
        
        self.publish_rate = self.get_parameter('publish_rate').value
        self.memory_window = self.get_parameter('memory_window').value
        self.summarization_threshold = self.get_parameter('summarization_threshold').value
        self.enable_summarization = self.get_parameter('enable_summarization').value
        
        # ============ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–∫—ç—à) ============
        self.current_vision: Optional[Dict] = None
        self.current_pose: Optional[PoseStamped] = None
        self.current_odom: Optional[Odometry] = None
        self.current_sensors: Dict = {}
        self.last_apriltags: List[int] = []
        
        # –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
        self.recent_errors: List[Dict] = []
        self.recent_warnings: List[Dict] = []
        
        # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞–º—è—Ç—å (–¥–ª—è memory_summary) - –†–ê–ó–î–ï–õ–ï–ù–û –ü–û –¢–ò–ü–ê–ú
        self.recent_events: List[Dict] = []  # –í—Å–µ —Å–æ–±—ã—Ç–∏—è (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        self.speech_events: List[Dict] = []  # –†–µ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.vision_events: List[Dict] = []  # –í–∏–∑—É–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        self.system_events: List[Dict] = []  # –û—à–∏–±–∫–∏, battery, warnings
        
        # –°—É–º–º–∞—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ (–æ—Ç DeepSeek) - –†–ê–ó–î–ï–õ–ï–ù–û –ü–û –¢–ò–ü–ê–ú
        self.speech_summaries: List[Dict] = []  # {'time', 'summary', 'event_count'}
        self.vision_summaries: List[Dict] = []
        self.system_summaries: List[Dict] = []
        self.last_summarization_time = time.time()
        
        # ============ –ü–æ–¥–ø–∏—Å–∫–∏ ============
        
        # Vision
        self.vision_sub = self.create_subscription(
            String,
            '/perception/vision_context',
            self.on_vision_context,
            10
        )
        
        # Pose
        self.pose_sub = self.create_subscription(
            PoseStamped,
            '/rtabmap/localization_pose',
            self.on_robot_pose,
            10
        )
        
        # Odometry
        self.odom_sub = self.create_subscription(
            Odometry,
            '/odom',
            self.on_odometry,
            10
        )
        
        # Sensors (ESP32)
        # self.sensor_hub_sub = self.create_subscription(
        #     DeviceSnapshot,
        #     '/device/snapshot',
        #     self.on_device_snapshot,
        #     10
        # )
        
        # AprilTags
        # self.apriltag_sub = self.create_subscription(
        #     AprilTagDetectionArray,
        #     '/apriltag/detections',
        #     self.on_apriltags,
        #     10
        # )
        
        # System logs (/rosout)
        self.rosout_sub = self.create_subscription(
            Log,
            '/rosout',
            self.on_rosout,
            10
        )
        
        # STT (–≤—Ö–æ–¥—è—â–∞—è —Ä–µ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        self.stt_sub = self.create_subscription(
            String,
            '/voice/stt/result',
            self.on_user_speech,
            10
        )
        
        # ============ –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ ============
        
        if PerceptionEvent:
            self.event_pub = self.create_publisher(
                PerceptionEvent,
                '/perception/context_update',
                10
            )
        else:
            self.get_logger().warn('‚ö†Ô∏è  PerceptionEvent message –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç.')
            self.event_pub = None
        
        # –¢—Ä–∞–Ω–∑–∏—Ç STT –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
        self.speech_pub = self.create_publisher(
            String,
            '/perception/user_speech',
            10
        )
        
        # ============ DeepSeek API –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ ============
        self.deepseek_client = None
        self.summarization_prompt = None
        if self.enable_summarization:
            deepseek_api_key = os.getenv('DEEPSEEK_API_KEY')
            if deepseek_api_key and OPENAI_AVAILABLE:
                try:
                    self.deepseek_client = OpenAI(
                        api_key=deepseek_api_key,
                        base_url="https://api.deepseek.com"
                    )
                    self.summarization_prompt = self._load_summarization_prompt()
                    self.get_logger().info('‚úÖ DeepSeek API –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
                except Exception as e:
                    self.get_logger().error(f'‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DeepSeek: {e}')
            else:
                self.get_logger().warn('‚ö†Ô∏è  DeepSeek API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞')
        
        # ============ –¢–∞–π–º–µ—Ä –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π ============
        timer_period = 1.0 / self.publish_rate
        self.publish_timer = self.create_timer(timer_period, self.publish_event)
        
        self.get_logger().info('üìä Context Aggregator –∑–∞–ø—É—â–µ–Ω')
        self.get_logger().info(f'   –ß–∞—Å—Ç–æ—Ç–∞ —Å–æ–±—ã—Ç–∏–π: {self.publish_rate} Hz')
        self.get_logger().info(f'   –û–∫–Ω–æ –ø–∞–º—è—Ç–∏: {self.memory_window} —Å–µ–∫')
    
    def _load_summarization_prompt(self) -> str:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        from ament_index_python.packages import get_package_share_directory
        try:
            pkg_share = get_package_share_directory('rob_box_perception')
            prompt_path = os.path.join(pkg_share, 'prompts', 'context_summarization_prompt.txt')
            
            with open(prompt_path, 'r', encoding='utf-8') as f:
                prompt = f.read()
            
            self.get_logger().info(f'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ–º–ø—Ç —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ ({len(prompt)} –±–∞–π—Ç)')
            return prompt
        except Exception as e:
            self.get_logger().error(f'‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–∞: {e}')
            # Fallback –ø—Ä–æ–º–ø—Ç
            return """–°—É–º–º–∞—Ä–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è —Ä–æ–±–æ—Ç–∞ –†–û–ë–ë–û–ö–°.
–í—ã–¥–µ–ª–∏ –ö–õ–Æ–ß–ï–í–£–Æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: —á—Ç–æ –≥–æ–≤–æ—Ä–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã.
–ë—É–¥—å –ö–†–ê–¢–ö–ò–ú (3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π).

–°–æ–±—ã—Ç–∏—è:
{events_list}

–°—É–º–º–∞—Ä–Ω–æ–µ —Ä–µ–∑—é–º–µ:"""
    
    # ============================================================
    # Callbacks - –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    # ============================================================
    
    def on_vision_context(self, msg: String):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ vision context"""
        try:
            self.current_vision = json.loads(msg.data)
            self.get_logger().debug(f'üëÅÔ∏è  Vision: {self.current_vision.get("description", "N/A")}')
        except json.JSONDecodeError:
            self.get_logger().error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ vision_context')
    
    def on_robot_pose(self, msg: PoseStamped):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        self.current_pose = msg
        self.get_logger().debug(f'üìç Pose: ({msg.pose.position.x:.2f}, {msg.pose.position.y:.2f})')
    
    def on_odometry(self, msg: Odometry):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–æ–º–µ—Ç—Ä–∏–∏"""
        self.current_odom = msg
    
    def on_device_snapshot(self, msg):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–Ω—Å–æ—Ä–æ–≤ ESP32"""
        self.current_sensors = {
            'battery': msg.battery_voltage,
            'temperature': msg.temperature
        }
    
    def on_apriltags(self, msg):
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã AprilTags"""
        self.last_apriltags = [det.id for det in msg.detections]
        self.add_to_memory('apriltag', f'–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –º–∞—Ä–∫–µ—Ä—ã: {self.last_apriltags}')
    
    def on_rosout(self, msg: Log):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤"""
        # –°–æ–±–∏—Ä–∞–µ–º ERROR –∏ WARN
        if msg.level >= 40:  # ERROR –∏–ª–∏ FATAL
            error_info = {
                'time': time.time(),
                'node': msg.name,
                'message': msg.msg
            }
            self.recent_errors.append(error_info)
            if len(self.recent_errors) > 10:
                self.recent_errors.pop(0)
            self.get_logger().debug(f'‚ö†Ô∏è  [{msg.name}] ERROR: {msg.msg[:50]}...')
        
        elif msg.level == 30:  # WARN
            warn_info = {
                'time': time.time(),
                'node': msg.name,
                'message': msg.msg
            }
            self.recent_warnings.append(warn_info)
            if len(self.recent_warnings) > 5:
                self.recent_warnings.pop(0)
    
    def on_user_speech(self, msg: String):
        """–ü–æ–ª—É—á–µ–Ω–∞ —Ä–µ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (STT)"""
        text = msg.data.strip()
        if text:
            self.get_logger().info(f'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "{text}"')
            self.add_to_memory('user_speech', text, important=True)
            
            # –¢—Ä–∞–Ω–∑–∏—Ç –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
            self.speech_pub.publish(msg)
    
    # ============================================================
    # –ü–∞–º—è—Ç—å —Å–æ–±—ã—Ç–∏–π
    # ============================================================
    
    def add_to_memory(self, event_type: str, content: str, important: bool = False):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –ø–∞–º—è—Ç—å (—Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ —Ç–∏–ø–∞–º)"""
        event = {
            'time': time.time(),
            'type': event_type,
            'content': content,
            'important': important
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â—É—é –ø–∞–º—è—Ç—å
        self.recent_events.append(event)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏
        if event_type == 'user_speech':
            self.speech_events.append(event)
        elif event_type in ['vision', 'apriltag']:
            self.vision_events.append(event)
        elif event_type in ['error', 'warning', 'battery', 'system']:
            self.system_events.append(event)
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π
        cutoff = time.time() - self.memory_window
        self.recent_events = [e for e in self.recent_events if e['time'] > cutoff]
        self.speech_events = [e for e in self.speech_events if e['time'] > cutoff]
        self.vision_events = [e for e in self.vision_events if e['time'] > cutoff]
        self.system_events = [e for e in self.system_events if e['time'] > cutoff]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–∞ –ª–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
        self.check_and_summarize()
    
    def get_memory_summary(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –ø–∞–º—è—Ç–∏"""
        if not self.recent_events:
            return "–ù–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç"
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–±—ã—Ç–∏–π
        recent = self.recent_events[-5:]
        lines = []
        for event in recent:
            age = time.time() - event['time']
            emoji = "‚ùó" if event.get('important') else "‚Ä¢"
            lines.append(f"{emoji} [{age:.0f}s] {event['type']}: {event['content']}")
        
        return '\n'.join(lines)
    
    # ============================================================
    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
    # ============================================================
    
    def publish_event(self):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è PerceptionEvent —Å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        if not self.event_pub:
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
        health_status, health_issues = self.check_system_health()
        
        # –°–æ–∑–¥–∞—ë–º —Å–æ–±—ã—Ç–∏–µ
        event = PerceptionEvent()
        event.stamp = self.get_clock().now().to_msg()
        
        # Vision
        if self.current_vision:
            event.vision_context = json.dumps(self.current_vision, ensure_ascii=False)
        else:
            event.vision_context = ""
        
        # Pose
        if self.current_pose:
            event.pose = self.current_pose.pose
        
        # Velocity & Moving
        if self.current_odom:
            event.velocity = self.current_odom.twist.twist
            vx = abs(self.current_odom.twist.twist.linear.x)
            wz = abs(self.current_odom.twist.twist.angular.z)
            event.is_moving = vx > 0.01 or wz > 0.01
        else:
            event.is_moving = False
        
        # Sensors
        event.battery_voltage = self.current_sensors.get('battery', 0.0)
        event.temperature = self.current_sensors.get('temperature', 0.0)
        
        # AprilTags
        event.apriltag_ids = self.last_apriltags
        
        # System health
        event.system_health_status = health_status
        event.health_issues = health_issues
        
        # Memory
        event.memory_summary = self.get_memory_summary()
        
        # Summaries (—Å—É–º–º–∞—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –ø–æ —Ç–∏–ø–∞–º)
        event.speech_summaries = json.dumps(self.speech_summaries, ensure_ascii=False)
        event.vision_summaries = json.dumps(self.vision_summaries, ensure_ascii=False)
        event.system_summaries = json.dumps(self.system_summaries, ensure_ascii=False)
        
        # –ü—É–±–ª–∏–∫—É–µ–º
        self.event_pub.publish(event)
        self.get_logger().debug(f'üì§ Event: health={health_status}, moving={event.is_moving}')
    
    def check_system_health(self) -> tuple[str, List[str]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫
        recent_error_count = len([e for e in self.recent_errors if time.time() - e['time'] < 30])
        if recent_error_count >= 5:
            issues.append(f'–ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫: {recent_error_count} –∑–∞ 30 —Å–µ–∫')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞—Ç–∞—Ä–µ–∏
        battery = self.current_sensors.get('battery', 100.0)
        if battery < 11.0:
            issues.append(f'–ù–∏–∑–∫–∞—è –±–∞—Ç–∞—Ä–µ—è: {battery:.1f}V')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if len(issues) == 0:
            status = "healthy"
        elif len(issues) <= 2:
            status = "degraded"
        else:
            status = "critical"
        
        return status, issues
    
    # ============================================================
    # –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ DeepSeek
    # ============================================================
    
    def check_and_summarize(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω—É–∂–Ω–∞ –ª–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–ü–û –¢–ò–ü–ê–ú)"""
        if not self.enable_summarization or not self.deepseek_client:
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏–π
        if len(self.speech_events) >= self.summarization_threshold:
            self.get_logger().info(f'üîÑ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è SPEECH: {len(self.speech_events)} —Å–æ–±—ã—Ç–∏–π')
            self._summarize_events('speech', self.speech_events, self.speech_summaries)
        
        if len(self.vision_events) >= self.summarization_threshold:
            self.get_logger().info(f'üîÑ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è VISION: {len(self.vision_events)} —Å–æ–±—ã—Ç–∏–π')
            self._summarize_events('vision', self.vision_events, self.vision_summaries)
        
        if len(self.system_events) >= self.summarization_threshold:
            self.get_logger().info(f'üîÑ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è SYSTEM: {len(self.system_events)} —Å–æ–±—ã—Ç–∏–π')
            self._summarize_events('system', self.system_events, self.system_summaries)
    
    def _summarize_events(self, event_category: str, events_list: List[Dict], summaries_storage: List[Dict]):
        """–°—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —á–µ—Ä–µ–∑ DeepSeek"""
        if not self.deepseek_client or len(events_list) == 0:
            return
        
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
            events_text = []
            for event in events_list:
                event_time = time.strftime('%H:%M:%S', time.localtime(event['time']))
                events_text.append(f"[{event_time}] {event['type']}: {event['content']}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            prompt = self.summarization_prompt.format(
                memory_window=self.memory_window,
                events_list='\n'.join(events_text)
            )
            
            # –í—ã–∑–æ–≤ DeepSeek
            response = self.deepseek_client.chat.completions.create(
                model="deepseek-chat",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.3,
                max_tokens=300
            )
            
            summary = response.choices[0].message.content.strip()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º summary
            summary_data = {
                'time': time.time(),
                'category': event_category,
                'summary': summary,
                'event_count': len(events_list)
            }
            summaries_storage.append(summary_data)
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 summaries
            if len(summaries_storage) > 10:
                summaries_storage.pop(0)
            
            self.get_logger().info(f'‚úÖ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è {event_category.upper()} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(summary)} —Å–∏–º–≤–æ–ª–æ–≤')
            self.get_logger().debug(f'  Summary: {summary[:100]}...')
            
            # –û—á–∏—â–∞–µ–º —Å—É–º–º–∞—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
            events_list.clear()
            events_list.extend(events_list[-10:] if len(events_list) > 10 else events_list)
            
            self.last_summarization_time = time.time()
            
        except Exception as e:
            self.get_logger().error(f'‚ùå –û—à–∏–±–∫–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ {event_category}: {e}')
    
    def get_full_context(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: summaries + recent_events (–ü–û –¢–ò–ü–ê–ú)"""
        context_parts = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º SPEECH summaries
        if self.speech_summaries:
            context_parts.append("=== –ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–û–í (—Å—É–º–º–∞—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è) ===")
            for summary_data in self.speech_summaries:
                summary_time = time.strftime('%H:%M:%S', time.localtime(summary_data['time']))
                context_parts.append(f"[{summary_time}] ({summary_data['event_count']} —Ä–µ–ø–ª–∏–∫): {summary_data['summary']}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º VISION summaries
        if self.vision_summaries:
            context_parts.append("\n=== –ò–°–¢–û–†–ò–Ø –í–ò–ó–£–ê–õ–¨–ù–´–• –ù–ê–ë–õ–Æ–î–ï–ù–ò–ô (—Å—É–º–º–∞—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è) ===")
            for summary_data in self.vision_summaries:
                summary_time = time.strftime('%H:%M:%S', time.localtime(summary_data['time']))
                context_parts.append(f"[{summary_time}] ({summary_data['event_count']} –Ω–∞–±–ª—é–¥–µ–Ω–∏–π): {summary_data['summary']}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º SYSTEM summaries
        if self.system_summaries:
            context_parts.append("\n=== –ò–°–¢–û–†–ò–Ø –°–ò–°–¢–ï–ú–ù–´–• –°–û–ë–´–¢–ò–ô (—Å—É–º–º–∞—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è) ===")
            for summary_data in self.system_summaries:
                summary_time = time.strftime('%H:%M:%S', time.localtime(summary_data['time']))
                context_parts.append(f"[{summary_time}] ({summary_data['event_count']} —Å–æ–±—ã—Ç–∏–π): {summary_data['summary']}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        if self.recent_events:
            context_parts.append("\n=== –ù–ï–î–ê–í–ù–ò–ï –°–û–ë–´–¢–ò–Ø (–ø–æ—Å–ª–µ–¥–Ω–∏–µ ~10) ===")
            context_parts.append(self.get_memory_summary())
        
        return '\n'.join(context_parts)


def main(args=None):
    rclpy.init(args=args)
    node = ContextAggregatorNode()
    
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()


if __name__ == '__main__':
    main()

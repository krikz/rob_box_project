#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –±–µ–ª–æ–≥–æ —à—É–º–∞ ReSpeaker.

–ò–∑–º–µ—Ä—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å —à—É–º–∞ –¥–æ –∏ –ø–æ—Å–ª–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞,
—á—Ç–æ–±—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É –±–µ–ª–æ–≥–æ —à—É–º–∞.

Usage:
    python3 diagnose_white_noise.py

Requirements:
    - ReSpeaker –ø–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    - sounddevice, numpy
"""

import sys
import time
import numpy as np
import sounddevice as sd


def find_respeaker_device():
    """–ù–∞–π—Ç–∏ ReSpeaker –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
    devices = sd.query_devices()

    for idx, device in enumerate(devices):
        if "ReSpeaker" in device["name"] or "ArrayUAC10" in device["name"]:
            print(f"‚úì –ù–∞–π–¥–µ–Ω ReSpeaker: device {idx} - {device['name']}")
            return idx

    print("‚ùå ReSpeaker –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
    print(sd.query_devices())
    return None


def measure_noise_level(device_idx, duration=2.0, sample_rate=16000):
    """
    –ò–∑–º–µ—Ä–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —à—É–º–∞ (RMS).

    Args:
        device_idx: Index –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        sample_rate: –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏

    Returns:
        Tuple (rms, db): RMS —É—Ä–æ–≤–µ–Ω—å –∏ —É—Ä–æ–≤–µ–Ω—å –≤ dB
    """
    print(f"üìä –ó–∞–ø–∏—Å—å {duration}s –∞—É–¥–∏–æ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —à—É–º–∞...")

    # –ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ
    audio = sd.rec(int(duration * sample_rate), samplerate=sample_rate, channels=1, dtype=np.float32, device=device_idx)
    sd.wait()

    # –†–∞—Å—á–µ—Ç RMS (Root Mean Square)
    rms = np.sqrt(np.mean(audio**2))

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ dB (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è)
    # Reference: 1.0 = full scale
    db = 20 * np.log10(rms + 1e-10)  # +epsilon –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è log(0)

    return rms, db


def play_test_tone(device_idx, duration=0.5, frequency=440, sample_rate=16000):
    """
    –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–Ω (–∫–∞–∫ —Ç—Ä–∏–≥–≥–µ—Ä –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è).

    Args:
        device_idx: Index –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–æ–Ω–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        frequency: –ß–∞—Å—Ç–æ—Ç–∞ —Ç–æ–Ω–∞ –≤ Hz (440 = –Ω–æ—Ç–∞ A)
        sample_rate: –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
    """
    print(f"üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–Ω–∞ {frequency}Hz ({duration}s)...")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—É—Å–æ–∏–¥—ã
    t = np.linspace(0, duration, int(sample_rate * duration), False)
    tone = np.sin(frequency * 2 * np.pi * t)

    # –°—Ç–µ—Ä–µ–æ (ReSpeaker —Ç—Ä–µ–±—É–µ—Ç 2 –∫–∞–Ω–∞–ª–∞)
    tone_stereo = np.column_stack((tone, tone)).astype(np.float32)

    # –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
    sd.play(tone_stereo, sample_rate, device=device_idx)
    sd.wait()

    print("‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("=" * 60)
    print("üîä ReSpeaker White Noise Diagnostic Tool")
    print("=" * 60)
    print()

    # 1. –ù–∞–π—Ç–∏ ReSpeaker
    device_idx = find_respeaker_device()
    if device_idx is None:
        sys.exit(1)

    print()

    # 2. –ò–∑–º–µ—Ä–∏—Ç—å –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —à—É–º–∞ (–¥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è)
    print("üìä BASELINE: –ò–∑–º–µ—Ä–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —à—É–º–∞ –î–û –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è...")
    baseline_rms, baseline_db = measure_noise_level(device_idx, duration=2.0)
    print(f"   RMS: {baseline_rms:.6f}")
    print(f"   dB:  {baseline_db:.2f} dBFS")
    print()

    # 3. –ü–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ
    time.sleep(0.5)

    # 4. –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–≤—É–∫ (—Ç—Ä–∏–≥–≥–µ—Ä –±–µ–ª–æ–≥–æ —à—É–º–∞)
    print("üéµ TRIGGER: –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–Ω–∞...")
    play_test_tone(device_idx, duration=0.5)
    print()

    # 5. –ü–æ–¥–æ–∂–¥–∞—Ç—å —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏)
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 0.5s –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏...")
    time.sleep(0.5)
    print()

    # 6. –ò–∑–º–µ—Ä–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —à—É–º–∞ –ø–æ—Å–ª–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    print("üìä AFTER: –ò–∑–º–µ—Ä–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —à—É–º–∞ –ü–û–°–õ–ï –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è...")
    after_rms, after_db = measure_noise_level(device_idx, duration=2.0)
    print(f"   RMS: {after_rms:.6f}")
    print(f"   dB:  {after_db:.2f} dBFS")
    print()

    # 7. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("=" * 60)
    print("üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê")
    print("=" * 60)

    rms_diff = after_rms - baseline_rms
    rms_increase_pct = (rms_diff / baseline_rms) * 100 if baseline_rms > 0 else 0
    db_diff = after_db - baseline_db

    print(f"Baseline noise:     {baseline_rms:.6f} RMS ({baseline_db:.2f} dBFS)")
    print(f"After playback:     {after_rms:.6f} RMS ({after_db:.2f} dBFS)")
    print(f"Difference:         {rms_diff:+.6f} RMS ({db_diff:+.2f} dB)")
    print(f"Increase:           {rms_increase_pct:+.1f}%")
    print()

    # 8. –í–µ—Ä–¥–∏–∫—Ç
    if rms_increase_pct > 50:
        print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç —à—É–º–∞ –ø–æ—Å–ª–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è!")
        print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è cleanup.")
    elif rms_increase_pct > 20:
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç —à—É–º–∞ –ø–æ—Å–ª–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è")
        print("   –í–æ–∑–º–æ–∂–Ω–æ, cleanup —É–ª—É—á—à–∏—Ç —Å–∏—Ç—É–∞—Ü–∏—é.")
    else:
        print("‚úÖ OK: –£—Ä–æ–≤–µ–Ω—å —à—É–º–∞ –≤ –Ω–æ—Ä–º–µ")
        print("   –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —à—É–º–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")

    print()
    print("=" * 60)
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("=" * 60)
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    print("2. –°—Ä–∞–≤–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ –∏ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è noise cleanup")
    print("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—à–µ–Ω–∏–π")
    print()


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()
        sys.exit(1)

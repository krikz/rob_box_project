#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö STT —Ä–µ—à–µ–Ω–∏–π –¥–ª—è ROBBOX

–ü—Ä–æ–≤–µ—Ä—è–µ–º:
1. Vosk (offline, –±—ã—Å—Ç—Ä—ã–π, —Ä—É—Å—Å–∫–∏–π)
2. Whisper (offline, —Ç–æ—á–Ω—ã–π, –º–µ–¥–ª–µ–Ω–Ω—ã–π)
3. Yandex SpeechKit (online, —Ç–æ—á–Ω—ã–π, —Ç—Ä–µ–±—É–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç)

–ò—Å–ø–æ–ª—å–∑—É–µ–º ReSpeaker Mic Array v2.0
"""

import pyaudio
import wave
import time
import os
from typing import Optional, Tuple
import threading
import queue


class AudioRecorder:
    """–ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ —Å ReSpeaker"""
    
    def __init__(self, device_name: str = "ReSpeaker 4 Mic Array"):
        self.device_name = device_name
        self.sample_rate = 16000
        self.channels = 1
        self.chunk = 1024
        self.format = pyaudio.paInt16
        
        self.pyaudio = pyaudio.PyAudio()
        self.device_index = self._find_device()
        
        if self.device_index is None:
            print(f"‚ùå {device_name} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
            self._list_devices()
            raise RuntimeError("ReSpeaker not found")
        
        print(f"‚úÖ {device_name} –Ω–∞–π–¥–µ–Ω (index: {self.device_index})")
    
    def _find_device(self) -> Optional[int]:
        """–ù–∞–π—Ç–∏ ReSpeaker —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
        for i in range(self.pyaudio.get_device_count()):
            info = self.pyaudio.get_device_info_by_index(i)
            if self.device_name.lower() in info['name'].lower():
                return i
        return None
    
    def _list_devices(self):
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        for i in range(self.pyaudio.get_device_count()):
            info = self.pyaudio.get_device_info_by_index(i)
            if info['maxInputChannels'] > 0:
                print(f"  [{i}] {info['name']} ({info['maxInputChannels']} channels)")
    
    def record(self, duration: int = 5) -> bytes:
        """–ó–∞–ø–∏—Å–∞—Ç—å –∞—É–¥–∏–æ"""
        print(f"üé§ –ó–∞–ø–∏—Å—å {duration} —Å–µ–∫—É–Ω–¥...")
        
        stream = self.pyaudio.open(
            format=self.format,
            channels=self.channels,
            rate=self.sample_rate,
            input=True,
            input_device_index=self.device_index,
            frames_per_buffer=self.chunk
        )
        
        frames = []
        for i in range(0, int(self.sample_rate / self.chunk * duration)):
            data = stream.read(self.chunk)
            frames.append(data)
        
        stream.stop_stream()
        stream.close()
        
        print("‚úÖ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return b''.join(frames)
    
    def save_wav(self, audio_data: bytes, filename: str):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å WAV —Ñ–∞–π–ª"""
        with wave.open(filename, 'wb') as wf:
            wf.setnchannels(self.channels)
            wf.setsampwidth(self.pyaudio.get_sample_size(self.format))
            wf.setframerate(self.sample_rate)
            wf.writeframes(audio_data)
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
    
    def cleanup(self):
        """–ó–∞–∫—Ä—ã—Ç—å PyAudio"""
        self.pyaudio.terminate()


class VoskSTT:
    """Vosk Speech-to-Text (offline)"""
    
    def __init__(self, model_path: str = "/models/vosk-model-small-ru-0.22"):
        print("\nüîÑ –ó–∞–≥—Ä—É–∑–∫–∞ Vosk STT...")
        try:
            from vosk import Model, KaldiRecognizer
            import json
            
            self.Model = Model
            self.KaldiRecognizer = KaldiRecognizer
            self.json = json
            
            if not os.path.exists(model_path):
                print(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
                print("–°–∫–∞—á–∞–π—Ç–µ –º–æ–¥–µ–ª—å:")
                print("  wget https://alphacephei.com/vosk/models/vosk-model-small-ru-0.22.zip")
                print("  unzip vosk-model-small-ru-0.22.zip -d /models/")
                raise FileNotFoundError(model_path)
            
            self.model = Model(model_path)
            print("‚úÖ Vosk –∑–∞–≥—Ä—É–∂–µ–Ω")
            
        except ImportError:
            print("‚ùå Vosk –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install vosk")
            raise
    
    def recognize(self, audio_data: bytes, sample_rate: int = 16000) -> str:
        """–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å"""
        print("üîç Vosk —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç...")
        start = time.time()
        
        rec = self.KaldiRecognizer(self.model, sample_rate)
        rec.AcceptWaveform(audio_data)
        result = self.json.loads(rec.FinalResult())
        
        elapsed = time.time() - start
        text = result.get('text', '')
        
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è: {elapsed:.2f}s")
        print(f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: {text}")
        
        return text


class WhisperSTT:
    """Whisper Speech-to-Text (offline)"""
    
    def __init__(self, model_size: str = "base"):
        print(f"\nüîÑ –ó–∞–≥—Ä—É–∑–∫–∞ Whisper STT ({model_size})...")
        try:
            import whisper
            self.whisper = whisper
            
            self.model = whisper.load_model(model_size)
            print(f"‚úÖ Whisper {model_size} –∑–∞–≥—Ä—É–∂–µ–Ω")
            
        except ImportError:
            print("‚ùå Whisper –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install openai-whisper")
            raise
    
    def recognize(self, audio_file: str) -> str:
        """–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –∏–∑ WAV —Ñ–∞–π–ª–∞"""
        print("üîç Whisper —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç...")
        start = time.time()
        
        result = self.model.transcribe(audio_file, language='ru')
        
        elapsed = time.time() - start
        text = result['text'].strip()
        
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è: {elapsed:.2f}s")
        print(f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: {text}")
        
        return text


class YandexSTT:
    """Yandex SpeechKit STT (online)"""
    
    def __init__(self):
        print("\nüîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Yandex STT...")
        
        self.api_key = os.getenv('YANDEX_API_KEY')
        self.folder_id = os.getenv('YANDEX_FOLDER_ID')
        
        if not self.api_key or not self.folder_id:
            print("‚ùå Yandex API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
            print("  export YANDEX_API_KEY='...'")
            print("  export YANDEX_FOLDER_ID='...'")
            raise RuntimeError("Yandex credentials missing")
        
        print("‚úÖ Yandex STT –≥–æ—Ç–æ–≤")
    
    def recognize(self, audio_file: str) -> str:
        """–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å —á–µ—Ä–µ–∑ Yandex API"""
        print("üîç Yandex —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç...")
        import requests
        
        start = time.time()
        
        url = "https://stt.api.cloud.yandex.net/speech/v1/stt:recognize"
        
        headers = {
            "Authorization": f"Api-Key {self.api_key}"
        }
        
        params = {
            "folderId": self.folder_id,
            "lang": "ru-RU",
            "format": "lpcm",
            "sampleRateHertz": "16000"
        }
        
        with open(audio_file, 'rb') as f:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º WAV –∑–∞–≥–æ–ª–æ–≤–æ–∫ (44 –±–∞–π—Ç–∞)
            f.seek(44)
            audio_data = f.read()
        
        response = requests.post(url, headers=headers, params=params, data=audio_data)
        
        elapsed = time.time() - start
        
        if response.status_code == 200:
            result = response.json()
            text = result.get('result', '')
            print(f"‚è±Ô∏è  –í—Ä–µ–º—è: {elapsed:.2f}s (+ —Å–µ—Ç—å)")
            print(f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: {text}")
            return text
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(response.text)
            return ""


def test_stt_engine(engine_name: str, recorder: AudioRecorder):
    """–¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ STT –¥–≤–∏–∂–∫–∞"""
    print("\n" + "="*70)
    print(f"   –¢–ï–°–¢: {engine_name}")
    print("="*70)
    
    # –ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ
    print("\nüéôÔ∏è  –ì–æ–≤–æ—Ä–∏—Ç–µ –ø–æ—Å–ª–µ —Å–∏–≥–Ω–∞–ª–∞...")
    time.sleep(1)
    print("üî¥ –ó–ê–ü–ò–°–¨!")
    
    audio_data = recorder.record(duration=5)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º WAV –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    wav_file = f"/tmp/test_stt_{engine_name.lower()}.wav"
    recorder.save_wav(audio_data, wav_file)
    
    # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
    try:
        if engine_name == "Vosk":
            stt = VoskSTT()
            text = stt.recognize(audio_data)
        
        elif engine_name == "Whisper":
            stt = WhisperSTT(model_size="base")
            text = stt.recognize(wav_file)
        
        elif engine_name == "Yandex":
            stt = YandexSTT()
            text = stt.recognize(wav_file)
        
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–≤–∏–∂–æ–∫: {engine_name}")
            return
        
        print("\n" + "="*70)
        print(f"‚úÖ {engine_name} –ó–ê–í–ï–†–®–Å–ù")
        print("="*70)
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ {engine_name}: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("="*70)
    print("   üé§ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï STT –î–õ–Ø ROBBOX")
    print("="*70)
    print("\n–ü—Ä–æ–≤–µ—Ä—è–µ–º:")
    print("  1. Vosk (offline, –±—ã—Å—Ç—Ä—ã–π)")
    print("  2. Whisper (offline, —Ç–æ—á–Ω—ã–π)")
    print("  3. Yandex (online, —Ç–æ—á–Ω—ã–π)")
    print()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏
    try:
        recorder = AudioRecorder()
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return
    
    # –ú–µ–Ω—é
    while True:
        print("\n" + "="*70)
        print("–í–´–ë–ï–†–ò–¢–ï –¢–ï–°–¢:")
        print("  1 - Vosk (–±—ã—Å—Ç—Ä—ã–π, offline)")
        print("  2 - Whisper (—Ç–æ—á–Ω—ã–π, offline, –º–µ–¥–ª–µ–Ω–Ω—ã–π)")
        print("  3 - Yandex (—Ç–æ—á–Ω—ã–π, online)")
        print("  4 - –í—Å–µ –ø–æ–¥—Ä—è–¥")
        print("  0 - –í—ã—Ö–æ–¥")
        print("="*70)
        
        choice = input("\n–í—ã–±–æ—Ä: ").strip()
        
        if choice == '1':
            test_stt_engine("Vosk", recorder)
        elif choice == '2':
            test_stt_engine("Whisper", recorder)
        elif choice == '3':
            test_stt_engine("Yandex", recorder)
        elif choice == '4':
            test_stt_engine("Vosk", recorder)
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞...")
            test_stt_engine("Whisper", recorder)
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞...")
            test_stt_engine("Yandex", recorder)
        elif choice == '0':
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
    
    recorder.cleanup()
    print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")


if __name__ == '__main__':
    main()

#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Silero TTS v4

–ü–æ–¥–¥–µ—Ä–∂–∫–∞:
1. JSON —Ñ–æ—Ä–º–∞—Ç —Å –ø–æ–ª—è–º–∏: text, ssml, commands, emotion
2. SSML —Ç–µ–≥–∏ –¥–ª—è –∏–Ω—Ç–æ–Ω–∞—Ü–∏–π (<prosody>, <break>)
3. –ö–æ–º–∞–Ω–¥—ã —Ä–æ–±–æ—Ç—É (<CMD:.../>)
4. –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Å–µ–ª, –ª–∞—Ç–∏–Ω–∏—Ü—ã, markdown
"""

import re
import json
from typing import Dict, List, Tuple, Optional
from text_normalizer import TextNormalizer as BaseNormalizer


class ResponseParser:
    """–ü–∞—Ä—Å–µ—Ä JSON –æ—Ç–≤–µ—Ç–∞ –æ—Ç DeepSeek"""
    
    def __init__(self):
        self.base_normalizer = BaseNormalizer()
    
    def parse_response(self, response: str) -> Dict:
        """
        –ü–∞—Ä—Å–∏—Ç JSON –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek
        
        Returns:
            {
                'text': str,           # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è TTS
                'ssml': str,           # SSML —Ä–∞–∑–º–µ—Ç–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                'commands': List[str], # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                'emotion': str         # –≠–º–æ—Ü–∏—è (neutral/happy/sad/etc)
            }
        """
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
            data = json.loads(response.strip())
        except json.JSONDecodeError:
            # –ï—Å–ª–∏ –Ω–µ JSON - —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            return {
                'text': self.base_normalizer.normalize(response),
                'ssml': None,
                'commands': [],
                'emotion': 'neutral'
            }
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—è
        text = data.get('text', '')
        ssml = data.get('ssml', None)
        commands = data.get('commands', [])
        emotion = data.get('emotion', 'neutral')
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        normalized_text = self.base_normalizer.normalize(text)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ SSML (–µ—Å–ª–∏ –µ—Å—Ç—å)
        normalized_ssml = None
        if ssml:
            normalized_ssml = self._normalize_ssml(ssml)
        
        return {
            'text': normalized_text,
            'ssml': normalized_ssml,
            'commands': commands,
            'emotion': emotion
        }
    
    def _normalize_ssml(self, ssml: str) -> str:
        """
        –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ SSML —Ç–µ–≥–æ–≤
        
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç SSML —Ç–µ–≥–∏ (<speak>, <prosody>, <break>)
        –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        """
        # –ù–∞–π—Ç–∏ –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —É–∑–ª—ã (–≤–Ω–µ —Ç–µ–≥–æ–≤)
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥: –∑–∞–º–µ–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –º–µ–∂–¥—É >—Ç–µ–∫—Å—Ç<
        
        def normalize_text_node(match):
            text = match.group(1)
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–µ–≥ (–Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å <)
            if not text.startswith('<'):
                return '>' + self.base_normalizer.normalize(text) + '<'
            return match.group(0)
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω: –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –º–µ–∂–¥—É > –∏ <
        pattern = r'>([^<]+)<'
        normalized = re.sub(pattern, normalize_text_node, ssml)
        
        return normalized


class SSMLProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ SSML –¥–ª—è Silero TTS"""
    
    @staticmethod
    def extract_text_from_ssml(ssml: str) -> str:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –∏–∑ SSML
        (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ Silero –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç SSML)
        """
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏
        text = re.sub(r'<[^>]+>', '', ssml)
        return text.strip()
    
    @staticmethod
    def parse_ssml_for_timing(ssml: str) -> List[Tuple[str, Optional[int]]]:
        """
        –ü–∞—Ä—Å–∏—Ç SSML –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ—Ä–∞–∑ —Å –ø–∞—É–∑–∞–º–∏
        
        Returns:
            [(text1, pause_ms), (text2, pause_ms), ...]
        """
        chunks = []
        
        # –£–¥–∞–ª—è–µ–º –æ–±—ë—Ä—Ç–∫—É <speak>
        ssml = re.sub(r'<speak>|</speak>', '', ssml)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Ç–µ–≥–∞–º <break>
        parts = re.split(r'<break\s+time="(\d+)ms"\s*/>', ssml)
        
        for i, part in enumerate(parts):
            if i % 2 == 0:
                # –≠—Ç–æ —Ç–µ–∫—Å—Ç
                text = SSMLProcessor.extract_text_from_ssml(part)
                if text:
                    chunks.append((text, None))
            else:
                # –≠—Ç–æ –≤—Ä–µ–º—è –ø–∞—É–∑—ã –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
                if chunks:
                    text, _ = chunks[-1]
                    chunks[-1] = (text, int(part))
        
        return chunks
    
    @staticmethod
    def has_ssml_tags(text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ SSML —Ç–µ–≥–∏"""
        return bool(re.search(r'<(speak|break)', text))


class CommandExecutor:
    """–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥ —Ä–æ–±–æ—Ç–∞"""
    
    VALID_COMMANDS = {
        'move_forward': float,
        'move_backward': float,
        'turn_left': float,
        'turn_right': float,
        'stop': None,
        'scan_360': None,
        'led_emotion': str,
        'get_battery': None,
        'get_sensors': None,
    }
    
    @staticmethod
    def parse_command(cmd_string: str) -> Tuple[str, Optional[str]]:
        """
        –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –∫–æ–º–∞–Ω–¥—ã
        
        Args:
            cmd_string: "command:param" –∏–ª–∏ "command"
            
        Returns:
            (command, param)
        """
        if ':' in cmd_string:
            command, param = cmd_string.split(':', 1)
            return command.strip(), param.strip()
        return cmd_string.strip(), None
    
    @staticmethod
    def validate_command(command: str, param: Optional[str] = None) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä"""
        if command not in CommandExecutor.VALID_COMMANDS:
            return False
        
        expected_type = CommandExecutor.VALID_COMMANDS[command]
        
        if expected_type is None:
            # –ö–æ–º–∞–Ω–¥–∞ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            return param is None
        
        if expected_type is float:
            try:
                float(param)
                return True
            except (ValueError, TypeError):
                return False
        
        if expected_type is str:
            return param is not None
        
        return False
    
    @staticmethod
    def execute(command: str, param: Optional[str] = None):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É (–ø–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–µ—á–∞—Ç–∞–µ—Ç)
        –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç ROS2 integration
        """
        print(f"ü§ñ –ö–û–ú–ê–ù–î–ê: {command}", end='')
        if param:
            print(f" [{param}]")
        else:
            print()
        
        # TODO: ROS2 publisher –¥–ª—è –∫–æ–º–∞–Ω–¥
        # self.command_pub.publish(Command(name=command, param=param))


# –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
class RobboxVoiceHandler:
    """
    –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ ROBBOX
    
    –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª:
    1. –ü–æ–ª—É—á–∞–µ—Ç JSON –æ—Ç DeepSeek
    2. –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç
    3. –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–µ–∫—Å—Ç
    4. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è TTS
    """
    
    def __init__(self):
        self.parser = ResponseParser()
        self.ssml_processor = SSMLProcessor()
        self.executor = CommandExecutor()
    
    def process_response(self, response: str, execute_commands: bool = True) -> Dict:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç DeepSeek
        
        Args:
            response: JSON –∏–ª–∏ —Ç–µ–∫—Å—Ç –æ—Ç DeepSeek
            execute_commands: –í—ã–ø–æ–ª–Ω—è—Ç—å –ª–∏ –∫–æ–º–∞–Ω–¥—ã (False –¥–ª—è —Ç–µ—Å—Ç–æ–≤)
            
        Returns:
            {
                'phrases': List[str],      # –§—Ä–∞–∑—ã –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
                'ssml_chunks': List[tuple], # [(text, pause_ms), ...] –µ—Å–ª–∏ SSML
                'commands': List[str],      # –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
                'emotion': str              # –≠–º–æ—Ü–∏—è
            }
        """
        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        parsed = self.parser.parse_response(response)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã
        if execute_commands and parsed['commands']:
            print(f"\n{'='*60}")
            print("‚öôÔ∏è  –í–´–ü–û–õ–ù–ï–ù–ò–ï –ö–û–ú–ê–ù–î:")
            print('='*60)
            for cmd_string in parsed['commands']:
                command, param = self.executor.parse_command(cmd_string)
                if self.executor.validate_command(command, param):
                    self.executor.execute(command, param)
                else:
                    print(f"‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {cmd_string}")
        
        # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è TTS
        result = {
            'phrases': [],
            'ssml_chunks': [],
            'commands': parsed['commands'],
            'emotion': parsed['emotion']
        }
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å SSML - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if parsed['ssml'] and self.ssml_processor.has_ssml_tags(parsed['ssml']):
            result['ssml_chunks'] = self.ssml_processor.parse_ssml_for_timing(parsed['ssml'])
            # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            result['phrases'] = [chunk[0] for chunk in result['ssml_chunks']]
        else:
            # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            sentences = re.split(r'[.!?]+', parsed['text'])
            result['phrases'] = [s.strip() for s in sentences if s.strip()]
        
        return result


# ==================== –¢–ï–°–¢–´ ====================

def test_json_parsing():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON"""
    parser = ResponseParser()
    
    print("="*60)
    print("–¢–ï–°–¢ 1: –ü—Ä–æ—Å—Ç–æ–π JSON")
    print("="*60)
    
    json_response = '''
    {
        "text": "–ü—Ä–∏–≤–µ—Ç! –Ø ROBBOX —Ä–æ–±–æ—Ç. –ë–∞—Ç–∞—Ä–µ—è 78%.",
        "emotion": "happy"
    }
    '''
    
    result = parser.parse_response(json_response)
    print(f"Text: {result['text']}")
    print(f"Emotion: {result['emotion']}")
    print()


def test_ssml_parsing():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ SSML"""
    parser = ResponseParser()
    processor = SSMLProcessor()
    
    print("="*60)
    print("–¢–ï–°–¢ 2: SSML —Å –∏–Ω—Ç–æ–Ω–∞—Ü–∏—è–º–∏")
    print("="*60)
    
    json_response = '''
    {
        "text": "–î–∞–π –ø–æ–¥—É–º–∞—é. –ö–∞–∂–µ—Ç—Å—è —è –∑–Ω–∞—é —Ä–µ—à–µ–Ω–∏–µ.",
        "ssml": "<speak><prosody rate=\\"slow\\">–î–∞–π –ø–æ–¥—É–º–∞—é...</prosody><break time=\\"800ms\\"/><prosody pitch=\\"medium\\">–ö–∞–∂–µ—Ç—Å—è —è –∑–Ω–∞—é —Ä–µ—à–µ–Ω–∏–µ.</prosody></speak>",
        "emotion": "thinking"
    }
    '''
    
    result = parser.parse_response(json_response)
    print(f"Text: {result['text']}")
    print(f"SSML: {result['ssml']}")
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º SSML
    chunks = processor.parse_ssml_for_timing(result['ssml'])
    print("\nSSML chunks:")
    for text, pause in chunks:
        print(f"  - '{text}' {f'(pause {pause}ms)' if pause else ''}")
    print()


def test_commands():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥"""
    handler = RobboxVoiceHandler()
    
    print("="*60)
    print("–¢–ï–°–¢ 3: –ö–æ–º–∞–Ω–¥—ã —Ä–æ–±–æ—Ç–∞")
    print("="*60)
    
    json_response = '''
    {
        "text": "–•–æ—Ä–æ—à–æ, –µ–¥—É –≤–ø–µ—Ä—ë–¥ –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ 0.3 –º–µ—Ç—Ä–∞ –≤ —Å–µ–∫—É–Ω–¥—É.",
        "commands": ["move_forward:0.3", "led_emotion:neutral"],
        "emotion": "neutral"
    }
    '''
    
    result = handler.process_response(json_response)
    print(f"\nText –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è: {result['phrases']}")
    print(f"Emotion: {result['emotion']}")
    print()


def test_full_response():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Å–ª–æ–∂–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
    handler = RobboxVoiceHandler()
    
    print("="*60)
    print("–¢–ï–°–¢ 4: –°–ª–æ–∂–Ω—ã–π –æ—Ç–≤–µ—Ç —Å SSML + –∫–æ–º–∞–Ω–¥–∞–º–∏")
    print("="*60)
    
    json_response = '''
    {
        "text": "–£—Ä–∞! –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –Ω–∞ –±–∞–∑—É.",
        "ssml": "<speak><prosody pitch=\\"high\\" rate=\\"fast\\">–£—Ä–∞!</prosody><break time=\\"300ms\\"/>–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!<break time=\\"500ms\\"/>–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –Ω–∞ –±–∞–∑—É.</speak>",
        "commands": ["stop", "turn_left:180", "move_forward:0.5", "led_emotion:happy"],
        "emotion": "happy"
    }
    '''
    
    result = handler.process_response(json_response)
    print(f"\n–§—Ä–∞–∑—ã –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è:")
    for i, phrase in enumerate(result['phrases'], 1):
        print(f"  {i}. {phrase}")
    
    if result['ssml_chunks']:
        print(f"\nSSML chunks —Å –ø–∞—É–∑–∞–º–∏:")
        for text, pause in result['ssml_chunks']:
            print(f"  - '{text}' {f'‚Üí –ø–∞—É–∑–∞ {pause}ms' if pause else ''}")
    print()


def test_plain_text():
    """–¢–µ—Å—Ç –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–Ω–µ JSON)"""
    handler = RobboxVoiceHandler()
    
    print("="*60)
    print("–¢–ï–°–¢ 5: –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç (backward compatibility)")
    print("="*60)
    
    text_response = "–ü—Ä–∏–≤–µ—Ç! –Ø ROBBOX. WiFi –∞–∫—Ç–∏–≤–µ–Ω –Ω–∞ 192.168.1.1."
    
    result = handler.process_response(text_response)
    print(f"Text: {result['phrases']}")
    print()


if __name__ == '__main__':
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TEXT NORMALIZER V2\n")
    
    test_json_parsing()
    test_ssml_parsing()
    test_commands()
    test_full_response()
    test_plain_text()
    
    print("="*60)
    print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´")
    print("="*60)

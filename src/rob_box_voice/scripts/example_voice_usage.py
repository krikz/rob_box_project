#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞ ROBBOX

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
1. –ù–æ—Ä–º–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
2. SSML —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ pitch/rate
3. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å—é —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã
4. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ chipmunk
"""

import rclpy
from rclpy.node import Node
from std_msgs.msg import String
import json
import time


class VoiceExampleNode(Node):
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è voice system"""
    
    def __init__(self):
        super().__init__('voice_example_node')
        
        # Publisher –¥–ª—è dialogue response (–∏–º–∏—Ç–∞—Ü–∏—è dialogue_node)
        self.dialogue_pub = self.create_publisher(
            String, '/voice/dialogue/response', 10
        )
        
        # Publisher –¥–ª—è STT result (–∏–º–∏—Ç–∞—Ü–∏—è user —Ä–µ—á–∏)
        self.stt_pub = self.create_publisher(
            String, '/voice/stt/result', 10
        )
        
        self.get_logger().info('‚úÖ VoiceExampleNode –∑–∞–ø—É—â–µ–Ω')
    
    def send_speech(self, ssml: str, dialogue_id: str = "test123"):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å SSML –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏"""
        chunk_data = {
            "ssml": ssml,
            "dialogue_id": dialogue_id
        }
        
        msg = String()
        msg.data = json.dumps(chunk_data, ensure_ascii=False)
        self.dialogue_pub.publish(msg)
        
        self.get_logger().info(f'üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {ssml[:60]}...')
    
    def send_user_command(self, text: str):
        """–ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        msg = String()
        msg.data = text
        self.stt_pub.publish(msg)
        
        self.get_logger().info(f'üë§ User: {text}')
    
    def run_examples(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã"""
        
        self.get_logger().info('\n' + '='*60)
        self.get_logger().info('üé§ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ROBBOX Voice')
        self.get_logger().info('='*60)
        
        # –ü—Ä–∏–º–µ—Ä 1: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        self.get_logger().info('\nüìå –ü—Ä–∏–º–µ—Ä 1: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏')
        self.send_speech('<speak>–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ–≤–æ—Ä—é –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏.</speak>')
        time.sleep(5)
        
        # –ü—Ä–∏–º–µ—Ä 2: –ë—ã—Å—Ç—Ä–∞—è —Ä–µ—á—å —á–µ—Ä–µ–∑ SSML
        self.get_logger().info('\nüìå –ü—Ä–∏–º–µ—Ä 2: –ë—ã—Å—Ç—Ä–∞—è —Ä–µ—á—å (rate=1.5)')
        self.send_speech(
            '<speak><prosody rate="1.5">–°–µ–π—á–∞—Å —è –≥–æ–≤–æ—Ä—é –±—ã—Å—Ç—Ä–µ–µ –æ–±—ã—á–Ω–æ–≥–æ.</prosody></speak>'
        )
        time.sleep(5)
        
        # –ü—Ä–∏–º–µ—Ä 3: –ú–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–µ—á—å —á–µ—Ä–µ–∑ SSML
        self.get_logger().info('\nüìå –ü—Ä–∏–º–µ—Ä 3: –ú–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–µ—á—å (rate=0.7)')
        self.send_speech(
            '<speak><prosody rate="0.7">–ê —Å–µ–π—á–∞—Å —è –≥–æ–≤–æ—Ä—é –º–µ–¥–ª–µ–Ω–Ω–µ–µ.</prosody></speak>'
        )
        time.sleep(7)
        
        # –ü—Ä–∏–º–µ—Ä 4: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        self.get_logger().info('\nüìå –ü—Ä–∏–º–µ—Ä 4: –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (fast, slow)')
        self.send_speech(
            '<speak><prosody rate="fast">–û—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ!</prosody></speak>'
        )
        time.sleep(3)
        
        # –ü—Ä–∏–º–µ—Ä 5: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å—é –≥–æ–ª–æ—Å–æ–º
        self.get_logger().info('\nüìå –ü—Ä–∏–º–µ—Ä 5: –ö–æ–º–∞–Ω–¥–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏')
        self.send_user_command('—Ä–æ–±–æ—Ç, –≥—Ä–æ–º—á–µ')
        time.sleep(3)
        
        self.send_speech('<speak>–¢–µ–ø–µ—Ä—å —è –≥–æ–≤–æ—Ä—é –≥—Ä–æ–º—á–µ!</speak>')
        time.sleep(4)
        
        # –ü—Ä–∏–º–µ—Ä 6: –£–º–µ–Ω—å—à–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        self.get_logger().info('\nüìå –ü—Ä–∏–º–µ—Ä 6: –ö–æ–º–∞–Ω–¥–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏')
        self.send_user_command('—Ä–æ–±–æ—Ç, —Ç–∏—à–µ')
        time.sleep(3)
        
        self.send_speech('<speak>–ê —Ç–µ–ø–µ—Ä—å —Ç–∏—à–µ.</speak>')
        time.sleep(4)
        
        # –ü—Ä–∏–º–µ—Ä 7: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å
        self.get_logger().info('\nüìå –ü—Ä–∏–º–µ—Ä 7: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å')
        self.send_user_command('—Ä–æ–±–æ—Ç, –≥–æ–≤–æ—Ä–∏ –≥—Ä–æ–º–∫–æ')
        time.sleep(3)
        
        self.send_speech('<speak>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å!</speak>')
        time.sleep(4)
        
        # –ü—Ä–∏–º–µ—Ä 8: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        self.get_logger().info('\nüìå –ü—Ä–∏–º–µ—Ä 8: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å')
        self.send_user_command('—Ä–æ–±–æ—Ç, –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å')
        time.sleep(3)
        
        self.send_speech('<speak>–í–µ—Ä–Ω—É–ª—Å—è –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π –≥—Ä–æ–º–∫–æ—Å—Ç–∏.</speak>')
        time.sleep(4)
        
        self.get_logger().info('\n' + '='*60)
        self.get_logger().info('‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!')
        self.get_logger().info('='*60)


def main(args=None):
    rclpy.init(args=args)
    
    node = VoiceExampleNode()
    
    # –î–∞—ë–º –≤—Ä–µ–º—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥—Ä—É–≥–∏—Ö –Ω–æ–¥
    node.get_logger().info('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...')
    time.sleep(3)
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤
    node.run_examples()
    
    # Cleanup
    node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()

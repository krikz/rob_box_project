#!/usr/bin/env python3
"""
–ó–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞ ROBBOX —á–µ—Ä–µ–∑ Yandex Cloud TTS API v3 (gRPC).

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¢–û–ß–ù–´–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –≤–∞—à–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞:
- voice: anton (–¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ API v3!)
- speed: 0.4 (–º–µ–¥–ª–µ–Ω–Ω–µ–µ –æ–±—ã—á–Ω–æ–≥–æ –¥–ª—è —á—ë—Ç–∫–æ—Å—Ç–∏)
- API: gRPC (yandex.cloud.ai.tts.v3)

–í–ê–ñ–ù–û –ü–†–û –ò–°–ö–ê–ñ–ï–ù–ò–ï –ì–û–õ–û–°–ê:
–í –≤–∞—à–µ–º —Å–∫—Ä–∏–ø—Ç–µ –≥–æ–ª–æ—Å –∏—Å–∫–∞–∂–∞–µ—Ç—Å—è ("—ç—Ñ—Ñ–µ–∫—Ç –±—É—Ä—É–Ω–¥—É–∫–∞") –ø–æ—Ç–æ–º—É —á—Ç–æ:
1. Yandex TTS –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç WAV —Å —á–∞—Å—Ç–æ—Ç–æ–π 22050 Hz
2. np.frombuffer(audio_data, dtype=np.int16) —á–∏—Ç–∞–µ—Ç –±–∞–π—Ç—ã –ë–ï–ó –∑–∞–≥–æ–ª–æ–≤–∫–∞ WAV
3. sd.play(samples, samplerate=44100) –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –Ω–∞ —á–∞—Å—Ç–æ—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ WM8960
4. –†–µ–∑—É–ª—å—Ç–∞—Ç: –≥–æ–ª–æ—Å –≤ 2x –±—ã—Å—Ç—Ä–µ–µ –∏ –≤—ã—à–µ (44100/22050 = 2.0x pitch shift)

–≠—Ç–æ –∏—Å–∫–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞—ë—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∑–≤—É–∫ ROBBOX!

–î–ª—è –æ–±—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã –ë–ï–ó –∏–∑–º–µ–Ω–µ–Ω–∏–π (–æ—Ä–∏–≥–∏–Ω–∞–ª 22050 Hz).

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- pip install grpcio grpcio-tools soundfile numpy tqdm
- pip install yandex-cloud-ml-sdk  # –î–ª—è yandex.cloud.ai.tts.v3
- YANDEX_API_KEY –∏–ª–∏ YANDEX_IAM_TOKEN
- YANDEX_FOLDER_ID

–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:
    pip install -r requirements_yandex_v3.txt
"""

import os
import sys
import argparse
import time
from pathlib import Path
from typing import Optional
import grpc
import soundfile as sf
import numpy as np
from tqdm import tqdm

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
try:
    from yandex.cloud.ai.tts.v3 import tts_pb2, tts_service_pb2_grpc
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: yandex-cloud-ml-sdk –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    print("\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:")
    print("  pip install yandex-cloud-ml-sdk")
    print("\n–ò–ª–∏ —á–µ—Ä–µ–∑ requirements:")
    print("  pip install -r requirements_yandex_v3.txt")
    sys.exit(1)


class YandexTTSRecorderV3:
    """–ó–∞–ø–∏—Å—å –¥–∞—Ç–∞—Å–µ—Ç–∞ —á–µ—Ä–µ–∑ Yandex TTS API v3 (gRPC)"""
    
    def __init__(self, api_key: str, folder_id: str, voice: str = "anton", speed: float = 0.4):
        """
        Args:
            api_key: Yandex API Key –∏–ª–∏ IAM Token
            folder_id: Yandex Cloud Folder ID
            voice: –ì–æ–ª–æ—Å (anton, lea, madi, marina - —Ç–æ–ª—å–∫–æ v3!)
            speed: –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏ (0.1-3.0, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 0.4-1.0)
        """
        self.api_key = api_key
        self.folder_id = folder_id
        self.voice = voice
        self.speed = speed
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è gRPC –∫–∞–Ω–∞–ª–∞
        self.channel = grpc.secure_channel(
            'tts.api.cloud.yandex.net:443',
            grpc.ssl_channel_credentials()
        )
        self.stub = tts_service_pb2_grpc.SynthesizerStub(self.channel)
        
        print(f"‚úÖ Yandex TTS v3 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"   Voice: {voice}")
        print(f"   Speed: {speed}")
        print(f"   Folder ID: {folder_id}")
    
    def synthesize(self, text: str) -> Optional[bytes]:
        """
        –°–∏–Ω—Ç–µ–∑ —Ç–µ–∫—Å—Ç–∞ –≤ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ gRPC API v3.
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞
            
        Returns:
            WAV audio –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –≤ –≤–∞—à–µ–º —Å–∫—Ä–∏–ø—Ç–µ
        request = tts_pb2.UtteranceSynthesisRequest(
            text=text,
            output_audio_spec=tts_pb2.AudioFormatOptions(
                container_audio=tts_pb2.ContainerAudio(
                    container_audio_type=tts_pb2.ContainerAudio.WAV
                )
            ),
            hints=[
                tts_pb2.Hints(voice=self.voice),
                tts_pb2.Hints(speed=self.speed),
            ],
            loudness_normalization_type=tts_pb2.UtteranceSynthesisRequest.LUFS
        )
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
            responses = self.stub.UtteranceSynthesis(
                request,
                metadata=(('authorization', f'Api-Key {self.api_key}'),)
            )
            
            # –°–æ–±–∏—Ä–∞–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–∏–º–∞
            audio_data = b""
            for response in responses:
                audio_data += response.audio_chunk.data
            
            if audio_data:
                return audio_data
            else:
                print(f"‚ö†Ô∏è  –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç TTS –¥–ª—è: {text[:50]}...")
                return None
                
        except grpc.RpcError as e:
            print(f"‚ùå gRPC –æ—à–∏–±–∫–∞: {e.code()} - {e.details()}")
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞: {e}")
            return None
    
    def save_audio(self, audio_data: bytes, output_path: Path) -> Optional[float]:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ WAV –∞—É–¥–∏–æ –¢–û–ß–ù–û –∫–∞–∫ –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç Yandex TTS v3.
        –ë–ï–ó —Ä–µ—Å–µ–º–ø–ª–∏–Ω–≥–∞, –ë–ï–ó –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª 22050 Hz!
        
        Args:
            audio_data: WAV –¥–∞–Ω–Ω—ã–µ –æ—Ç TTS (—Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º)
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            
        Returns:
            –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º WAV –∫–∞–∫ –µ—Å—Ç—å –æ—Ç Yandex (22050 Hz, PCM_16, mono)
            with open(output_path, 'wb') as f:
                f.write(audio_data)
            
            # –ß–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            data, samplerate = sf.read(output_path)
            duration = len(data) / samplerate
            
            return duration
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {output_path}: {e}")
            return None
    
    def record_dataset(
        self,
        input_file: Path,
        output_dir: Path,
        delay: float = 1.5,
        resume_from: int = 0
    ) -> bool:
        """
        –ó–∞–ø–∏—Å—å –ø–æ–ª–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞.
        
        Args:
            input_file: –§–∞–π–ª —Å —Ç–µ–∫—Å—Ç–∞–º–∏ (–æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ = –æ–¥–Ω–∞ —Ñ—Ä–∞–∑–∞)
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è WAV + metadata.csv
            delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)
            resume_from: –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å N-–æ–π —Ñ—Ä–∞–∑—ã
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        # –ß–∏—Ç–∞–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
        if not input_file.exists():
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_file}")
            return False
        
        with open(input_file, 'r', encoding='utf-8') as f:
            sentences = [line.strip() for line in f if line.strip()]
        
        if not sentences:
            print("‚ùå –§–∞–π–ª –ø—É—Å—Ç–æ–π!")
            return False
        
        # –°–æ–∑–¥–∞—ë–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        output_dir.mkdir(parents=True, exist_ok=True)
        
        # –ü—É—Ç—å –∫ metadata
        metadata_path = output_dir / "metadata.csv"
        
        # –ï—Å–ª–∏ resume, —á–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π metadata
        existing_count = 0
        if resume_from > 0 and metadata_path.exists():
            with open(metadata_path, 'r', encoding='utf-8') as f:
                existing_count = len(f.readlines())
            print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ {existing_count} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π")
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º metadata –¥–ª—è –¥–æ–∑–∞–ø–∏—Å–∏
        mode = 'a' if resume_from > 0 else 'w'
        metadata_file = open(metadata_path, mode, encoding='utf-8')
        
        print("\n" + "=" * 60)
        print("–ó–ê–ü–ò–°–¨ –î–ê–¢–ê–°–ï–¢–ê - YANDEX TTS V3")
        print("=" * 60)
        print(f"–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {input_file}")
        print(f"–í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {output_dir}")
        print(f"–í—Å–µ–≥–æ —Ñ—Ä–∞–∑: {len(sentences)}")
        if resume_from > 0:
            print(f"–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ñ—Ä–∞–∑—ã: {resume_from}")
        print(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏: voice={self.voice}, speed={self.speed}")
        print("=" * 60)
        print()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—Ä–∞–∑
        success_count = 0
        fail_count = 0
        total_duration = 0.0
        
        try:
            for i, text in enumerate(tqdm(sentences, desc="–ó–∞–ø–∏—Å—å", unit="—Ñ—Ä–∞–∑–∞")):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
                if i < resume_from:
                    continue
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                filename = f"robbox_{i:05d}.wav"
                output_path = output_dir / filename
                
                # –°–∏–Ω—Ç–µ–∑
                audio_data = self.synthesize(text)
                
                if audio_data is None:
                    fail_count += 1
                    tqdm.write(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ [{i}]: {text[:50]}...")
                    time.sleep(delay)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    continue
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                duration = self.save_audio(audio_data, output_path)
                
                if duration is None:
                    fail_count += 1
                    continue
                
                # –ó–∞–ø–∏—Å—å –≤ metadata
                metadata_file.write(f"{filename}|{text}|{duration:.2f}\n")
                metadata_file.flush()
                
                success_count += 1
                total_duration += duration
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
                if i < len(sentences) - 1:
                    time.sleep(delay)
            
        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            print(f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: --resume-from {success_count + resume_from}")
        finally:
            metadata_file.close()
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n" + "=" * 60)
        print("–†–ï–ó–£–õ–¨–¢–ê–¢–´")
        print("=" * 60)
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {fail_count}")
        print(f"‚è±Ô∏è  –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_duration / 60:.1f} –º–∏–Ω—É—Ç")
        
        if success_count > 0:
            avg_duration = total_duration / success_count
            print(f"üìä –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ—Ä–∞–∑—ã: {avg_duration:.1f}—Å")
            print()
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—É—á–µ–Ω–∏—é:")
            
            if total_duration < 600:  # < 10 –º–∏–Ω—É—Ç
                print("   ‚ö†Ô∏è  –ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è quality training")
                print("   –ü–æ–¥—Ö–æ–¥: Voice cloning (–±—ã—Å—Ç—Ä–æ, –∫–∞—á–µ—Å—Ç–≤–æ 3-4/5)")
            elif total_duration < 1800:  # < 30 –º–∏–Ω—É—Ç
                print("   ‚≠ê –û–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è fine-tuning")
                print("   –ü–æ–¥—Ö–æ–¥: Fine-tuning (1-3 –¥–Ω—è, –∫–∞—á–µ—Å—Ç–≤–æ 4/5)")
            else:
                print("   üöÄ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è full training")
                print("   –ü–æ–¥—Ö–æ–¥: Full training (5-14 –¥–Ω–µ–π, –∫–∞—á–µ—Å—Ç–≤–æ 4-5/5)")
        
        print("=" * 60)
        print()
        
        return success_count > 0


def main():
    parser = argparse.ArgumentParser(
        description="–ó–∞–ø–∏—Å—å TTS –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–ª—è ROBBOX —á–µ—Ä–µ–∑ Yandex TTS API v3 (gRPC)",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –ë–∞–∑–æ–≤–∞—è –∑–∞–ø–∏—Å—å (—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –≤–∞—à–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞)
  python3 record_yandex_voice.py \\
    --input ../dataset/robbox_sentences_example.txt \\
    --output ~/robbox_tts_training/datasets/robbox_voice/

  # –° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
  python3 record_yandex_voice.py \\
    --input ../dataset/my_sentences.txt \\
    --output ~/robbox_tts_training/datasets/my_voice/ \\
    --voice anton \\
    --speed 0.4 \\
    --delay 2.0

  # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ñ—Ä–∞–∑—ã 150 (–µ—Å–ª–∏ –ø—Ä–µ—Ä–≤–∞–ª–æ—Å—å)
  python3 record_yandex_voice.py \\
    --input ../dataset/my_sentences.txt \\
    --output ~/robbox_tts_training/datasets/my_voice/ \\
    --resume-from 150

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
  YANDEX_API_KEY    - API –∫–ª—é—á Yandex Cloud
  YANDEX_IAM_TOKEN  - IAM —Ç–æ–∫–µ–Ω (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ API key)
  YANDEX_FOLDER_ID  - Folder ID –∏–∑ Yandex Cloud

–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π:
  API Key: https://cloud.yandex.ru/docs/iam/operations/api-key/create
  IAM Token: yc iam create-token
  Folder ID: yc config list

–í–∞–∂–Ω–æ:
  - –ì–æ–ª–æ—Å "anton" –¥–æ—Å—Ç—É–ø–µ–Ω –¢–û–õ–¨–ö–û –≤ API v3!
  - IAM —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç 12 —á–∞—Å–æ–≤
  - API Key –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
  - Speed 0.4 = –º–µ–¥–ª–µ–Ω–Ω–∞—è —á—ë—Ç–∫–∞—è —Ä–µ—á—å (–∫–∞–∫ –≤ –≤–∞—à–µ–º —Å–∫—Ä–∏–ø—Ç–µ)
  - –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ 22050 Hz
        """
    )
    
    parser.add_argument(
        "--input",
        required=True,
        help="–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª —Å —Ç–µ–∫—Å—Ç–∞–º–∏ (–æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ = –æ–¥–Ω–∞ —Ñ—Ä–∞–∑–∞)"
    )
    
    parser.add_argument(
        "--output",
        required=True,
        help="–í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è WAV —Ñ–∞–π–ª–æ–≤ –∏ metadata.csv"
    )
    
    parser.add_argument(
        "--voice",
        default="anton",
        choices=["anton", "lea", "madi", "marina"],
        help="–ì–æ–ª–æ—Å (—Ç–æ–ª—å–∫–æ v3, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: anton –∫–∞–∫ –≤ –≤–∞—à–µ–º —Å–∫—Ä–∏–ø—Ç–µ)"
    )
    
    parser.add_argument(
        "--speed",
        type=float,
        default=0.4,
        help="–°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏ 0.1-3.0 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0.4 –∫–∞–∫ –≤ –≤–∞—à–µ–º —Å–∫—Ä–∏–ø—Ç–µ)"
    )
    
    parser.add_argument(
        "--delay",
        type=float,
        default=1.5,
        help="–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1.5)"
    )
    
    parser.add_argument(
        "--resume-from",
        type=int,
        default=0,
        help="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å N-–æ–π —Ñ—Ä–∞–∑—ã (–¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è)"
    )
    
    args = parser.parse_args()
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
    api_key = os.getenv("YANDEX_API_KEY") or os.getenv("YANDEX_IAM_TOKEN")
    folder_id = os.getenv("YANDEX_FOLDER_ID")
    
    if not api_key:
        print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:")
        print("  export YANDEX_API_KEY='–≤–∞—à_api_key'")
        print("  export YANDEX_IAM_TOKEN='–≤–∞—à_iam_token'")
        print("\n–ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑ .env.secrets:")
        print("  source ../.env.secrets")
        return 1
    
    if not folder_id:
        print("‚ùå YANDEX_FOLDER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:")
        print("  export YANDEX_FOLDER_ID='–≤–∞—à_folder_id'")
        print("\n–ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑ .env.secrets:")
        print("  source ../.env.secrets")
        return 1
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if not 0.1 <= args.speed <= 3.0:
        print(f"‚ùå Speed –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 0.1 –∏ 3.0 (—É–∫–∞–∑–∞–Ω–æ: {args.speed})")
        return 1
    
    if args.delay < 0:
        print(f"‚ùå Delay –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º (—É–∫–∞–∑–∞–Ω–æ: {args.delay})")
        return 1
    
    # –°–æ–∑–¥–∞—ë–º —Ä–µ–∫–æ—Ä–¥–µ—Ä
    try:
        recorder = YandexTTSRecorderV3(
            api_key=api_key,
            folder_id=folder_id,
            voice=args.voice,
            speed=args.speed
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return 1
    
    # –ó–∞–ø–∏—Å—å –¥–∞—Ç–∞—Å–µ—Ç–∞
    input_path = Path(args.input)
    output_path = Path(args.output)
    
    success = recorder.record_dataset(
        input_file=input_path,
        output_dir=output_path,
        delay=args.delay,
        resume_from=args.resume_from
    )
    
    if success:
        print("\n‚úÖ –î–∞—Ç–∞—Å–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω!")
        print(f"\nüìÇ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_path}")
        print(f"üìÑ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {output_path / 'metadata.csv'}")
        print("\nüéì –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")
        print("   cd ../training")
        print(f"   python3 train_piper.py --dataset {output_path} --output ~/robbox_tts_training/models/robbox_piper")
        return 0
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞")
        return 1


if __name__ == "__main__":
    sys.exit(main())

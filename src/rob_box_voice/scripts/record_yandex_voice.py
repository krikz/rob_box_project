#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–∞ ROBBOX —á–µ—Ä–µ–∑ Yandex SpeechKit

–¶–µ–ª—å: –°–æ–±—Ä–∞—Ç—å –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–π TTS –º–æ–¥–µ–ª–∏

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- API –∫–ª—é—á–∏ Yandex Cloud (IAM token –∏–ª–∏ API key)
- –¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ—Ä–ø—É—Å –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ (–º–∏–Ω–∏–º—É–º 20-30 –º–∏–Ω—É—Ç –∞—É–¥–∏–æ)

–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
- –î–ª—è fine-tuning: 20-30 –º–∏–Ω—É—Ç (200-300 —Ñ—Ä–∞–∑)
- –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è: 3-5 —á–∞—Å–æ–≤ (3000-5000 —Ñ—Ä–∞–∑)

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python3 record_yandex_voice.py --input sentences.txt --output dataset/
"""

import os
import sys
import json
import time
import argparse
from pathlib import Path
from typing import List

try:
    import requests
    import soundfile as sf
    import numpy as np
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
    print("  pip install requests soundfile numpy")
    sys.exit(1)


class YandexTTSRecorder:
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Yandex SpeechKit –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞"""
    
    def __init__(self, api_key: str, folder_id: str, voice: str = "anton", 
                 emotion: str = "neutral", speed: float = 1.0):
        """
        Args:
            api_key: Yandex Cloud API key –∏–ª–∏ IAM token
            folder_id: ID –∫–∞—Ç–∞–ª–æ–≥–∞ Yandex Cloud
            voice: –ì–æ–ª–æ—Å (anton, alena, ermil)
            emotion: –≠–º–æ—Ü–∏—è (neutral, good, evil)
            speed: –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏ (0.1-3.0)
        """
        self.api_key = api_key
        self.folder_id = folder_id
        self.voice = voice
        self.emotion = emotion
        self.speed = speed
        
        # Yandex SpeechKit API endpoint
        self.url = "https://tts.api.cloud.yandex.net/speech/v1/tts:synthesize"
    
    def synthesize(self, text: str) -> bytes:
        """
        –°–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Yandex API
        
        Returns:
            PCM audio data (48kHz, 16-bit, mono)
        """
        headers = {
            "Authorization": f"Api-Key {self.api_key}"
        }
        
        data = {
            "text": text,
            "lang": "ru-RU",
            "voice": self.voice,
            "emotion": self.emotion,
            "speed": self.speed,
            "format": "lpcm",
            "sampleRateHertz": 48000
        }
        
        try:
            response = requests.post(self.url, headers=headers, data=data, timeout=30)
            response.raise_for_status()
            return response.content
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Yandex API: {e}")
            return None
    
    def save_audio(self, audio_data: bytes, output_path: Path, sample_rate: int = 48000):
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞—É–¥–∏–æ –≤ WAV —Ñ–∞–π–ª
        
        Args:
            audio_data: PCM audio bytes
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è WAV
            sample_rate: –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
        """
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è bytes –≤ numpy array (int16)
        audio_array = np.frombuffer(audio_data, dtype=np.int16)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤ float32 [-1.0, 1.0]
        audio_float = audio_array.astype(np.float32) / 32768.0
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ WAV
        sf.write(output_path, audio_float, sample_rate)
    
    def record_dataset(self, sentences: List[str], output_dir: Path, 
                      delay: float = 1.0, resume_from: int = 0):
        """
        –ó–∞–ø–∏—Å–∞—Ç—å –¥–∞—Ç–∞—Å–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        
        Args:
            sentences: –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ
            delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)
            resume_from: –° –∫–∞–∫–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å (–¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è)
        """
        output_dir.mkdir(parents=True, exist_ok=True)
        
        # Metadata —Ñ–∞–π–ª (–¥–ª—è –æ–±—É—á–µ–Ω–∏—è)
        metadata_path = output_dir / "metadata.csv"
        metadata_file = open(metadata_path, "a" if resume_from > 0 else "w", encoding="utf-8")
        
        if resume_from == 0:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ CSV: filename|text|duration
            metadata_file.write("filename|text|duration\n")
        
        total = len(sentences)
        success_count = 0
        fail_count = 0
        
        print(f"üìù –ù–∞—á–∏–Ω–∞—é –∑–∞–ø–∏—Å—å –¥–∞—Ç–∞—Å–µ—Ç–∞:")
        print(f"   –í—Å–µ–≥–æ —Ñ—Ä–∞–∑: {total}")
        print(f"   –ì–æ–ª–æ—Å: {self.voice}")
        print(f"   –≠–º–æ—Ü–∏—è: {self.emotion}")
        print(f"   –°–∫–æ—Ä–æ—Å—Ç—å: {self.speed}")
        print(f"   –í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {output_dir}")
        
        if resume_from > 0:
            print(f"   ‚è≠Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∞—é —Å —Ñ—Ä–∞–∑—ã {resume_from + 1}")
        
        print()
        
        for i, sentence in enumerate(sentences[resume_from:], start=resume_from):
            # –ü—Ä–æ–≥—Ä–µ—Å—Å
            progress = (i + 1) / total * 100
            print(f"[{i+1}/{total}] ({progress:.1f}%) {sentence[:50]}...")
            
            # –°–∏–Ω—Ç–µ–∑
            audio_data = self.synthesize(sentence)
            
            if audio_data is None:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞")
                fail_count += 1
                continue
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            filename = f"robbox_{i:05d}.wav"
            output_path = output_dir / filename
            
            try:
                self.save_audio(audio_data, output_path)
                
                # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                audio_array = np.frombuffer(audio_data, dtype=np.int16)
                duration = len(audio_array) / 48000.0
                
                # –ó–∞–ø–∏—Å—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                metadata_file.write(f"{filename}|{sentence}|{duration:.2f}\n")
                metadata_file.flush()
                
                print(f"   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename} ({duration:.2f}s)")
                success_count += 1
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
                fail_count += 1
                continue
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ (—á—Ç–æ–±—ã –Ω–µ –∑–∞–±–∞–Ω–∏–ª–∏ API)
            if i < total - 1:
                time.sleep(delay)
        
        metadata_file.close()
        
        # –ò—Ç–æ–≥–∏
        print()
        print("=" * 60)
        print(f"‚úÖ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"   –£—Å–ø–µ—à–Ω–æ: {success_count} / {total}")
        print(f"   –û—à–∏–±–æ–∫: {fail_count}")
        
        if success_count > 0:
            total_duration = sum([
                float(line.split('|')[2]) 
                for line in open(metadata_path, encoding='utf-8').readlines()[1:]
            ])
            print(f"   –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_duration / 60:.1f} –º–∏–Ω—É—Ç")
            print(f"   –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {metadata_path}")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            print()
            print("üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            if total_duration < 20 * 60:
                print("   ‚ö†Ô∏è  –ú–µ–Ω—å—à–µ 20 –º–∏–Ω—É—Ç - —Ö–≤–∞—Ç–∏—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è voice cloning")
                print("   üí° –î–ª—è fine-tuning –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 20-30 –º–∏–Ω—É—Ç")
            elif total_duration < 3 * 60 * 60:
                print("   ‚úÖ 20-30 –º–∏–Ω—É—Ç - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è fine-tuning")
                print("   üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ 3-5 —á–∞—Å–æ–≤")
            else:
                print("   ‚úÖ –ë–æ–ª—å—à–µ 3 —á–∞—Å–æ–≤ - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è!")


def load_sentences(input_path: Path) -> List[str]:
    """
    –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    
    –§–æ—Ä–º–∞—Ç: –æ–¥–Ω–∞ —Ñ—Ä–∞–∑–∞ –Ω–∞ —Å—Ç—Ä–æ–∫—É
    """
    with open(input_path, 'r', encoding='utf-8') as f:
        sentences = [line.strip() for line in f if line.strip()]
    return sentences


def generate_corpus_suggestions():
    """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–∞—Ç–∞—Å–µ—Ç–∞"""
    print("üí° –û—Ç–∫—É–¥–∞ –≤–∑—è—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –¥–∞—Ç–∞—Å–µ—Ç–∞?")
    print()
    print("1. –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—Ä–∞–∑—ã ROBBOX:")
    print("   - '–°–ª—É—à–∞—é', '–ì–æ—Ç–æ–≤–æ', '–ï–¥—É –≤–ø–µ—Ä—ë–¥', '–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ', –∏ —Ç.–¥.")
    print("   - –§–∞–π–ª: src/rob_box_voice/config/voice_assistant.yaml (system_phrases)")
    print()
    print("2. –¢–∏–ø–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("   - '–ü–æ–≤–µ—Ä–Ω–∏ –Ω–∞–ª–µ–≤–æ', '–û—Å—Ç–∞–Ω–æ–≤–∏—Å—å', '–ü–æ–∫–∞–∂–∏ –∫–∞—Ä—Ç—É', –∏ —Ç.–¥.")
    print()
    print("3. –î–∏–∞–ª–æ–≥–∏:")
    print("   - –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤")
    print()
    print("4. –û–±—â–∏–π –∫–æ—Ä–ø—É—Å —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞:")
    print("   - OpenCorpora (opencorpora.org)")
    print("   - Tatoeba (tatoeba.org/rus)")
    print("   - Wikipedia dump (—Å–ª–æ–∂–Ω–µ–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å)")
    print()
    print("5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ LLM:")
    print("   - DeepSeek, ChatGPT: '–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 1000 —Ñ—Ä–∞–∑ –¥–ª—è —Ä–æ–±–æ—Ç–∞'")
    print()


def main():
    parser = argparse.ArgumentParser(
        description="–ó–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞ ROBBOX —á–µ—Ä–µ–∑ Yandex SpeechKit –¥–ª—è –æ–±—É—á–µ–Ω–∏—è TTS –º–æ–¥–µ–ª–∏"
    )
    
    parser.add_argument("--input", "-i", type=str,
                       help="–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ (–æ–¥–Ω–∞ —Ñ—Ä–∞–∑–∞ –Ω–∞ —Å—Ç—Ä–æ–∫—É)")
    parser.add_argument("--output", "-o", type=str, default="dataset/robbox_voice",
                       help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ (default: dataset/robbox_voice)")
    
    parser.add_argument("--api-key", type=str, 
                       help="Yandex Cloud API key (–∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è YANDEX_API_KEY)")
    parser.add_argument("--folder-id", type=str,
                       help="Yandex Cloud Folder ID (–∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è YANDEX_FOLDER_ID)")
    
    parser.add_argument("--voice", type=str, default="anton",
                       choices=["anton", "alena", "ermil"],
                       help="–ì–æ–ª–æ—Å Yandex (default: anton)")
    parser.add_argument("--emotion", type=str, default="neutral",
                       choices=["neutral", "good", "evil"],
                       help="–≠–º–æ—Ü–∏—è (default: neutral)")
    parser.add_argument("--speed", type=float, default=1.0,
                       help="–°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏ 0.1-3.0 (default: 1.0)")
    
    parser.add_argument("--delay", type=float, default=1.0,
                       help="–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (default: 1.0)")
    parser.add_argument("--resume-from", type=int, default=0,
                       help="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ñ—Ä–∞–∑—ã N (–¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è)")
    
    parser.add_argument("--suggest-corpus", action="store_true",
                       help="–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º —Ç–µ–∫—Å—Ç–∞")
    
    args = parser.parse_args()
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    if args.suggest_corpus:
        generate_corpus_suggestions()
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if not args.input:
        print("‚ùå –û—à–∏–±–∫–∞: —Ç—Ä–µ–±—É–µ—Ç—Å—è --input —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Ñ–∞–π–ª–æ–º")
        print()
        print("–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
        print("  python3 record_yandex_voice.py --input sentences.txt --output dataset/")
        print()
        print("–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --suggest-corpus –¥–ª—è –∏–¥–µ–π:")
        print("  python3 record_yandex_voice.py --suggest-corpus")
        sys.exit(1)
    
    # API –∫–ª—é—á–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    api_key = args.api_key or os.getenv("YANDEX_API_KEY")
    folder_id = args.folder_id or os.getenv("YANDEX_FOLDER_ID")
    
    if not api_key or not folder_id:
        print("‚ùå –û—à–∏–±–∫–∞: —Ç—Ä–µ–±—É—é—Ç—Å—è API –∫–ª—é—á–∏ Yandex Cloud")
        print()
        print("–£–∫–∞–∂–∏—Ç–µ —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ã:")
        print("  --api-key YOUR_API_KEY --folder-id YOUR_FOLDER_ID")
        print()
        print("–ò–ª–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("  export YANDEX_API_KEY='your_key'")
        print("  export YANDEX_FOLDER_ID='your_folder_id'")
        print()
        print("–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–∏:")
        print("  https://cloud.yandex.ru/docs/iam/operations/api-key/create")
        sys.exit(1)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    input_path = Path(args.input)
    if not input_path.exists():
        print(f"‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_path}")
        sys.exit(1)
    
    sentences = load_sentences(input_path)
    if not sentences:
        print(f"‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π: {input_path}")
        sys.exit(1)
    
    print(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(sentences)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–∑ {input_path}")
    print()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–æ—Ä–¥–µ—Ä–∞
    recorder = YandexTTSRecorder(
        api_key=api_key,
        folder_id=folder_id,
        voice=args.voice,
        emotion=args.emotion,
        speed=args.speed
    )
    
    # –ó–∞–ø–∏—Å—å –¥–∞—Ç–∞—Å–µ—Ç–∞
    output_dir = Path(args.output)
    recorder.record_dataset(
        sentences=sentences,
        output_dir=output_dir,
        delay=args.delay,
        resume_from=args.resume_from
    )


if __name__ == "__main__":
    main()

#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç —Å ROBBOX —Ä–æ–±–æ—Ç–æ–º

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç:
- DeepSeek API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ (JSON —Å SSML)
- Text Normalizer v2 –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
- Silero TTS –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è (—Å "–±—É—Ä—É–Ω–¥—É–∫–æ–º")
- –ö–æ–º–∞–Ω–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–±–æ—Ç–æ–º
"""

import os
import sys
import json
import time
import re
import torch
import sounddevice as sd
from openai import OpenAI
from text_normalizer_v2 import RobboxVoiceHandler


class SileroTTS:
    """Silero TTS v4 —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π "–±—É—Ä—É–Ω–¥—É–∫–∞" """
    
    def __init__(self, sample_rate: int = 24000, chipmunk_mode: bool = True):
        self.sample_rate = sample_rate
        self.chipmunk_mode = chipmunk_mode
        
        print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ Silero TTS v4...")
        self.device = torch.device('cpu')
        self.model, _ = torch.hub.load(
            repo_or_dir='snakers4/silero-models',
            model='silero_tts',
            language='ru',
            speaker='v4_ru'
        )
        self.model.to(self.device)
        print("‚úÖ Silero TTS –∑–∞–≥—Ä—É–∂–µ–Ω\n")
    
    def synthesize_and_play(self, text: str, speaker: str = 'aidar'):
        """
        –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ—Ç –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ä–µ—á—å
        
        Args:
            text: –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
            speaker: aidar, baya, kseniya, xenia
        
        –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è ROBBOX:
        - speaker: aidar
        - pitch: medium
        - rate: x-slow (–∫–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ—Ç pitch shift 2.0x)
        - sample_rate: 24000 Hz ‚Üí 48000 Hz —Å –±—É—Ä—É–Ω–¥—É–∫–æ–º
        """
        if not text.strip():
            return
        
        print(f"üîä –ì–æ–≤–æ—Ä—é: {text}")
        
        # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ SSML —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        # rate="x-slow" —á—Ç–æ–±—ã –ø–æ—Å–ª–µ pitch shift 2x –±—ã–ª–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        # pitch="medium" –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —Ç–æ–Ω–∞
        ssml_text = f'<speak><prosody rate="x-slow" pitch="medium">{text}</prosody></speak>'
        
        # –°–∏–Ω—Ç–µ–∑ —á–µ—Ä–µ–∑ SSML (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç prosody —Ç–µ–≥–∏!)
        audio = self.model.apply_tts(
            ssml_text=ssml_text,
            speaker=speaker,
            sample_rate=self.sample_rate
        )
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy
        audio_np = audio.numpy()
        
        # –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å pitch shift (–±—É—Ä—É–Ω–¥—É–∫)
        if self.chipmunk_mode:
            playback_rate = self.sample_rate * 2  # 24000 ‚Üí 48000 (2x pitch shift)
            print("üêøÔ∏è  –†–µ–∂–∏–º '–ë—É—Ä—É–Ω–¥—É–∫': pitch shift 2.0x (rate=x-slow + pitch=medium)")
        else:
            playback_rate = self.sample_rate
        
        # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∏ –ñ–î–Å–ú –û–ö–û–ù–ß–ê–ù–ò–Ø
        sd.play(audio_np, playback_rate)
        sd.wait()  # –ö—Ä–∏—Ç–∏—á–Ω–æ! –ë–µ–∑ —ç—Ç–æ–≥–æ —Ñ—Ä–∞–∑—ã –æ–±—Ä—É–±–∞—é—Ç—Å—è
        print()


class RobboxChat:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å —á–∞—Ç–∞ —Å ROBBOX"""
    
    def __init__(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
        api_key = os.getenv('DEEPSEEK_API_KEY')
        if not api_key:
            print("‚ùå –û—à–∏–±–∫–∞: DEEPSEEK_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: export DEEPSEEK_API_KEY='your-key'")
            sys.exit(1)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.client = OpenAI(
            api_key=api_key,
            base_url="https://api.deepseek.com"
        )
        
        self.voice_handler = RobboxVoiceHandler()
        self.tts = SileroTTS(sample_rate=24000, chipmunk_mode=True)
        
        # –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
        self.conversation_history = []
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        self.system_prompt = self._load_system_prompt()
        
        print("="*60)
        print("ü§ñ ROBBOX –ß–ê–¢ - –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú")
        print("="*60)
        print("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
        print("  ‚úÖ DeepSeek API –ø–æ–¥–∫–ª—é—á–µ–Ω")
        print("  ‚úÖ Silero TTS –∑–∞–≥—Ä—É–∂–µ–Ω (–±—É—Ä—É–Ω–¥—É–∫ —Ä–µ–∂–∏–º)")
        print("  ‚úÖ Text Normalizer v2 –≥–æ—Ç–æ–≤")
        print("  ‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ–º–∞–Ω–¥ –∞–∫—Ç–∏–≤–Ω–∞")
        print()
        print("–ö–æ–º–∞–Ω–¥—ã —á–∞—Ç–∞:")
        print("  /quit    - –í—ã—Ö–æ–¥")
        print("  /clear   - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
        print("  /history - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
        print("="*60)
        print()
    
    def _load_system_prompt(self) -> str:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
        prompt_path = os.path.join(
            os.path.dirname(__file__),
            '../prompts/master_prompt.txt'
        )
        
        try:
            with open(prompt_path, 'r', encoding='utf-8') as f:
                return f.read()
        except FileNotFoundError:
            print(f"‚ö†Ô∏è  –ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {prompt_path}")
            return "–¢—ã ROBBOX - –º–æ–±–∏–ª—å–Ω—ã–π —Ä–æ–±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ —Å –ø–æ–ª—è–º–∏: text, ssml, commands, emotion."
    
    def ask_deepseek(self, user_message: str) -> str:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –≤ DeepSeek –∏ –ø–æ–ª—É—á–∞–µ—Ç JSON –æ—Ç–≤–µ—Ç
        
        Returns:
            JSON —Å—Ç—Ä–æ–∫–∞ —Å –ø–æ–ª—è–º–∏: text, ssml, commands, emotion
        """
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.conversation_history.append({
            "role": "user",
            "content": user_message
        })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        messages = [
            {"role": "system", "content": self.system_prompt},
            *self.conversation_history
        ]
        
        print("ü§î ROBBOX –¥—É–º–∞–µ—Ç...")
        
        # –ó–∞–ø—Ä–æ—Å –∫ DeepSeek
        try:
            response = self.client.chat.completions.create(
                model="deepseek-chat",
                messages=messages,
                temperature=0.7,
                max_tokens=500
            )
            
            assistant_message = response.choices[0].message.content
            
            # –£–±–∏—Ä–∞–µ–º markdown –±–ª–æ–∫–∏ ```json ... ```
            assistant_message = re.sub(r'^```json\s*', '', assistant_message)
            assistant_message = re.sub(r'\s*```$', '', assistant_message)
            assistant_message = assistant_message.strip()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversation_history.append({
                "role": "assistant",
                "content": assistant_message
            })
            
            return assistant_message
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ DeepSeek API: {e}")
            return json.dumps({
                "text": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.",
                "emotion": "sad"
            })
    
    def process_and_speak(self, response: str):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç DeepSeek –∏ –æ–∑–≤—É—á–∏–≤–∞–µ—Ç
        
        Args:
            response: JSON —Å—Ç—Ä–æ–∫–∞ –æ—Ç DeepSeek
        """
        # –ü–∞—Ä—Å–∏–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        result = self.voice_handler.process_response(response, execute_commands=True)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–º–æ—Ü–∏—é
        emotion_emoji = {
            'neutral': 'üòê',
            'happy': 'üòä',
            'sad': 'üò¢',
            'thinking': 'ü§î',
            'alert': '‚ö†Ô∏è',
            'angry': 'üò†',
            'surprised': 'üòÆ'
        }
        emoji = emotion_emoji.get(result['emotion'], 'ü§ñ')
        
        print("="*60)
        print(f"ü§ñ ROBBOX [{emoji} {result['emotion']}]:")
        print("="*60)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≥–æ–ª–æ—Å
        speaker = 'aidar'  # –ú—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å, –ª—É—á—à–µ –≤—Å–µ–≥–æ –∑–≤—É—á–∏—Ç —Å –±—É—Ä—É–Ω–¥—É–∫–æ–º
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å SSML chunks —Å –ø–∞—É–∑–∞–º–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ò–• (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        if result['ssml_chunks']:
            for text, pause_ms in result['ssml_chunks']:
                self.tts.synthesize_and_play(text, speaker=speaker)
                if pause_ms:
                    print(f"‚è∏Ô∏è  –ü–∞—É–∑–∞ {pause_ms}ms...")
                    time.sleep(pause_ms / 1000.0)
        # –ò–Ω–∞—á–µ –æ–∑–≤—É—á–∏–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Ñ—Ä–∞–∑—ã
        elif result['phrases']:
            for phrase in result['phrases']:
                self.tts.synthesize_and_play(phrase, speaker=speaker)
        
        print("="*60)
        print()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç"""
        while True:
            try:
                # –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_input = input("üë§ –í—ã: ").strip()
                
                if not user_input:
                    continue
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —á–∞—Ç–∞
                if user_input.startswith('/'):
                    if user_input == '/quit':
                        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                        break
                    
                    elif user_input == '/clear':
                        self.conversation_history = []
                        print("üóëÔ∏è  –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞\n")
                        continue
                    
                    elif user_input == '/history':
                        print("\nüìú –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:")
                        for i, msg in enumerate(self.conversation_history, 1):
                            role = "üë§" if msg['role'] == 'user' else "ü§ñ"
                            content = msg['content'][:100] + "..." if len(msg['content']) > 100 else msg['content']
                            print(f"{i}. {role} {content}")
                        print()
                        continue
                    
                    else:
                        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {user_input}\n")
                        continue
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ DeepSeek
                response_json = self.ask_deepseek(user_input)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—ã—Ä–æ–π JSON (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
                print(f"\nüìã JSON –æ—Ç–≤–µ—Ç:")
                try:
                    parsed = json.loads(response_json)
                    print(json.dumps(parsed, indent=2, ensure_ascii=False))
                except:
                    print(response_json)
                print()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –æ–∑–≤—É—á–∏–≤–∞–µ–º
                self.process_and_speak(response_json)
                
            except KeyboardInterrupt:
                print("\n\nüëã –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            
            except Exception as e:
                print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
                import traceback
                traceback.print_exc()
                print()


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    chat = RobboxChat()
    chat.run()


if __name__ == '__main__':
    main()

#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç —Å ROBBOX —Ä–æ–±–æ—Ç–æ–º (STREAMING –≤–µ—Ä—Å–∏—è)

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç:
- DeepSeek API streaming –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
- Text Normalizer v2 –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
- Silero TTS –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è (—Å "–±—É—Ä—É–Ω–¥—É–∫–æ–º")
- –ü–æ—Ç–æ–∫–æ–≤–æ–µ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ: –Ω–∞—á–∏–Ω–∞–µ–º –≥–æ–≤–æ—Ä–∏—Ç—å –î–û –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
"""

import os
import sys
import json
import time
import re
import threading
import queue
import torch
import sounddevice as sd
from openai import OpenAI
from text_normalizer_v2 import RobboxVoiceHandler
from accent_replacer import AccentReplacer


class SileroTTS:
    """Silero TTS v4 —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π "–±—É—Ä—É–Ω–¥—É–∫–∞" """
    
    def __init__(self, sample_rate: int = 24000, chipmunk_mode: bool = True):
        self.sample_rate = sample_rate
        self.chipmunk_mode = chipmunk_mode
        
        print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ Silero TTS v4...")
        self.device = torch.device('cpu')
        self.model, _ = torch.hub.load(
            repo_or_dir='snakers4/silero-models',
            model='silero_tts',
            language='ru',
            speaker='v4_ru'
        )
        self.model.to(self.device)
        print("‚úÖ Silero TTS –∑–∞–≥—Ä—É–∂–µ–Ω\n")
    
    def synthesize_and_play(self, text: str, speaker: str = 'aidar'):
        """
        –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ—Ç –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ä–µ—á—å
        
        Args:
            text: –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
            speaker: aidar, baya, kseniya, xenia
        """
        if not text.strip():
            return
        
        print(f"üîä –ì–æ–≤–æ—Ä—é: {text}")
        
        # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ SSML —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        ssml_text = f'<speak><prosody rate="x-slow" pitch="medium">{text}</prosody></speak>'
        
        # –°–∏–Ω—Ç–µ–∑ —á–µ—Ä–µ–∑ SSML
        audio = self.model.apply_tts(
            ssml_text=ssml_text,
            speaker=speaker,
            sample_rate=self.sample_rate
        )
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy
        audio_np = audio.numpy()
        
        # –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å pitch shift (–±—É—Ä—É–Ω–¥—É–∫)
        if self.chipmunk_mode:
            playback_rate = self.sample_rate * 2
            print("üêøÔ∏è  –†–µ–∂–∏–º '–ë—É—Ä—É–Ω–¥—É–∫': pitch shift 2.0x (rate=x-slow + pitch=medium)")
        else:
            playback_rate = self.sample_rate
        
        # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∏ –ñ–î–Å–ú –û–ö–û–ù–ß–ê–ù–ò–Ø
        sd.play(audio_np, playback_rate)
        sd.wait()
        print()


class StreamingChatBot:
    """
    –ü–æ—Ç–æ–∫–æ–≤—ã–π —á–∞—Ç-–±–æ—Ç
    
    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek –ø–æ —á–∞—Å—Ç—è–º (streaming)
    - –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    - –û–∑–≤—É—á–∏–≤–∞–µ—Ç –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å—Ä–∞–∑—É –∫–∞–∫ –æ–Ω–æ –≥–æ—Ç–æ–≤–æ
    - –ù–µ –∂–¥—ë—Ç –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞!
    """
    
    def __init__(self):
        # API –∫–ª—é—á
        api_key = os.getenv('DEEPSEEK_API_KEY')
        if not api_key:
            print("‚ùå –û—à–∏–±–∫–∞: DEEPSEEK_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
            sys.exit(1)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self.client = OpenAI(
            api_key=api_key,
            base_url="https://api.deepseek.com"
        )
        
        self.voice_handler = RobboxVoiceHandler()
        self.tts = SileroTTS(sample_rate=24000, chipmunk_mode=True)
        self.accent_replacer = AccentReplacer()
        
        # –ò—Å—Ç–æ—Ä–∏—è –∏ –ø—Ä–æ–º–ø—Ç
        self.conversation_history = []
        self.system_prompt = self._load_system_prompt()
        
        print("="*60)
        print("ü§ñ ROBBOX –ß–ê–¢ - STREAMING –†–ï–ñ–ò–ú")
        print("="*60)
        print("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
        print("  ‚úÖ DeepSeek API (streaming)")
        print("  ‚úÖ Silero TTS (–±—É—Ä—É–Ω–¥—É–∫ —Ä–µ–∂–∏–º)")
        print("  ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–¥–∞—Ä–µ–Ω–∏—è (—Å–ª–æ–≤–∞—Ä—å)")
        print("  ‚úÖ –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–∫–ª–∏–∫ (streaming + –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ)")
        print()
        print("–ö–æ–º–∞–Ω–¥—ã:")
        print("  /quit    - –í—ã—Ö–æ–¥")
        print("  /clear   - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
        print("="*60)
        print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–ª–æ–≤–∞—Ä—è —É–¥–∞—Ä–µ–Ω–∏–π
        stats = self.accent_replacer.get_stats()
        print(f"üìñ –°–ª–æ–≤–∞—Ä—å —É–¥–∞—Ä–µ–Ω–∏–π: {stats['total_words']} —Å–ª–æ–≤")
        print()
    
    def _load_system_prompt(self) -> str:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –±–µ–∑ —É–¥–∞—Ä–µ–Ω–∏–π
        prompt_path = os.path.join(
            os.path.dirname(__file__),
            '../prompts/master_prompt_simple.txt'
        )
        
        try:
            with open(prompt_path, 'r', encoding='utf-8') as f:
                return f.read()
        except FileNotFoundError:
            return "–¢—ã ROBBOX - –º–æ–±–∏–ª—å–Ω—ã–π —Ä–æ–±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ."
    
    def ask_deepseek_streaming(self, user_message: str):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –≤ DeepSeek –∏ –ø–æ–ª—É—á–∞–µ—Ç streaming –æ—Ç–≤–µ—Ç
        
        –°–¢–†–ê–¢–ï–ì–ò–Ø —Å JSON chunks:
        1. DeepSeek –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∞–ª–µ–Ω—å–∫–∏—Ö JSON –æ–±—ä–µ–∫—Ç–æ–≤
        2. –ö–∞–∂–¥—ã–π JSON = 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        3. –ü–∞—Ä—Å–∏–º –∏ –æ–∑–≤—É—á–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π chunk —Å—Ä–∞–∑—É –∫–∞–∫ –ø–æ–ª—É—á–∏–ª–∏
        4. = –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –ó–ê–î–ï–†–ñ–ö–ê!
        """
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.conversation_history.append({
            "role": "user",
            "content": user_message
        })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        messages = [
            {"role": "system", "content": self.system_prompt},
            *self.conversation_history
        ]
        
        print("ü§î ROBBOX –¥—É–º–∞–µ—Ç...\n")
        
        try:
            # Streaming –∑–∞–ø—Ä–æ—Å –∫ DeepSeek
            stream = self.client.chat.completions.create(
                model="deepseek-chat",
                messages=messages,
                temperature=0.7,
                max_tokens=500,
                stream=True
            )
            
            # –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º chunks –∏ –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
            full_response = ""
            current_chunk = ""  # –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π JSON chunk
            brace_count = 0  # –°—á—ë—Ç—á–∏–∫ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
            in_json = False
            chunk_count = 0
            
            print("="*60)
            print("ü§ñ ROBBOX:")
            print("="*60)
            
            # DEBUG
            debug = os.getenv('DEBUG', '').lower() == 'true'
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫
            for chunk in stream:
                if chunk.choices[0].delta.content:
                    token = chunk.choices[0].delta.content
                    full_response += token
                    
                    if debug:
                        print(f"[DEBUG] Token: {repr(token[:30])}")
                    
                    # –ò—â–µ–º –Ω–∞—á–∞–ª–æ JSON
                    if '{' in token and not in_json:
                        in_json = True
                        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –ø–æ—Å–ª–µ '{'
                        idx = token.index('{')
                        current_chunk = token[idx:]
                        brace_count = current_chunk.count('{') - current_chunk.count('}')
                        
                        if debug:
                            print(f"[DEBUG] JSON –Ω–∞—á–∞–ª—Å—è, brace_count={brace_count}")
                    
                    elif in_json:
                        current_chunk += token
                        brace_count += token.count('{') - token.count('}')
                        
                        if debug and ('{' in token or '}' in token):
                            print(f"[DEBUG] brace_count={brace_count}")
                        
                        # –ö–æ–≥–¥–∞ —Å–∫–æ–±–∫–∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã - —É –Ω–∞—Å –ø–æ–ª–Ω—ã–π JSON
                        if brace_count == 0:
                            # –ü–∞—Ä—Å–∏–º JSON
                            try:
                                chunk_data = json.loads(current_chunk)
                                chunk_count += 1
                                
                                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º chunk
                                print(f"\nüì¶ Chunk {chunk_count}: {json.dumps(chunk_data, ensure_ascii=False)[:100]}...")
                                
                                # –û–∑–≤—É—á–∏–≤–∞–µ–º —Å—Ä–∞–∑—É!
                                self._speak_chunk(chunk_data)
                                
                            except json.JSONDecodeError as e:
                                if debug:
                                    print(f"[DEBUG] JSON parse error: {e}")
                                    print(f"[DEBUG] Current chunk: {current_chunk[:100]}")
                            
                            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ chunk
                            current_chunk = ""
                            in_json = False
                            brace_count = 0
            
            # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π JSON - –ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å
            if in_json and current_chunk.strip():
                try:
                    chunk_data = json.loads(current_chunk.strip())
                    chunk_count += 1
                    print(f"\nüì¶ Chunk {chunk_count} (final): {json.dumps(chunk_data, ensure_ascii=False)[:100]}...")
                    self._speak_chunk(chunk_data)
                except json.JSONDecodeError as e:
                    if debug:
                        print(f"[DEBUG] Final JSON parse error: {e}")
            
            print("\n" + "="*60 + "\n")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversation_history.append({
                "role": "assistant",
                "content": full_response
            })
            
            return full_response
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
            return None
    
    def _speak_chunk(self, chunk_data: dict):
        """
        –û–∑–≤—É—á–∏–≤–∞–µ—Ç –æ–¥–∏–Ω JSON chunk
        
        Args:
            chunk_data: {"chunk": 1, "ssml": "...", "emotion": "..."}
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º SSML (–æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ —Ç–µ–ø–µ—Ä—å!)
        ssml = chunk_data.get('ssml', '')
        
        if not ssml:
            print("‚ö†Ô∏è  –ü—É—Å—Ç–æ–π SSML –≤ chunk, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        
        # ‚ú® –î–û–ë–ê–í–õ–Ø–ï–ú –£–î–ê–†–ï–ù–ò–Ø –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        ssml = self.accent_replacer.add_accents(ssml)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ SSML —Ç–µ–≥–∏
        if self.voice_handler.ssml_processor.has_ssml_tags(ssml):
            # –ü–∞—Ä—Å–∏–º SSML chunks —Å –ø–∞—É–∑–∞–º–∏
            ssml_chunks = self.voice_handler.ssml_processor.parse_ssml_for_timing(ssml)
            for ssml_text, pause_ms in ssml_chunks:
                # SSML —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —É–¥–∞—Ä–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –æ–∑–≤—É—á–∏–≤–∞–µ–º
                # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤
                normalized = self.voice_handler.parser.base_normalizer.normalize(ssml_text)
                self.tts.synthesize_and_play(normalized, speaker='aidar')
                if pause_ms:
                    print(f"‚è∏Ô∏è  –ü–∞—É–∑–∞ {pause_ms}ms...")
                    time.sleep(pause_ms / 1000.0)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç SSML —Ç–µ–≥–æ–≤ - –ø—Ä–æ—Å—Ç–æ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏ –æ–∑–≤—É—á–∏–≤–∞–µ–º
            normalized = self.voice_handler.parser.base_normalizer.normalize(ssml)
            self.tts.synthesize_and_play(normalized, speaker='aidar')
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å)
        commands = chunk_data.get('commands', [])
        if commands:
            print(f"\n{'='*60}")
            print("‚öôÔ∏è  –í–´–ü–û–õ–ù–ï–ù–ò–ï –ö–û–ú–ê–ù–î:")
            print('='*60)
            for cmd_string in commands:
                command, param = self.voice_handler.executor.parse_command(cmd_string)
                if self.voice_handler.executor.validate_command(command, param):
                    self.voice_handler.executor.execute(command, param)
                else:
                    print(f"‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {cmd_string}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç"""
        while True:
            try:
                user_input = input("üë§ –í—ã: ").strip()
                
                if not user_input:
                    continue
                
                # –ö–æ–º–∞–Ω–¥—ã
                if user_input.startswith('/'):
                    if user_input == '/quit':
                        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                        break
                    
                    elif user_input == '/clear':
                        self.conversation_history = []
                        print("üóëÔ∏è  –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞\n")
                        continue
                    
                    else:
                        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\n")
                        continue
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
                self.ask_deepseek_streaming(user_input)
                
            except KeyboardInterrupt:
                print("\n\nüëã –ü—Ä–µ—Ä–≤–∞–Ω–æ. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            
            except Exception as e:
                print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
                import traceback
                traceback.print_exc()
                print()


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    chat = StreamingChatBot()
    chat.run()


if __name__ == '__main__':
    main()

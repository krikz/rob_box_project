#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ReSpeaker –±–µ–∑ ROS2
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç: USB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, VAD, DoA, LED
"""

import sys
import time
from rob_box_voice.utils.respeaker_interface import ReSpeakerInterface
from rob_box_voice.utils.audio_utils import find_respeaker_device, list_audio_devices
import pyaudio


def test_usb_connection():
    """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ USB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    print("\n=== –¢–µ—Å—Ç 1: USB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ===")
    
    respeaker = ReSpeakerInterface()
    if respeaker.connect():
        print("‚úì ReSpeaker –Ω–∞–π–¥–µ–Ω!")
        
        info = respeaker.get_device_info()
        if info:
            print(f"  Vendor ID: {info['vendor_id']}")
            print(f"  Product ID: {info['product_id']}")
            print(f"  Manufacturer: {info['manufacturer']}")
            print(f"  Product: {info['product']}")
        
        respeaker.disconnect()
        return True
    else:
        print("‚úó ReSpeaker –ù–ï –Ω–∞–π–¥–µ–Ω!")
        return False


def test_audio_device():
    """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    print("\n=== –¢–µ—Å—Ç 2: –ê—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ===")
    
    p = pyaudio.PyAudio()
    
    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
    devices = list_audio_devices(p)
    for dev in devices:
        marker = "üëâ" if "ReSpeaker" in dev['name'] else "  "
        print(f"{marker} [{dev['index']}] {dev['name']}")
        print(f"      {dev['channels']}ch, {dev['sample_rate']}Hz")
    
    device_index = find_respeaker_device(p)
    if device_index is not None:
        print(f"\n‚úì ReSpeaker –∞—É–¥–∏–æ –Ω–∞–π–¥–µ–Ω: index={device_index}")
        p.terminate()
        return True
    else:
        print("\n‚úó ReSpeaker –∞—É–¥–∏–æ –ù–ï –Ω–∞–π–¥–µ–Ω!")
        p.terminate()
        return False


def test_vad_doa():
    """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ VAD –∏ DoA"""
    print("\n=== –¢–µ—Å—Ç 3: VAD –∏ DoA ===")
    print("–ì–æ–≤–æ—Ä–∏—Ç–µ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω. Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.\n")
    
    respeaker = ReSpeakerInterface()
    if not respeaker.connect():
        print("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
        return False
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    respeaker.configure_audio_processing(agc=True, noise_suppression=True)
    respeaker.set_vad_threshold(3.5)
    
    try:
        for i in range(50):  # 5 —Å–µ–∫—É–Ω–¥
            vad = respeaker.get_vad()
            doa = respeaker.get_doa()
            
            vad_status = "üé§ –†–ï–ß–¨" if vad else "üîá —Ç–∏—à–∏–Ω–∞"
            doa_str = f"{doa:3d}¬∞" if doa is not None else "---"
            
            print(f"\r{vad_status} | DoA: {doa_str}", end='', flush=True)
            time.sleep(0.1)
        
        print("\n\n‚úì VAD –∏ DoA —Ä–∞–±–æ—Ç–∞—é—Ç!")
        return True
        
    except KeyboardInterrupt:
        print("\n\n‚úì –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return True
    finally:
        respeaker.disconnect()


def test_led():
    """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ LED"""
    print("\n=== –¢–µ—Å—Ç 4: LED –∏–Ω–¥–∏–∫–∞—Ü–∏—è ===")
    
    try:
        from rob_box_voice.led_node import PixelRingLite
    except ImportError:
        print("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å PixelRingLite")
        return False
    
    pixel_ring = PixelRingLite()
    if not pixel_ring.connect():
        print("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ LED")
        return False
    
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LED —Ä–µ–∂–∏–º–æ–≤...")
    
    try:
        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è—Ä–∫–æ—Å—Ç—å
        pixel_ring.set_brightness(16)
        print("  –Ø—Ä–∫–æ—Å—Ç—å: 16/31")
        
        # –ö—Ä–∞—Å–Ω—ã–π
        print("  –ö—Ä–∞—Å–Ω—ã–π...", end='', flush=True)
        pixel_ring.mono(255, 0, 0)
        time.sleep(1)
        print(" ‚úì")
        
        # –ó–µ–ª—ë–Ω—ã–π
        print("  –ó–µ–ª—ë–Ω—ã–π...", end='', flush=True)
        pixel_ring.mono(0, 255, 0)
        time.sleep(1)
        print(" ‚úì")
        
        # –°–∏–Ω–∏–π
        print("  –°–∏–Ω–∏–π...", end='', flush=True)
        pixel_ring.mono(0, 0, 255)
        time.sleep(1)
        print(" ‚úì")
        
        # Think (–ø—É–ª—å—Å–∞—Ü–∏—è)
        print("  Think (–ø—É–ª—å—Å–∞—Ü–∏—è)...", end='', flush=True)
        pixel_ring.think()
        time.sleep(2)
        print(" ‚úì")
        
        # Speak (–≤—Ä–∞—â–µ–Ω–∏–µ)
        print("  Speak (–≤—Ä–∞—â–µ–Ω–∏–µ)...", end='', flush=True)
        pixel_ring.speak()
        time.sleep(2)
        print(" ‚úì")
        
        # –í—ã–∫–ª—é—á–∏—Ç—å
        print("  –í—ã–∫–ª—é—á–µ–Ω–∏–µ...", end='', flush=True)
        pixel_ring.off()
        time.sleep(0.5)
        print(" ‚úì")
        
        print("\n‚úì LED —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return True
        
    except KeyboardInterrupt:
        print("\n‚úó –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω")
        pixel_ring.off()
        return False
    except Exception as e:
        print(f"\n‚úó –û—à–∏–±–∫–∞: {e}")
        pixel_ring.off()
        return False


def main():
    print("=" * 60)
    print("  ReSpeaker Mic Array v2.0 - –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    print("=" * 60)
    
    tests = [
        ("USB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", test_usb_connection),
        ("–ê—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", test_audio_device),
        ("VAD –∏ DoA", test_vad_doa),
        ("LED –∏–Ω–¥–∏–∫–∞—Ü–∏—è", test_led),
    ]
    
    results = []
    
    for name, test_func in tests:
        try:
            result = test_func()
            results.append((name, result))
        except Exception as e:
            print(f"\n‚úó –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{name}': {e}")
            results.append((name, False))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤")
    print("=" * 60)
    
    for name, result in results:
        status = "‚úì PASS" if result else "‚úó FAIL"
        print(f"  {status}  {name}")
    
    passed = sum(1 for _, r in results if r)
    total = len(results)
    
    print(f"\n–ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! ReSpeaker –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        return 0
    else:
        print("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.")
        return 1


if __name__ == '__main__':
    sys.exit(main())

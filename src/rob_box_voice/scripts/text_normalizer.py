#!/usr/bin/env python3
"""
–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Silero TTS v4

–ü—Ä–æ–±–ª–µ–º—ã Silero TTS:
1. –ù–µ —á–∏—Ç–∞–µ—Ç —Ü–∏—Ñ—Ä—ã: "123" ‚Üí –º–æ–ª—á–∞–Ω–∏–µ
2. –ù–µ —á–∏—Ç–∞–µ—Ç –ª–∞—Ç–∏–Ω–∏—Ü—É: "ROBBOX" ‚Üí –º–æ–ª—á–∞–Ω–∏–µ  
3. –ù–µ —á–∏—Ç–∞–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã: "‚úÖ" ‚Üí –º–æ–ª—á–∞–Ω–∏–µ

–†–µ—à–µ–Ω–∏–µ:
- –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–∏—Ñ—Ä—ã –≤ —Å–ª–æ–≤–∞
- –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä—É–µ–º –ª–∞—Ç–∏–Ω–∏—Ü—É –≤ –∫–∏—Ä–∏–ª–ª–∏—Ü—É
- –£–±–∏—Ä–∞–µ–º markdown —Ä–∞–∑–º–µ—Ç–∫—É –æ—Ç DeepSeek
- –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã <CMD:.../>
- –ß–∏—Å—Ç–∏–º emoji –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
"""

import re
from typing import Dict, List


class TextNormalizer:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è TTS"""
    
    # –ú–∞–ø–ø–∏–Ω–≥ —Ü–∏—Ñ—Ä –Ω–∞ —Å–ª–æ–≤–∞
    DIGITS = {
        '0': '–Ω–æ–ª—å', '1': '–æ–¥–∏–Ω', '2': '–¥–≤–∞', '3': '—Ç—Ä–∏', '4': '—á–µ—Ç—ã—Ä–µ',
        '5': '–ø—è—Ç—å', '6': '—à–µ—Å—Ç—å', '7': '—Å–µ–º—å', '8': '–≤–æ—Å–µ–º—å', '9': '–¥–µ–≤—è—Ç—å'
    }
    
    TENS = {
        '10': '–¥–µ—Å—è—Ç—å', '11': '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å', '12': '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å', '13': '—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å',
        '14': '—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—å', '15': '–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å', '16': '—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å',
        '17': '—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å', '18': '–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å', '19': '–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—å',
        '20': '–¥–≤–∞–¥—Ü–∞—Ç—å', '30': '—Ç—Ä–∏–¥—Ü–∞—Ç—å', '40': '—Å–æ—Ä–æ–∫', '50': '–ø—è—Ç—å–¥–µ—Å—è—Ç',
        '60': '—à–µ—Å—Ç—å–¥–µ—Å—è—Ç', '70': '—Å–µ–º—å–¥–µ—Å—è—Ç', '80': '–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç', '90': '–¥–µ–≤—è–Ω–æ—Å—Ç–æ'
    }
    
    HUNDREDS = {
        '100': '—Å—Ç–æ', '200': '–¥–≤–µ—Å—Ç–∏', '300': '—Ç—Ä–∏—Å—Ç–∞', '400': '—á–µ—Ç—ã—Ä–µ—Å—Ç–∞',
        '500': '–ø—è—Ç—å—Å–æ—Ç', '600': '—à–µ—Å—Ç—å—Å–æ—Ç', '700': '—Å–µ–º—å—Å–æ—Ç',
        '800': '–≤–æ—Å–µ–º—å—Å–æ—Ç', '900': '–¥–µ–≤—è—Ç—å—Å–æ—Ç'
    }
    
    # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
    TECH_TERMS = {
        'ROBBOX': '–†–û–ë–ë–û–ö–°',
        'RobBox': '–†–û–ë–ë–û–ö–°',
        'robbox': '—Ä–æ–±–±–æ–∫—Å',
        'WiFi': '–≤–∞–π —Ñ–∞–π',
        'wifi': '–≤–∞–π —Ñ–∞–π',
        'LiDAR': '–ª–∏–¥–∞—Ä',
        'lidar': '–ª–∏–¥–∞—Ä',
        'LIDAR': '–ª–∏–¥–∞—Ä',
        'GPS': '–¥–∂–∏ –ø–∏ —ç—Å',
        'gps': '–¥–∂–∏ –ø–∏ —ç—Å',
        'IMU': '–∞–π —ç–º —é',
        'imu': '–∞–π —ç–º —é',
        'ROS': '—Ä–æ—Å',
        'ros': '—Ä–æ—Å',
        'LED': '–ª–µ–¥',
        'led': '–ª–µ–¥',
        'RGB': '—ç—Ä –¥–∂–∏ –±–∏',
        'rgb': '—ç—Ä –¥–∂–∏ –±–∏',
        'USB': '—é —ç—Å –±–∏',
        'usb': '—é —ç—Å –±–∏',
        'CPU': '—Ü—ç –ø—ç —É',
        'cpu': '—Ü—ç –ø—ç —É',
        'GPU': '–¥–∂–∏ –ø–∏ —é',
        'gpu': '–¥–∂–∏ –ø–∏ —é',
        'RAM': '—Ä–∞–º',
        'ram': '—Ä–∞–º',
        'Pi': '–ø–∞–π',
        'Raspberry': '—Ä–∞—Å–ø–±–µ—Ä—Ä–∏',
        'raspberry': '—Ä–∞—Å–ø–±–µ—Ä—Ä–∏',
        'Linux': '–ª–∏–Ω—É–∫—Å',
        'linux': '–ª–∏–Ω—É–∫—Å',
        'Ubuntu': '—É–±—É–Ω—Ç—É',
        'ubuntu': '—É–±—É–Ω—Ç—É',
        'VESC': '–≤–µ—Å–∫',
        'vesc': '–≤–µ—Å–∫',
        'AprilTag': '—ç–π–ø—Ä–∏–ª —Ç—ç–≥',
        'apriltag': '—ç–π–ø—Ä–∏–ª —Ç—ç–≥',
        'SLAM': '—Å–ª—ç–º',
        'slam': '—Å–ª—ç–º',
        'OK': '–æ–∫–µ–π',
        'ok': '–æ–∫–µ–π',
        'IP': '–∞–π –ø–∏',
        'ip': '–∞–π –ø–∏',
    }
    
    # Emoji ‚Üí —Ç–µ–∫—Å—Ç
    EMOJI_MAP = {
        '‚úÖ': '',  # –£–±–∏—Ä–∞–µ–º –≥–∞–ª–æ—á–∫–∏
        '‚ùå': '',  # –£–±–∏—Ä–∞–µ–º –∫—Ä–µ—Å—Ç–∏–∫–∏
        '‚ö†Ô∏è': '–≤–Ω–∏–º–∞–Ω–∏–µ',
        'üîã': '–±–∞—Ç–∞—Ä–µ—è',
        'ü§ñ': '—Ä–æ–±–æ—Ç',
        'üì°': '—Å–≤—è–∑—å',
        'üéØ': '',
        '‚è∏Ô∏è': '–ø–∞—É–∑–∞',
        '‚ñ∂Ô∏è': '',
        '‚èπÔ∏è': '—Å—Ç–æ–ø',
    }
    
    def normalize(self, text: str) -> str:
        """
        –ü–æ–ª–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è TTS
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å markdown, –∫–æ–º–∞–Ω–¥—ã, —Ü–∏—Ñ—Ä—ã, –ª–∞—Ç–∏–Ω–∏—Ü—É)
            
        Returns:
            –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≥–æ—Ç–æ–≤—ã–π –¥–ª—è TTS
        """
        # 1. –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã <CMD:.../>
        text = self.remove_commands(text)
        
        # 2. –£–¥–∞–ª—è–µ–º markdown —Ä–∞–∑–º–µ—Ç–∫—É
        text = self.remove_markdown(text)
        
        # 3. –ó–∞–º–µ–Ω—è–µ–º emoji
        text = self.replace_emoji(text)
        
        # 4. –ó–∞–º–µ–Ω—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
        text = self.replace_tech_terms(text)
        
        # 5. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞ –≤ —Å–ª–æ–≤–∞
        text = self.numbers_to_words(text)
        
        # 6. –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        text = re.sub(r'\s+', ' ', text).strip()
        
        return text
    
    def remove_commands(self, text: str) -> str:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –≤–∏–¥–∞ <CMD:.../>"""
        return re.sub(r'<CMD:[^>]+/>', '', text)
    
    def remove_markdown(self, text: str) -> str:
        """–£–¥–∞–ª–µ–Ω–∏–µ markdown —Ä–∞–∑–º–µ—Ç–∫–∏"""
        # **bold** ‚Üí bold
        text = re.sub(r'\*\*([^*]+)\*\*', r'\1', text)
        
        # *italic* ‚Üí italic
        text = re.sub(r'\*([^*]+)\*', r'\1', text)
        
        # __underline__ ‚Üí underline
        text = re.sub(r'__([^_]+)__', r'\1', text)
        
        # –°–ø–∏—Å–∫–∏: - item –∏–ª–∏ * item ‚Üí item
        text = re.sub(r'^[\-\*]\s+', '', text, flags=re.MULTILINE)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏: ## Header ‚Üí Header
        text = re.sub(r'^#+\s+', '', text, flags=re.MULTILINE)
        
        # –ö–æ–¥: `code` ‚Üí code
        text = re.sub(r'`([^`]+)`', r'\1', text)
        
        # –°—Å—ã–ª–∫–∏: [text](url) ‚Üí text
        text = re.sub(r'\[([^\]]+)\]\([^\)]+\)', r'\1', text)
        
        return text
    
    def replace_emoji(self, text: str) -> str:
        """–ó–∞–º–µ–Ω–∞ emoji –Ω–∞ —Ç–µ–∫—Å—Ç"""
        for emoji, replacement in self.EMOJI_MAP.items():
            text = text.replace(emoji, replacement)
        return text
    
    def replace_tech_terms(self, text: str) -> str:
        """–ó–∞–º–µ–Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—É"""
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–ª–∏–Ω–µ (—Å–Ω–∞—á–∞–ª–∞ –¥–ª–∏–Ω–Ω—ã–µ) —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —á–∞—Å—Ç–∏—á–Ω—ã—Ö –∑–∞–º–µ–Ω
        sorted_terms = sorted(self.TECH_TERMS.items(), key=lambda x: len(x[0]), reverse=True)
        
        for english, russian in sorted_terms:
            # Word boundary –¥–ª—è —Ç–æ—á–Ω–æ–π –∑–∞–º–µ–Ω—ã
            text = re.sub(r'\b' + re.escape(english) + r'\b', russian, text)
        
        return text
    
    def numbers_to_words(self, text: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —á–∏—Å–µ–ª –≤ —Å–ª–æ–≤–∞"""
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —á–∏—Å–ª–∞
        def convert_number(match):
            num_str = match.group(0)
            num = int(num_str)  # int() –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–∏—Ä–∞–µ—Ç –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏
            
            # –ü—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞ 0-9
            if 0 <= num <= 9:
                return self.DIGITS[str(num)]
            
            # 10-19
            if 10 <= num <= 19:
                return self.TENS[str(num)]
            
            # 20-99
            if 20 <= num <= 99:
                tens = (num // 10) * 10
                units = num % 10
                result = self.TENS[str(tens)]
                if units > 0:
                    result += ' ' + self.DIGITS[str(units)]
                return result
            
            # 100-999
            if 100 <= num <= 999:
                hundreds = (num // 100) * 100
                remainder = num % 100
                result = self.HUNDREDS[str(hundreds)]
                
                if remainder > 0:
                    if 10 <= remainder <= 19:
                        result += ' ' + self.TENS[str(remainder)]
                    elif remainder >= 20:
                        tens = (remainder // 10) * 10
                        units = remainder % 10
                        result += ' ' + self.TENS[str(tens)]
                        if units > 0:
                            result += ' ' + self.DIGITS[str(units)]
                    else:
                        result += ' ' + self.DIGITS[str(remainder)]
                
                return result
            
            # –î–ª—è –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª –ø—Ä–æ—Å—Ç–æ —á–∏—Ç–∞–µ–º –ø–æ —Ü–∏—Ñ—Ä–∞–º
            if num >= 1000:
                return ' '.join(self.DIGITS[str(int(d))] for d in str(num))
            
            return num_str
        
        # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ —á–∏—Å–ª–∞
        text = re.sub(r'\b\d+\b', convert_number, text)
        
        return text
    
    def clean_for_speech(self, text: str) -> List[str]:
        """
        –û—á–∏—Å—Ç–∫–∞ –∏ —Ä–∞–∑–±–∏–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–µ—á–∏
        
        Returns:
            –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≥–æ—Ç–æ–≤—ã—Ö –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
        """
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        text = self.normalize(text)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        sentences = re.split(r'[.!?]+', text)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∏ –æ—á–∏—â–∞–µ–º
        sentences = [s.strip() for s in sentences if s.strip()]
        
        return sentences


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    normalizer = TextNormalizer()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã
    test_cases = [
        "ROBBOX –≥–æ—Ç–æ–≤! WiFi –∞–∫—Ç–∏–≤–µ–Ω –Ω–∞ 192.168.1.1",
        "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ 3 –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –≤–ø–µ—Ä–µ–¥–∏",
        "‚úÖ –î–≤–∏–≥–∞—Ç–µ–ª–∏: VESC –¥—Ä–∞–π–≤–µ—Ä—ã –æ–Ω–ª–∞–π–Ω",
        "**–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º:** LiDAR –∞–∫—Ç–∏–≤–µ–Ω, IMU –∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω",
        "<CMD:stop/> –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è.",
        "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: 32¬∞C, –≤–ª–∞–∂–Ω–æ—Å—Ç—å: 45%",
        "–ë–∞—Ç–∞—Ä–µ—è: 78% –∑–∞—Ä—è–¥–∞",
        "- ‚úÖ –î–≤–∏–≥–∞—Ç–µ–ª–∏ –æ–Ω–ª–∞–π–Ω\n- ‚úÖ –ö–∞–º–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç",
        "Raspberry Pi 5 —Å Ubuntu 24.04",
        "AprilTag detection –≥–æ—Ç–æ–≤, SLAM –∞–∫—Ç–∏–≤–µ–Ω"
    ]
    
    print("=" * 60)
    print("–¢–ï–°–¢ –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò –¢–ï–ö–°–¢–ê –î–õ–Ø TTS")
    print("=" * 60)
    print()
    
    for i, test in enumerate(test_cases, 1):
        normalized = normalizer.normalize(test)
        print(f"{i}. –û—Ä–∏–≥–∏–Ω–∞–ª:")
        print(f"   {test}")
        print(f"   –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π:")
        print(f"   {normalized}")
        print()
    
    print("=" * 60)
    print("–ü–†–ò–ú–ï–† –û–ß–ò–°–¢–ö–ò –û–¢–í–ï–¢–ê DEEPSEEK")
    print("=" * 60)
    print()
    
    deepseek_answer = """–ó–∞–ø—É—Å–∫–∞—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º...

**–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º:**
- ‚úÖ –î–≤–∏–≥–∞—Ç–µ–ª–∏: VESC –¥—Ä–∞–π–≤–µ—Ä—ã –æ–Ω–ª–∞–π–Ω, —ç–Ω–∫–æ–¥–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç
- ‚úÖ LiDAR: LSLIDAR N10 –∞–∫—Ç–∏–≤–µ–Ω, —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ  
- ‚úÖ –ö–∞–º–µ—Ä–∞: OAK-D Lite –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, AprilTag detection –≥–æ—Ç–æ–≤
- ‚úÖ IMU: –≥–∏—Ä–æ—Å–∫–æ–ø –∏ –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä –∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω—ã
- ‚úÖ –ú–∏–∫—Ä–æ—Ñ–æ–Ω—ã: ReSpeaker –º–∞—Å—Å–∏–≤ —Å–ª—É—à–∞–µ—Ç
- ‚úÖ LED –º–∞—Ç—Ä–∏—Ü–∞: 400 –ø–∏–∫—Å–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞—é—Ç
- ‚úÖ –°–µ—Ç—å: WiFi —Ç–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∞–∫—Ç–∏–≤–Ω–∞
- ‚úÖ –ë–∞—Ç–∞—Ä–µ—è: 78% –∑–∞—Ä—è–¥–∞, —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ

**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
- –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–Ω—É—Ç—Ä–∏: 32¬∞C
- –í–ª–∞–∂–Ω–æ—Å—Ç—å: 45%
- –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π: 3
- –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: x=1.23–º, y=-0.45–º, Œ∏=45¬∞

–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"""
    
    print("–û—Ä–∏–≥–∏–Ω–∞–ª:")
    print(deepseek_answer)
    print()
    print("–û—á–∏—â–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è TTS:")
    sentences = normalizer.clean_for_speech(deepseek_answer)
    for i, sent in enumerate(sentences, 1):
        print(f"{i}. {sent}")

#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –Ω–æ–≤–æ–≥–æ record_yandex_voice.py —Å API v3.
–°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ—Ç –æ–¥–Ω—É —Ñ—Ä–∞–∑—É –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –µ—ë.
"""

import os
import sys
from pathlib import Path
import tempfile

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç–∞–º
sys.path.insert(0, str(Path(__file__).parent))

try:
    import grpc
    import sounddevice as sd
    import soundfile as sf
    import numpy as np
    from yandex.cloud.ai.tts.v3 import tts_pb2, tts_service_pb2_grpc
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
    print("  pip install -r requirements_yandex_v3.txt")
    sys.exit(1)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
api_key = os.getenv("YANDEX_API_KEY")
folder_id = os.getenv("YANDEX_FOLDER_ID")

if not api_key:
    print("‚ùå YANDEX_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    print("\n–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç—ã:")
    print("  source ../.env.secrets")
    sys.exit(1)

if not folder_id:
    print("‚ùå YANDEX_FOLDER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    print("\n–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç—ã:")
    print("  source ../.env.secrets")
    sys.exit(1)

# –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—Ä–∞–∑–∞
TEST_PHRASE = "–ü—Ä–∏–≤–µ—Ç! –Ø –†–û–ë–ë–û–ö–°—Ä–æ–º–±–æ—Ç. –ú–æ–∏ —Ä–µ—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã."

print("=" * 60)
print("–¢–ï–°–¢ YANDEX TTS API V3 (gRPC)")
print("=" * 60)
print(f"Voice: anton")
print(f"Speed: 0.4")
print(f"–¢–µ–∫—Å—Ç: {TEST_PHRASE}")
print("=" * 60)
print()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è gRPC –∫–∞–Ω–∞–ª–∞
print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ tts.api.cloud.yandex.net:443...")
channel = grpc.secure_channel(
    'tts.api.cloud.yandex.net:443',
    grpc.ssl_channel_credentials()
)
stub = tts_service_pb2_grpc.SynthesizerStub(channel)
print("‚úÖ –ö–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω")
print()

# –°–∏–Ω—Ç–µ–∑
print("üéôÔ∏è  –°–∏–Ω—Ç–µ–∑–∏—Ä—É—é —Ñ—Ä–∞–∑—É...")
request = tts_pb2.UtteranceSynthesisRequest(
    text=TEST_PHRASE,
    output_audio_spec=tts_pb2.AudioFormatOptions(
        container_audio=tts_pb2.ContainerAudio(
            container_audio_type=tts_pb2.ContainerAudio.WAV
        )
    ),
    hints=[
        tts_pb2.Hints(voice="anton"),
        tts_pb2.Hints(speed=0.4),
    ],
    loudness_normalization_type=tts_pb2.UtteranceSynthesisRequest.LUFS
)

try:
    responses = stub.UtteranceSynthesis(
        request,
        metadata=(('authorization', f'Api-Key {api_key}'),)
    )
    
    # –°–æ–±–∏—Ä–∞–µ–º –∞—É–¥–∏–æ
    audio_data = b""
    for response in responses:
        audio_data += response.audio_chunk.data
    
    if not audio_data:
        print("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç TTS")
        sys.exit(1)
    
    print(f"‚úÖ –°–∏–Ω—Ç–µ–∑ –∑–∞–≤–µ—Ä—à—ë–Ω! –†–∞–∑–º–µ—Ä: {len(audio_data)} –±–∞–π—Ç")
    print()
    
except grpc.RpcError as e:
    print(f"‚ùå gRPC –æ—à–∏–±–∫–∞: {e.code()} - {e.details()}")
    sys.exit(1)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as tmp:
    tmp_path = tmp.name
    tmp.write(audio_data)

print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {tmp_path}")
print()

# –ß—Ç–µ–Ω–∏–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è (–∫–∞–∫ –≤ –≤–∞—à–µ–º —Å–∫—Ä–∏–ø—Ç–µ)
print("üîä –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ...")
data, samplerate = sf.read(tmp_path)
print(f"   Sample rate: {samplerate} Hz")
print(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {len(data) / samplerate:.2f} —Å–µ–∫")
print(f"   –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {data.dtype}")

# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫–∞–∫ –≤ –≤–∞—à–µ–º play_audio_segment
if data.dtype != np.float32:
    print("   –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è int16 -> float32...")
    samples = data.astype(np.float32) / 32768.0
else:
    samples = data

print()

# –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
print("üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...")
try:
    device_info = sd.query_devices(None, "output")
    target_rate = int(device_info["default_samplerate"])
    print(f"   –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_info['name']}")
    print(f"   –ß–∞—Å—Ç–æ—Ç–∞: {target_rate} Hz")
    print()
    
    sd.play(samples, samplerate=target_rate, blocking=True)
    print("‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
    print(f"\n–ù–æ —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {tmp_path}")
    print("–ú–æ–∂–µ—Ç–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é:")
    print(f"  aplay {tmp_path}")

print()
print("=" * 60)
print("–†–ï–ó–£–õ–¨–¢–ê–¢")
print("=" * 60)
print("‚úÖ API v3 —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
print("‚úÖ –ì–æ–ª–æ—Å 'anton' –¥–æ—Å—Ç—É–ø–µ–Ω")
print("‚úÖ Speed 0.4 –ø—Ä–∏–º–µ–Ω—ë–Ω")
print("‚úÖ numpy –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
print()
print("üöÄ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ–ª–Ω—É—é –∑–∞–ø–∏—Å—å –¥–∞—Ç–∞—Å–µ—Ç–∞:")
print("   cd scripts/")
print("   ./generate_dataset.sh 200")
print("=" * 60)

# –û—á–∏—Å—Ç–∫–∞
Path(tmp_path).unlink(missing_ok=True)

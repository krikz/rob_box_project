#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç Yandex TTS API v3 —Å –î–í–£–ú–Ø —Ä–µ–∂–∏–º–∞–º–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:
1. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π (–±–µ–∑ –∏—Å–∫–∞–∂–µ–Ω–∏–π) - –∫–∞–∫ –∑–∞–¥—É–º–∞–Ω–æ Yandex
2. "–ë—É—Ä—É–Ω–¥—É–∫" (pitch shift 2x) - –∫–∞–∫ –≤ –≤–∞—à–µ–º —Å–∫—Ä–∏–ø—Ç–µ –Ω–∞ —Ä–æ–±–æ—Ç–µ

–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≥–æ–ª–æ—Å –∏–º–µ–Ω–Ω–æ —Ç–æ—Ç!
"""

import os
import sys
from pathlib import Path
import tempfile
import argparse

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç–∞–º
sys.path.insert(0, str(Path(__file__).parent))

try:
    import grpc
    import sounddevice as sd
    import soundfile as sf
    import numpy as np
    from yandex.cloud.ai.tts.v3 import tts_pb2, tts_service_pb2_grpc
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
    print("  pip install -r requirements_yandex_v3.txt")
    sys.exit(1)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
api_key = os.getenv("YANDEX_API_KEY")
folder_id = os.getenv("YANDEX_FOLDER_ID")

if not api_key:
    print("‚ùå YANDEX_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    print("\n–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç—ã:")
    print("  source ../.env.secrets")
    sys.exit(1)

if not folder_id:
    print("‚ùå YANDEX_FOLDER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    print("\n–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç—ã:")
    print("  source ../.env.secrets")
    sys.exit(1)

# –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—Ä–∞–∑–∞
TEST_PHRASE = "–ü—Ä–∏–≤–µ—Ç! –Ø –†–û–ë–ë–û–ö–° —Ä–æ–±–æ—Ç. –ú–æ–∏ —Ä–µ—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã."

def play_correct(audio_data):
    """–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ë–ï–ó –∏—Å–∫–∞–∂–µ–Ω–∏–π"""
    print("\nüéµ –†–ï–ñ–ò–ú 1: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ (–±–µ–∑ –∏—Å–∫–∞–∂–µ–Ω–∏–π)")
    print("   –ö–∞–∫ –∑–∞–¥—É–º–∞–Ω–æ Yandex TTS")
    print()
    
    # –ß–∏—Ç–∞–µ–º WAV —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —á–∞—Å—Ç–æ—Ç–æ–π
    import io
    data, original_rate = sf.read(io.BytesIO(audio_data))
    
    print(f"   –ò—Å—Ö–æ–¥–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ WAV: {original_rate} Hz")
    print(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {len(data) / original_rate:.2f} —Å–µ–∫")
    
    device_info = sd.query_devices(None, "output")
    target_rate = int(device_info["default_samplerate"])
    print(f"   –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_info['name']}")
    print(f"   –ß–∞—Å—Ç–æ—Ç–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {target_rate} Hz")
    
    # –ï—Å–ª–∏ —á–∞—Å—Ç–æ—Ç—ã —Ä–∞–∑–Ω—ã–µ - —Ä–µ—Å–µ–º–ø–ª–∏—Ä—É–µ–º
    if original_rate != target_rate:
        try:
            import librosa
            print(f"   –†–µ—Å–µ–º–ø–ª–∏–Ω–≥ {original_rate} ‚Üí {target_rate} Hz...")
            data = librosa.resample(data, orig_sr=original_rate, target_sr=target_rate)
        except ImportError:
            print("   ‚ö†Ô∏è  librosa –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–π —á–∞—Å—Ç–æ—Ç–µ")
    
    print("\n   ‚ñ∂Ô∏è  –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–∂—É...")
    sd.play(data, samplerate=target_rate, blocking=True)
    print("   ‚úÖ –ì–æ—Ç–æ–≤–æ!")

def play_chipmunk(audio_data):
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å '—ç—Ñ—Ñ–µ–∫—Ç–æ–º –±—É—Ä—É–Ω–¥—É–∫–∞' –ö–ê–ö –í –í–ê–®–ï–ú –°–ö–†–ò–ü–¢–ï"""
    print("\nüêøÔ∏è  –†–ï–ñ–ò–ú 2: –≠—Ñ—Ñ–µ–∫—Ç '–ë—É—Ä—É–Ω–¥—É–∫–∞' (–∫–∞–∫ –Ω–∞ —Ä–æ–±–æ—Ç–µ)")
    print("   –¢–æ—á–Ω–æ –∫–∞–∫ –≤ –≤–∞—à–µ–º play_audio_segment()")
    print()
    
    # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å—Ç–æ—Ç—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–∫–∞–∫ –≤ –≤–∞—à–µ–º —Å–∫—Ä–∏–ø—Ç–µ)
    device_info = sd.query_devices(None, "output")
    target_rate = int(device_info["default_samplerate"])
    print(f"   –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_info['name']}")
    print(f"   –ß–∞—Å—Ç–æ—Ç–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {target_rate} Hz")
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ö–ê–ö –í –í–ê–®–ï–ú –°–ö–†–ò–ü–¢–ï - –ë–ï–ó —á—Ç–µ–Ω–∏—è WAV –∑–∞–≥–æ–ª–æ–≤–∫–∞!
    print(f"   np.frombuffer() - —á–∏—Ç–∞–µ–º –±–∞–π—Ç—ã –Ω–∞–ø—Ä—è–º—É—é...")
    samples = np.frombuffer(audio_data, dtype=np.int16).astype(np.float32) / 32768.0
    
    # Pitch shift —Ä–∞—Å—á—ë—Ç
    # TTS –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 22050 Hz, –Ω–æ –º—ã –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –Ω–∞ target_rate
    pitch_shift = target_rate / 22050.0
    print(f"   Pitch shift: {pitch_shift:.2f}x (22050 ‚Üí {target_rate} Hz)")
    print(f"   –≠—Ñ—Ñ–µ–∫—Ç: –≥–æ–ª–æ—Å –≤ {pitch_shift:.1f}x –±—ã—Å—Ç—Ä–µ–µ –∏ –≤—ã—à–µ")
    
    print("\n   ‚ñ∂Ô∏è  –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–∂—É (—Å –∏—Å–∫–∞–∂–µ–Ω–∏–µ–º)...")
    sd.play(samples, samplerate=target_rate, blocking=True)
    print("   ‚úÖ –ì–æ—Ç–æ–≤–æ!")

def main():
    parser = argparse.ArgumentParser(
        description="–¢–µ—Å—Ç Yandex TTS v3 —Å –¥–≤—É–º—è —Ä–µ–∂–∏–º–∞–º–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument(
        "--mode",
        choices=["correct", "chipmunk", "both"],
        default="both",
        help="–†–µ–∂–∏–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: both)"
    )
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    api_key = os.getenv("YANDEX_API_KEY")
    folder_id = os.getenv("YANDEX_FOLDER_ID")
    
    if not api_key:
        print("‚ùå YANDEX_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("\n–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç—ã:")
        print("  source ../.env.secrets")
        sys.exit(1)
    
    if not folder_id:
        print("‚ùå YANDEX_FOLDER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("\n–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç—ã:")
        print("  source ../.env.secrets")
        sys.exit(1)

    
    print("=" * 60)
    print("–¢–ï–°–¢ YANDEX TTS API V3 (gRPC)")
    print("=" * 60)
    print(f"Voice: anton")
    print(f"Speed: 0.4")
    print(f"–¢–µ–∫—Å—Ç: {TEST_PHRASE}")
    print("=" * 60)
    print()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è gRPC –∫–∞–Ω–∞–ª–∞
    print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ tts.api.cloud.yandex.net:443...")
    channel = grpc.secure_channel(
        'tts.api.cloud.yandex.net:443',
        grpc.ssl_channel_credentials()
    )
    stub = tts_service_pb2_grpc.SynthesizerStub(channel)
    print("‚úÖ –ö–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω")
    print()
    
    # –°–∏–Ω—Ç–µ–∑
    print("üéôÔ∏è  –°–∏–Ω—Ç–µ–∑–∏—Ä—É—é —Ñ—Ä–∞–∑—É...")
    request = tts_pb2.UtteranceSynthesisRequest(
        text=TEST_PHRASE,
        output_audio_spec=tts_pb2.AudioFormatOptions(
            container_audio=tts_pb2.ContainerAudio(
                container_audio_type=tts_pb2.ContainerAudio.WAV
            )
        ),
        hints=[
            tts_pb2.Hints(voice="anton"),
            tts_pb2.Hints(speed=0.4),
        ],
        loudness_normalization_type=tts_pb2.UtteranceSynthesisRequest.LUFS
    )
    
    try:
        responses = stub.UtteranceSynthesis(
            request,
            metadata=(('authorization', f'Api-Key {api_key}'),)
        )
        
        # –°–æ–±–∏—Ä–∞–µ–º –∞—É–¥–∏–æ
        audio_data = b""
        for response in responses:
            audio_data += response.audio_chunk.data
        
        if not audio_data:
            print("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç TTS")
            sys.exit(1)
        
        print(f"‚úÖ –°–∏–Ω—Ç–µ–∑ –∑–∞–≤–µ—Ä—à—ë–Ω! –†–∞–∑–º–µ—Ä: {len(audio_data)} –±–∞–π—Ç")
        
    except grpc.RpcError as e:
        print(f"‚ùå gRPC –æ—à–∏–±–∫–∞: {e.code()} - {e.details()}")
        sys.exit(1)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as tmp:
        tmp_path = tmp.name
        tmp.write(audio_data)
    
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {tmp_path}")
    
    # –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    print("\n" + "=" * 60)
    
    if args.mode in ["correct", "both"]:
        play_correct(audio_data)
        if args.mode == "both":
            input("\n‚è∏Ô∏è  –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –±—É—Ä—É–Ω–¥—É–∫–∞...")
    
    if args.mode in ["chipmunk", "both"]:
        play_chipmunk(audio_data)
    
    print("\n" + "=" * 60)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢")
    print("=" * 60)
    print("‚úÖ API v3 —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    print("‚úÖ –ì–æ–ª–æ—Å 'anton' –¥–æ—Å—Ç—É–ø–µ–Ω")
    print("‚úÖ Speed 0.4 –ø—Ä–∏–º–µ–Ω—ë–Ω")
    print()
    
    if args.mode == "both":
        print("–í—ã —É—Å–ª—ã—à–∞–ª–∏ –û–ë–ê –≤–∞—Ä–∏–∞–Ω—Ç–∞:")
        print("1Ô∏è‚É£  –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π (–º–µ–¥–ª–µ–Ω–Ω—ã–π, –Ω–∏–∑–∫–∏–π)")
        print("2Ô∏è‚É£  '–ë—É—Ä—É–Ω–¥—É–∫' (–±—ã—Å—Ç—Ä—ã–π, –≤—ã—Å–æ–∫–∏–π) - –∫–∞–∫ –Ω–∞ —Ä–æ–±–æ—Ç–µ!")
        print()
        print("–ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –±–ª–∏–∂–µ –∫ –≥–æ–ª–æ—Å—É –≤–∞—à–µ–≥–æ ROBBOX?")
    elif args.mode == "chipmunk":
        print("–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥—ë–Ω —Ä–µ–∂–∏–º '–ë—É—Ä—É–Ω–¥—É–∫' - –∫–∞–∫ –Ω–∞ —Ä–æ–±–æ—Ç–µ WM8960")
        print("Pitch shift: 2.0x (22050 ‚Üí 44100 Hz)")
    else:
        print("–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥—ë–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ –∏—Å–∫–∞–∂–µ–Ω–∏–π")
    
    print()
    print("üöÄ –î–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞:")
    print("   ./generate_dataset.sh 200")
    print("=" * 60)
    
    # –û—á–∏—Å—Ç–∫–∞
    Path(tmp_path).unlink(missing_ok=True)

if __name__ == "__main__":
    main()

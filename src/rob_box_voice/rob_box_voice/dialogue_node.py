#!/usr/bin/env python3
"""
DialogueNode - LLM –¥–∏–∞–ª–æ–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å DeepSeek API (streaming)

–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞: /voice/stt/result (—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Ä–µ—á—å)
–ü—É–±–ª–∏–∫—É–µ—Ç: /voice/dialogue/response (JSON chunks –¥–ª—è TTS)
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç: DeepSeek API streaming + accent_replacer
"""

import rclpy
from rclpy.node import Node
from std_msgs.msg import String
import os
import json
import sys
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ scripts
scripts_path = Path(__file__).parent.parent / 'scripts'
sys.path.insert(0, str(scripts_path))

try:
    from openai import OpenAI
    from accent_replacer import AccentReplacer
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install openai")
    sys.exit(1)


class DialogueNode(Node):
    """ROS2 –Ω–æ–¥–∞ –¥–ª—è LLM –¥–∏–∞–ª–æ–≥–∞ —Å DeepSeek"""
    
    def __init__(self):
        super().__init__('dialogue_node')
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.declare_parameter('api_key', '')
        self.declare_parameter('base_url', 'https://api.deepseek.com')
        self.declare_parameter('model', 'deepseek-chat')
        self.declare_parameter('temperature', 0.7)
        self.declare_parameter('max_tokens', 500)
        self.declare_parameter('system_prompt_file', 'master_prompt_simple.txt')
        
        api_key = self.get_parameter('api_key').value
        if not api_key:
            api_key = os.getenv('DEEPSEEK_API_KEY')
        
        if not api_key:
            self.get_logger().error('‚ùå DEEPSEEK_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!')
            raise RuntimeError('DEEPSEEK_API_KEY required')
        
        base_url = self.get_parameter('base_url').value
        self.model = self.get_parameter('model').value
        self.temperature = self.get_parameter('temperature').value
        self.max_tokens = self.get_parameter('max_tokens').value
        
        # DeepSeek client
        self.client = OpenAI(api_key=api_key, base_url=base_url)
        
        # Accent replacer
        self.accent_replacer = AccentReplacer()
        stats = self.accent_replacer.get_stats()
        self.get_logger().info(f'üìñ –°–ª–æ–≤–∞—Ä—å —É–¥–∞—Ä–µ–Ω–∏–π: {stats["total_words"]} —Å–ª–æ–≤')
        
        # System prompt
        self.system_prompt = self._load_system_prompt()
        
        # –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
        self.conversation_history = []
        
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—É—é —Ä–µ—á—å
        self.stt_sub = self.create_subscription(
            String,
            '/voice/stt/result',
            self.stt_callback,
            10
        )
        
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ feedback –æ—Ç command_node (Phase 5)
        self.command_feedback_sub = self.create_subscription(
            String,
            '/voice/command/feedback',
            self.command_feedback_callback,
            10
        )
        
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ (JSON chunks)
        self.response_pub = self.create_publisher(String, '/voice/dialogue/response', 10)
        
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ TTS –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ (Phase 6 - –¥–æ–±–∞–≤–ª–µ–Ω–æ!)
        self.tts_pub = self.create_publisher(String, '/voice/tts/request', 10)
        
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–≤—É–∫–æ–≤—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ (Phase 4)
        self.sound_trigger_pub = self.create_publisher(String, '/voice/sound/trigger', 10)
        
        # –§–ª–∞–≥ —á—Ç–æ dialogue_node –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞–ø—Ä–æ—Å (—á—Ç–æ–±—ã –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å command feedback)
        self.dialogue_in_progress = False
        
        self.get_logger().info('‚úÖ DialogueNode –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
        self.get_logger().info(f'  Model: {self.model}')
        self.get_logger().info(f'  Temperature: {self.temperature}')
        self.get_logger().info(f'  Max tokens: {self.max_tokens}')
    
    def _load_system_prompt(self) -> str:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π system prompt"""
        prompt_file = self.get_parameter('system_prompt_file').value
        
        # –ò—â–µ–º –≤ share/rob_box_voice/prompts/
        from ament_index_python.packages import get_package_share_directory
        try:
            pkg_share = get_package_share_directory('rob_box_voice')
            prompt_path = os.path.join(pkg_share, 'prompts', prompt_file)
            
            with open(prompt_path, 'r', encoding='utf-8') as f:
                prompt = f.read()
            
            self.get_logger().info(f'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω prompt: {prompt_file} ({len(prompt)} –±–∞–π—Ç)')
            return prompt
        except Exception as e:
            self.get_logger().warn(f'‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å prompt: {e}')
            return "–¢—ã ROBBOX - –º–æ–±–∏–ª—å–Ω—ã–π —Ä–æ–±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –≤ JSON: {\"ssml\": \"<speak>...</speak>\"}"
    
    def stt_callback(self, msg: String):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–π —Ä–µ—á–∏"""
        user_message = msg.data.strip()
        if not user_message:
            return
        
        self.get_logger().info(f'üë§ User: {user_message}')
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —á—Ç–æ dialogue –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å
        self.dialogue_in_progress = True
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.conversation_history.append({
            "role": "user",
            "content": user_message
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π)
        if len(self.conversation_history) > 10:
            self.conversation_history = self.conversation_history[-10:]
        
        # –¢—Ä–∏–≥–≥–µ—Ä –∑–≤—É–∫–∞ "thinking" (Phase 4)
        self._trigger_sound('thinking')
        
        # –ó–∞–ø—Ä–æ—Å –∫ DeepSeek (streaming)
        self._ask_deepseek_streaming()
    
    def _ask_deepseek_streaming(self):
        """Streaming –∑–∞–ø—Ä–æ—Å –∫ DeepSeek —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º JSON chunks"""
        messages = [
            {"role": "system", "content": self.system_prompt},
            *self.conversation_history
        ]
        
        self.get_logger().info('ü§î –ó–∞–ø—Ä–æ—Å –∫ DeepSeek...')
        
        try:
            stream = self.client.chat.completions.create(
                model=self.model,
                messages=messages,
                temperature=self.temperature,
                max_tokens=self.max_tokens,
                stream=True
            )
            
            # –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ response
            full_response = ""
            current_chunk = ""
            brace_count = 0
            in_json = False
            chunk_count = 0
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ streaming chunks
            for chunk in stream:
                if chunk.choices[0].delta.content:
                    token = chunk.choices[0].delta.content
                    full_response += token
                    current_chunk += token
                    
                    # –ü–æ–¥—Å—á—ë—Ç —Å–∫–æ–±–æ–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü JSON
                    for char in token:
                        if char == '{':
                            brace_count += 1
                            in_json = True
                        elif char == '}':
                            brace_count -= 1
                    
                    # –ï—Å–ª–∏ —Å–∫–æ–±–∫–∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã - –ø–∞—Ä—Å–∏–º
                    if in_json and brace_count == 0:
                        json_text = current_chunk.strip()
                        
                        # –£–±–∏—Ä–∞–µ–º markdown ```json –µ—Å–ª–∏ –µ—Å—Ç—å
                        if json_text.startswith('```json'):
                            json_text = json_text.replace('```json', '').replace('```', '').strip()
                        
                        # –ü–∞—Ä—Å–∏–º JSON
                        try:
                            chunk_data = json.loads(json_text)
                            
                            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–≤—Ç–æ—É–¥–∞—Ä–µ–Ω–∏—è
                            if 'ssml' in chunk_data:
                                ssml = chunk_data['ssml']
                                ssml_with_accents = self.accent_replacer.add_accents(ssml)
                                chunk_data['ssml'] = ssml_with_accents
                                
                                # –ü—É–±–ª–∏–∫—É–µ–º chunk
                                chunk_count += 1
                                self.get_logger().info(f'üì§ Chunk {chunk_count}: {ssml[:50]}...')
                                
                                response_msg = String()
                                response_msg.data = json.dumps(chunk_data, ensure_ascii=False)
                                self.response_pub.publish(response_msg)
                                
                                # –ü—É–±–ª–∏–∫—É–µ–º –≤ TTS –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ (Phase 6)
                                self.tts_pub.publish(response_msg)
                                self.get_logger().info(f'üîä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ TTS: chunk {chunk_count}')
                            
                        except json.JSONDecodeError:
                            pass  # –ñ–¥—ë–º –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö
                        
                        # –°–±—Ä–æ—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ chunk
                        current_chunk = ""
                        in_json = False
                        brace_count = 0
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversation_history.append({
                "role": "assistant",
                "content": full_response
            })
            
            self.get_logger().info(f'‚úÖ DeepSeek –æ—Ç–≤–µ—Ç–∏–ª ({chunk_count} chunks)')
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            self.dialogue_in_progress = False
            
        except Exception as e:
            self.get_logger().error(f'‚ùå –û—à–∏–±–∫–∞ DeepSeek: {e}')
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            self.dialogue_in_progress = False
    
    def _trigger_sound(self, sound_name: str):
        """–¢—Ä–∏–≥–≥–µ—Ä –∑–≤—É–∫–æ–≤–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ (Phase 4)"""
        try:
            msg = String()
            msg.data = sound_name
            self.sound_trigger_pub.publish(msg)
            self.get_logger().debug(f'üîî –¢—Ä–∏–≥–≥–µ—Ä –∑–≤—É–∫–∞: {sound_name}')
        except Exception as e:
            self.get_logger().warn(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –∑–≤—É–∫–∞: {e}')
    
    def command_feedback_callback(self, msg: String):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ feedback –æ—Ç command_node (Phase 5)"""
        feedback = msg.data.strip()
        if not feedback:
            return
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º feedback –µ—Å–ª–∏ dialogue —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞–ø—Ä–æ—Å
        if self.dialogue_in_progress:
            self.get_logger().debug(f'üîá –ò–≥–Ω–æ—Ä command feedback (dialogue in progress): {feedback}')
            return
        
        self.get_logger().info(f'üì¢ Command feedback: {feedback}')
        
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å feedback –≤ TTS (–Ω–∞–ø—Ä—è–º—É—é –≤ response)
        response_json = {
            "ssml": f"<speak>{feedback}</speak>"
        }
        
        response_msg = String()
        response_msg.data = json.dumps(response_json, ensure_ascii=False)
        self.response_pub.publish(response_msg)


def main(args=None):
    rclpy.init(args=args)
    node = DialogueNode()
    
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()


if __name__ == '__main__':
    main()

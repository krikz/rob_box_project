#!/usr/bin/env python3
"""
DialogueNode - LLM –¥–∏–∞–ª–æ–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å DeepSeek API (streaming)

–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞: /voice/stt/result (—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Ä–µ—á—å)
–ü—É–±–ª–∏–∫—É–µ—Ç: /voice/dialogue/response (JSON chunks –¥–ª—è TTS)
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç: DeepSeek API streaming + accent_replacer
"""

import rclpy
from rclpy.node import Node
from std_msgs.msg import String
from std_srvs.srv import Empty
import os
import json
import sys
import time
import re
import subprocess
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ scripts
scripts_path = Path(__file__).parent.parent / 'scripts'
sys.path.insert(0, str(scripts_path))

try:
    from openai import OpenAI
    from accent_replacer import AccentReplacer
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install openai")
    sys.exit(1)


class DialogueNode(Node):
    """ROS2 –Ω–æ–¥–∞ –¥–ª—è LLM –¥–∏–∞–ª–æ–≥–∞ —Å DeepSeek"""
    
    def __init__(self):
        super().__init__('dialogue_node')
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.declare_parameter('api_key', '')
        self.declare_parameter('base_url', 'https://api.deepseek.com')
        self.declare_parameter('model', 'deepseek-chat')
        self.declare_parameter('temperature', 0.7)
        self.declare_parameter('max_tokens', 500)
        self.declare_parameter('system_prompt_file', 'master_prompt_simple.txt')
        self.declare_parameter('wake_words', ['—Ä–æ–±–æ–∫', '—Ä–æ–±–æ—Ç', '—Ä–æ–±–±–æ–∫—Å'])
        self.declare_parameter('silence_commands', ['–ø–æ–º–æ–ª—á', '–∑–∞–º–æ–ª—á', '—Ö–≤–∞—Ç–∏—Ç'])
        
        api_key = self.get_parameter('api_key').value
        if not api_key:
            api_key = os.getenv('DEEPSEEK_API_KEY')
        
        if not api_key:
            self.get_logger().error('‚ùå DEEPSEEK_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!')
            raise RuntimeError('DEEPSEEK_API_KEY required')
        
        base_url = self.get_parameter('base_url').value
        self.model = self.get_parameter('model').value
        self.temperature = self.get_parameter('temperature').value
        self.max_tokens = self.get_parameter('max_tokens').value
        
        # DeepSeek client
        self.client = OpenAI(api_key=api_key, base_url=base_url)
        
        # Accent replacer
        self.accent_replacer = AccentReplacer()
        stats = self.accent_replacer.get_stats()
        self.get_logger().info(f'üìñ –°–ª–æ–≤–∞—Ä—å —É–¥–∞—Ä–µ–Ω–∏–π: {stats["total_words"]} —Å–ª–æ–≤')
        
        # System prompt
        self.system_prompt = self._load_system_prompt()
        
        # –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
        self.conversation_history = []
        
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—É—é —Ä–µ—á—å
        self.stt_sub = self.create_subscription(
            String,
            '/voice/stt/result',
            self.stt_callback,
            10
        )
        
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ feedback –æ—Ç command_node (Phase 5)
        self.command_feedback_sub = self.create_subscription(
            String,
            '/voice/command/feedback',
            self.command_feedback_callback,
            10
        )
        
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ (JSON chunks)
        self.response_pub = self.create_publisher(String, '/voice/dialogue/response', 10)
        
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ TTS –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ (Phase 6 - –¥–æ–±–∞–≤–ª–µ–Ω–æ!)
        self.tts_pub = self.create_publisher(String, '/voice/tts/request', 10)
        
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–≤—É–∫–æ–≤—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ (Phase 4)
        self.sound_trigger_pub = self.create_publisher(String, '/voice/sound/trigger', 10)
        
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è control commands –≤ TTS
        self.tts_control_pub = self.create_publisher(String, '/voice/tts/control', 10)
        
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è state –¥–ª—è –¥—Ä—É–≥–∏—Ö –Ω–æ–¥ (command_node)
        self.state_pub = self.create_publisher(String, '/voice/dialogue/state', 10)
        
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å—Ä–æ—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –¥–∏–∞–ª–æ–≥—É (reflection)
        self.reflection_request_pub = self.create_publisher(String, '/perception/user_speech', 10)
        
        # ============ Internet Status Monitoring & Time Awareness ============
        self.internet_available = True  # Assume available by default
        self.current_time_info = None  # Store time information from perception
        
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ perception context –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏
        try:
            from rob_box_perception_msgs.msg import PerceptionEvent
            self.perception_sub = self.create_subscription(
                PerceptionEvent,
                '/perception/context_update',
                self._on_perception_update,
                10
            )
            self.get_logger().info('‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ /perception/context_update –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏')
        except ImportError:
            self.get_logger().warning('‚ö†Ô∏è  PerceptionEvent –Ω–µ –Ω–∞–π–¥–µ–Ω - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª—é—á–µ–Ω')
            self.perception_sub = None
        
        # ============ State Machine ============
        # IDLE -> LISTENING -> DIALOGUE -> SILENCED
        self.state = 'IDLE'  # IDLE | LISTENING | DIALOGUE | SILENCED
        self.silence_until = None  # Timestamp –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è SILENCED
        self.last_interaction_time = time.time()
        self.dialogue_timeout = 30.0  # —Å–µ–∫—É–Ω–¥ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ -> IDLE
        
        # Wake words –∏ silence commands –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        self.wake_words = self.get_parameter('wake_words').value
        self.silence_commands = self.get_parameter('silence_commands').value
        
        # Unsilence commands - –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ SILENCED —Ä–µ–∂–∏–º–∞
        self.unsilence_commands = [
            "–≥–æ–≤–æ—Ä–∏",
            "–≤–∫–ª—é—á",     # –≤–∫–ª—é—á–∏—Å—å, –≤–∫–ª—é—á–∞–π—Å—è
            "—Ä–∞–±–æ—Ç",     # —Ä–∞–±–æ—Ç–∞–π, —Ä–∞–±–æ—Ç–∞–π—Ç–µ
            "–æ—Ç–≤–µ—á",     # –æ—Ç–≤–µ—á–∞–π, –æ—Ç–≤–µ—á–∞–π—Ç–µ
            "—Ä–∞–∑–≥–æ–≤–∞—Ä",  # —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–π
        ]
        
        # –§–ª–∞–≥ —á—Ç–æ dialogue_node –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞–ø—Ä–æ—Å (—á—Ç–æ–±—ã –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å command feedback)
        self.dialogue_in_progress = False
        
        # –¢–µ–∫—É—â–∏–π streaming –∑–∞–ø—Ä–æ—Å (–¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è)
        self.current_stream = None
        
        # ============ RTABMap Control (Mapping Commands) ============
        # Service clients –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
        self.reset_memory_client = self.create_client(Empty, '/rtabmap/reset_memory')
        self.set_mode_mapping_client = self.create_client(Empty, '/rtabmap/set_mode_mapping')
        self.set_mode_localization_client = self.create_client(Empty, '/rtabmap/set_mode_localization')
        
        # Mapping intent patterns
        self.mapping_intents = {
            'start_mapping': [
                r'–∏—Å—Å–ª–µ–¥—É–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é',
                r'–Ω–∞—á–Ω–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ',
                r'—Å–æ–∑–¥–∞–π –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É',
                r'–Ω–∞—á–Ω–∏ –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—é',
                r'–Ω–æ–≤–∞—è –∫–∞—Ä—Ç–∞',
                r'–Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞',
                r'–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å',
            ],
            'continue_mapping': [
                r'–ø—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ',
                r'–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—é',
                r'–ø—Ä–æ–¥–æ–ª–∂–∞–π –∫–∞—Ä—Ç—É',
                r'–¥–æ–±–∞–≤—å –∫ –∫–∞—Ä—Ç–µ',
                r'–ø—Ä–æ–¥–æ–ª–∂–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã',
                r'–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
            ],
            'finish_mapping': [
                r'–∑–∞–∫–æ–Ω—á–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ',
                r'–∑–∞–≤–µ—Ä—à–∏—Ç—å –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—é',
                r'–ø–µ—Ä–µ–π–¥–∏ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏—é',
                r'—Ä–µ–∂–∏–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏',
                r'–∫–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞',
                r'—Ö–≤–∞—Ç–∏—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å',
                r'–∑–∞–∫–æ–Ω—á–∏—Ç—å',
            ],
        }
        
        # –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–¥–ª—è start_mapping)
        self.pending_confirmation = None  # 'start_mapping' –∏–ª–∏ None
        self.confirmation_time = None  # Timestamp –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        self.confirmation_timeout = 30.0  # —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ dialogue timeout
        self.timeout_timer = self.create_timer(5.0, self._check_dialogue_timeout)
        
        self.get_logger().info('‚úÖ DialogueNode –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
        self.get_logger().info(f'  Wake words: {", ".join(self.wake_words)}')
        self.get_logger().info(f'  Silence commands: {", ".join(self.silence_commands)}')
        self.get_logger().info(f'  Model: {self.model}')
        self.get_logger().info(f'  Temperature: {self.temperature}')
        self.get_logger().info(f'  Max tokens: {self.max_tokens}')
        self.get_logger().info(f'  Dialogue timeout: {self.dialogue_timeout}s')
    
    def _load_system_prompt(self) -> str:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π system prompt"""
        prompt_file = self.get_parameter('system_prompt_file').value
        
        # –ò—â–µ–º –≤ share/rob_box_voice/prompts/
        from ament_index_python.packages import get_package_share_directory
        try:
            pkg_share = get_package_share_directory('rob_box_voice')
            prompt_path = os.path.join(pkg_share, 'prompts', prompt_file)
            
            with open(prompt_path, 'r', encoding='utf-8') as f:
                prompt = f.read()
            
            self.get_logger().info(f'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω prompt: {prompt_file} ({len(prompt)} –±–∞–π—Ç)')
            return prompt
        except Exception as e:
            self.get_logger().warning(f'‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å prompt: {e}')
            return "–¢—ã ROBBOX - –º–æ–±–∏–ª—å–Ω—ã–π —Ä–æ–±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –≤ JSON: {\"ssml\": \"<speak>...</speak>\"}"
    
    # ============================================================
    # Wake Word & Silence Detection
    # ============================================================
    
    def _has_wake_word(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è wake word"""
        for wake_word in self.wake_words:
            if wake_word in text:
                return True
        return False
    
    def _remove_wake_word(self, text: str) -> str:
        """–£–±—Ä–∞—Ç—å wake word –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        for wake_word in self.wake_words:
            text = text.replace(wake_word, '').strip()
        return text
    
    def _is_silence_command(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –∑–∞–º–æ–ª—á–∞—Ç—å?"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º silence_commands –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        for command in self.silence_commands:
            if command in text:
                return True
        
        return False
    
    def _is_unsilence_command(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ silence —Ä–µ–∂–∏–º–∞?"""
        for command in self.unsilence_commands:
            if command in text:
                return True
        
        return False
    
    def _handle_silence_command(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã silence"""
        self.get_logger().warning('üîá SILENCE: –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TTS –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ SILENCED')
        
        # 1. –ü—Ä–µ—Ä–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π streaming
        if self.current_stream:
            try:
                # –ù–µ –º–æ–∂–µ–º –ø—Ä–µ—Ä–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –Ω–æ –º–æ–∂–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥
                self.current_stream = None
            except Exception as e:
                self.get_logger().error(f'–û—à–∏–±–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è stream: {e}')
        
        # 2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å STOP –≤ TTS
        stop_msg = String()
        stop_msg.data = 'STOP'
        self.tts_control_pub.publish(stop_msg)
        self.get_logger().info('  ‚Üí STOP –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ TTS')
        
        # 3. –ü–µ—Ä–µ–π—Ç–∏ –≤ SILENCED –Ω–∞ 5 –º–∏–Ω—É—Ç
        self.state = 'SILENCED'
        self.silence_until = time.time() + 300  # 5 –º–∏–Ω—É—Ç
        self._publish_state()
        self.get_logger().info('  ‚Üí State: SILENCED (5 –º–∏–Ω—É—Ç)')
        
        # 4. –ö–æ—Ä–æ—Ç–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (—á–µ—Ä–µ–∑ TTS –Ω–∞–ø—Ä—è–º—É—é)
        self._speak_simple('–•–æ—Ä–æ—à–æ, –º–æ–ª—á—É')
    
    def _speak_simple(self, text: str):
        """–ü—Ä–æ—Å—Ç–∞—è —Ä–µ—á—å –±–µ–∑ LLM"""
        response_json = {
            "ssml": f"<speak>{text}</speak>"
        }
        
        response_msg = String()
        response_msg.data = json.dumps(response_json, ensure_ascii=False)
        self.response_pub.publish(response_msg)
        # NOTE: –ù–ï –ø—É–±–ª–∏–∫—É–µ–º –≤ tts_pub - tts_node —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ response_pub
    
    def _publish_state(self):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è dialogue_node"""
        msg = String()
        msg.data = self.state
        self.state_pub.publish(msg)
    
    def _on_perception_update(self, msg):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏"""
        # Update internet status
        if hasattr(msg, 'internet_available'):
            was_available = self.internet_available
            self.internet_available = msg.internet_available
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            if was_available and not self.internet_available:
                self.get_logger().warning('‚ö†Ô∏è  –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ fallback —Ä–µ–∂–∏–º')
            elif not was_available and self.internet_available:
                self.get_logger().info('‚úÖ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º')
        
        # Update time information
        if hasattr(msg, 'time_context_json') and msg.time_context_json:
            try:
                self.current_time_info = json.loads(msg.time_context_json)
                self.get_logger().debug(f'üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è: {self.current_time_info.get("time_only", "N/A")}')
            except json.JSONDecodeError as e:
                self.get_logger().warning(f'‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ time_context_json: {e}')
    
    def _generate_fallback_response(self, user_message: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è fallback –æ—Ç–≤–µ—Ç–∞ –∫–æ–≥–¥–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        user_lower = user_message.lower()
        
        # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è fallback
        if any(word in user_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '—Ö–∞–π', 'hello']):
            return "–ü—Ä–∏–≤–µ—Ç! –ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É, –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã."
        elif any(word in user_lower for word in ['–∫–∞–∫ –¥–µ–ª–∞', '–∫–∞–∫ —Ç—ã', '—á—Ç–æ –¥–µ–ª–∞–µ—à—å']):
            return "–í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–µ–π—á–∞—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –ø—Ä–æ—Å—Ç—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏."
        elif any(word in user_lower for word in ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä']):
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞!"
        elif any(word in user_lower for word in ['–ø–æ–∫–∞', '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è', 'bye']):
            return "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
        else:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –Ø –º–æ–≥—É —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è."
    
    # ============================================================
    # Main Callback
    # ============================================================
    
    def stt_callback(self, msg: String):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–π —Ä–µ—á–∏ —Å State Machine"""
        user_message = msg.data.strip()
        if not user_message:
            return
        
        user_message_lower = user_message.lower()
        self.get_logger().info(f'üë§ User: {user_message} [State: {self.state}]')
        
        # ============ –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ SILENCE command ============
        if self._is_silence_command(user_message_lower):
            self.get_logger().warning('üîá SILENCE COMMAND –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!')
            self._handle_silence_command()
            return
        
        # ============ –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ SILENCED state ============
        if self.state == 'SILENCED':
            # –í SILENCED: –ø—Ä–æ–≤–µ—Ä—è–µ–º unsilence –∫–æ–º–∞–Ω–¥—ã —Å wake word
            if self._has_wake_word(user_message_lower):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –∫–æ–º–∞–Ω–¥–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ silence?
                if self._is_unsilence_command(user_message_lower):
                    self.get_logger().info('üîì Unsilence command –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ ‚Üí IDLE')
                    self.state = 'IDLE'
                    self.silence_until = None
                    self._publish_state()
                    self._speak_simple("–•–æ—Ä–æ—à–æ, —Å–ª—É—à–∞—é!")
                    return
                else:
                    # –û–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å wake word –≤ SILENCED
                    self.get_logger().info('üîì Wake word –≤ SILENCED ‚Üí —Ä–∞–∑—Ä–µ—à–∞–µ–º –¢–û–õ–¨–ö–û –∫–æ–º–∞–Ω–¥—ã')
                    # TODO: –ø–µ—Ä–µ–¥–∞—Ç—å –≤ command_node –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏/LED
                    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                    self.get_logger().info('  ‚Üí –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ command_node')
                    return
            else:
                self.get_logger().debug('üîá SILENCED: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (–Ω–µ—Ç wake word)')
                return
        
        # ============ –ü–†–ò–û–†–ò–¢–ï–¢ 3: Wake Word Detection ============
        if self.state == 'IDLE':
            # –í IDLE: —Ç—Ä–µ–±—É–µ—Ç—Å—è wake word
            if self._has_wake_word(user_message_lower):
                self.get_logger().info('üëã Wake word –æ–±–Ω–∞—Ä—É–∂–µ–Ω ‚Üí LISTENING')
                self.state = 'LISTENING'
                self._publish_state()
                self.last_interaction_time = time.time()
                
                # –£–±–∏—Ä–∞–µ–º wake word –∏–∑ —Ç–µ–∫—Å—Ç–∞
                user_message_clean = self._remove_wake_word(user_message_lower)
                if not user_message_clean:
                    # –¢–æ–ª—å–∫–æ wake word –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã/–≤–æ–ø—Ä–æ—Å–∞
                    self._speak_simple("–°–ª—É—à–∞—é!")
                    return
                
                user_message = user_message_clean
            else:
                self.get_logger().debug('‚è∏Ô∏è  IDLE: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (–Ω–µ—Ç wake word)')
                return
        
        # ============ State: LISTENING –∏–ª–∏ DIALOGUE ============
        self.state = 'DIALOGUE'
        self._publish_state()
        self.last_interaction_time = time.time()
        self.dialogue_in_progress = True
        
        # ============ –ü–†–ò–û–†–ò–¢–ï–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (start_mapping) ============
        if self.pending_confirmation:
            elapsed = time.time() - self.confirmation_time if self.confirmation_time else 999
            
            if elapsed > self.confirmation_timeout:
                # Timeout –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                self.get_logger().warning('‚è∞ Confirmation timeout ‚Üí –æ—Ç–º–µ–Ω–∞')
                self.pending_confirmation = None
                self.confirmation_time = None
                self._speak_simple("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                self.dialogue_in_progress = False
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç: –¥–∞/–Ω–µ—Ç
            if any(word in user_message_lower for word in ['–¥–∞', '–¥–∞–≤–∞–π', '–Ω–∞—á–∏–Ω–∞–π', '–Ω–∞—á–Ω–∏', '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', '–æ–∫', '—É–≥—É']):
                self.get_logger().info('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!')
                
                if self.pending_confirmation == 'start_mapping':
                    # –í—ã–ø–æ–ª–Ω–∏—Ç—å start_mapping
                    import asyncio
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    response = loop.run_until_complete(self._confirm_start_mapping())
                    loop.close()
                    
                    self.pending_confirmation = None
                    self.confirmation_time = None
                    self._speak_simple(response)
                    self.dialogue_in_progress = False
                    return
            
            elif any(word in user_message_lower for word in ['–Ω–µ—Ç', '–æ—Ç–º–µ–Ω–∞', '—Å—Ç–æ–ø', '–Ω–µ –Ω–∞–¥–æ', '–ø–µ—Ä–µ–¥—É–º–∞–ª']):
                self.get_logger().info('‚ùå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ')
                self.pending_confirmation = None
                self.confirmation_time = None
                self._speak_simple("–•–æ—Ä–æ—à–æ, –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                self.dialogue_in_progress = False
                return
            else:
                # –ù–µ—è—Å–Ω—ã–π –æ—Ç–≤–µ—Ç - –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–æ–ø—Ä–æ—Å
                self.get_logger().warning('‚ö†Ô∏è –ù–µ—è—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ')
                self._speak_simple("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç.")
                self.dialogue_in_progress = False
                return
        
        # ============ –ü–†–ò–û–†–ò–¢–ï–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ Mapping Commands ============
        mapping_intent = self._detect_mapping_intent(user_message_lower)
        if mapping_intent:
            self.get_logger().info(f'üó∫Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ mapping –∫–æ–º–∞–Ω–¥–∞: {mapping_intent}')
            
            # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É
            import asyncio
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            response = loop.run_until_complete(self._handle_mapping_command(mapping_intent, user_message))
            loop.close()
            
            if response:
                self._speak_simple(response)
                self.dialogue_in_progress = False
                return
        
        # ============ –ü–†–ò–û–†–ò–¢–ï–¢ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ ============
        if not self.internet_available:
            self.get_logger().warning('‚ö†Ô∏è  –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback')
            fallback_response = self._generate_fallback_response(user_message)
            self._speak_simple(fallback_response)
            self.dialogue_in_progress = False
            return
        
        # ============ –ü–†–ò–û–†–ò–¢–ï–¢ 7: –û–±—ã—á–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å LLM ============
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.conversation_history.append({
            "role": "user",
            "content": user_message
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π)
        if len(self.conversation_history) > 10:
            self.conversation_history = self.conversation_history[-10:]
        
        # –¢—Ä–∏–≥–≥–µ—Ä –∑–≤—É–∫–∞ "thinking" (Phase 4)
        self._trigger_sound('thinking')
        
        # –ó–∞–ø—Ä–æ—Å –∫ DeepSeek (streaming)
        self._ask_deepseek_streaming()
    
    def _build_system_prompt_with_context(self) -> str:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å system prompt —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        base_prompt = self.system_prompt
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –≤—Ä–µ–º–µ–Ω–∏, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if self.current_time_info:
            time_context = []
            time_context.append("\n# –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è\n")
            time_context.append(f"**–°–µ–π—á–∞—Å:** {self.current_time_info.get('time_only', 'N/A')}")
            time_context.append(f"**–î–∞—Ç–∞:** {self.current_time_info.get('date_only', 'N/A')}")
            time_context.append(f"**–ü–µ—Ä–∏–æ–¥ —Å—É—Ç–æ–∫:** {self.current_time_info.get('period_ru', 'N/A')}")
            time_context.append(f"**–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏:** {self.current_time_info.get('weekday_ru', 'N/A')}")
            
            time_info = '\n'.join(time_context)
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ä–æ–±–æ—Ç–∞, –ø–µ—Ä–µ–¥ —Ñ–æ—Ä–º–∞—Ç–æ–º –æ—Ç–≤–µ—Ç–∞
            prompt_parts = base_prompt.split('# –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞')
            if len(prompt_parts) == 2:
                return f"{prompt_parts[0]}{time_info}\n\n# –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞{prompt_parts[1]}"
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ–∫—Ü–∏—é, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
                return f"{base_prompt}\n{time_info}"
        
        return base_prompt
    
    def _ask_deepseek_streaming(self):
        """Streaming –∑–∞–ø—Ä–æ—Å –∫ DeepSeek —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º JSON chunks"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º system prompt —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏
        system_prompt_with_context = self._build_system_prompt_with_context()
        
        messages = [
            {"role": "system", "content": system_prompt_with_context},
            *self.conversation_history
        ]
        
        self.get_logger().info('ü§î –ó–∞–ø—Ä–æ—Å –∫ DeepSeek...')
        
        try:
            stream = self.client.chat.completions.create(
                model=self.model,
                messages=messages,
                temperature=self.temperature,
                max_tokens=self.max_tokens,
                stream=True
            )
            
            # –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ response
            full_response = ""
            current_chunk = ""
            brace_count = 0
            in_json = False
            chunk_count = 0
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ streaming chunks
            for chunk in stream:
                if chunk.choices[0].delta.content:
                    token = chunk.choices[0].delta.content
                    full_response += token
                    current_chunk += token
                    
                    # –ü–æ–¥—Å—á—ë—Ç —Å–∫–æ–±–æ–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü JSON
                    for char in token:
                        if char == '{':
                            brace_count += 1
                            in_json = True
                        elif char == '}':
                            brace_count -= 1
                    
                    # –ï—Å–ª–∏ —Å–∫–æ–±–∫–∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã - –ø–∞—Ä—Å–∏–º
                    if in_json and brace_count == 0:
                        json_text = current_chunk.strip()
                        
                        # –£–±–∏—Ä–∞–µ–º markdown ```json –µ—Å–ª–∏ –µ—Å—Ç—å
                        if json_text.startswith('```json'):
                            json_text = json_text.replace('```json', '').replace('```', '').strip()
                        
                        # –ü–∞—Ä—Å–∏–º JSON
                        try:
                            chunk_data = json.loads(json_text)
                            
                            # ============ –ü–†–û–í–ï–†–ö–ê: ask_reflection –∫–æ–º–∞–Ω–¥–∞ ============
                            if 'action' in chunk_data and chunk_data['action'] == 'ask_reflection':
                                question = chunk_data.get('question', '')
                                self.get_logger().warning(f'üîÅ DeepSeek –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∫ Reflection: "{question}"')
                                
                                # –ü—É–±–ª–∏–∫—É–µ–º –≤ /perception/user_speech –¥–ª—è reflection_node
                                reflection_msg = String()
                                reflection_msg.data = question
                                self.reflection_request_pub.publish(reflection_msg)
                                self.get_logger().info(f'  ‚Üí –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –¥–∏–∞–ª–æ–≥—É')
                                
                                # –°–±—Ä–æ—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ chunk
                                current_chunk = ""
                                in_json = False
                                brace_count = 0
                                continue  # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π chunk
                            
                            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–≤—Ç–æ—É–¥–∞—Ä–µ–Ω–∏—è
                            if 'ssml' in chunk_data:
                                ssml = chunk_data['ssml']
                                ssml_with_accents = self.accent_replacer.add_accents(ssml)
                                chunk_data['ssml'] = ssml_with_accents
                                
                                # –ü—É–±–ª–∏–∫—É–µ–º chunk
                                chunk_count += 1
                                self.get_logger().info(f'üì§ Chunk {chunk_count}: {ssml[:50]}...')
                                
                                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è (—Ä–æ–±–æ—Ç –≥–æ–≤–æ—Ä–∏—Ç)
                                self.last_interaction_time = time.time()
                                
                                response_msg = String()
                                response_msg.data = json.dumps(chunk_data, ensure_ascii=False)
                                self.response_pub.publish(response_msg)
                                # NOTE: –ù–ï –ø—É–±–ª–∏–∫—É–µ–º –≤ tts_pub - tts_node —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ response_pub
                                
                                self.get_logger().info(f'üîä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ TTS: chunk {chunk_count}')
                            
                        except json.JSONDecodeError:
                            pass  # –ñ–¥—ë–º –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö
                        
                        # –°–±—Ä–æ—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ chunk
                        current_chunk = ""
                        in_json = False
                        brace_count = 0
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversation_history.append({
                "role": "assistant",
                "content": full_response
            })
            
            self.get_logger().info(f'‚úÖ DeepSeek –æ—Ç–≤–µ—Ç–∏–ª ({chunk_count} chunks)')
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            self.dialogue_in_progress = False
            
        except Exception as e:
            self.get_logger().error(f'‚ùå –û—à–∏–±–∫–∞ DeepSeek: {e}')
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            self.dialogue_in_progress = False
    
    def _trigger_sound(self, sound_name: str):
        """–¢—Ä–∏–≥–≥–µ—Ä –∑–≤—É–∫–æ–≤–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ (Phase 4)"""
        try:
            msg = String()
            msg.data = sound_name
            self.sound_trigger_pub.publish(msg)
            self.get_logger().debug(f'üîî –¢—Ä–∏–≥–≥–µ—Ä –∑–≤—É–∫–∞: {sound_name}')
        except Exception as e:
            self.get_logger().warning(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –∑–≤—É–∫–∞: {e}')
    
    # ============================================================
    # Mapping Commands (RTABMap Control)
    # ============================================================
    
    def _detect_mapping_intent(self, text: str):
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å intent –¥–ª—è –∫–æ–º–∞–Ω–¥ –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
        text_lower = text.lower()
        
        for intent, patterns in self.mapping_intents.items():
            for pattern in patterns:
                if re.search(pattern, text_lower):
                    return intent
        
        return None
    
    async def _backup_rtabmap_db(self) -> bool:
        """–°–æ–∑–¥–∞—Ç—å backup —Ç–µ–∫—É—â–µ–π –ë–î RTABMap —á–µ—Ä–µ–∑ Docker"""
        try:
            # Docker exec –Ω–∞ Main Pi –¥–ª—è backup
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä rtabmap –¥–æ—Å—Ç—É–ø–µ–Ω
            result = subprocess.run([
                'docker', 'exec', 'rtabmap', 'bash', '-c',
                'mkdir -p /maps/backups && cp /maps/rtabmap.db /maps/backups/rtabmap_backup_$(date +%Y%m%d_%H%M%S).db && echo OK'
            ], capture_output=True, text=True, timeout=10)
            
            if result.returncode == 0 and 'OK' in result.stdout:
                self.get_logger().info('‚úÖ RTABMap backup —Å–æ–∑–¥–∞–Ω')
                return True
            else:
                self.get_logger().error(f'‚ùå Backup failed: {result.stderr}')
                return False
        except subprocess.TimeoutExpired:
            self.get_logger().error('‚ùå Backup timeout (10s)')
            return False
        except Exception as e:
            self.get_logger().error(f'‚ùå Backup error: {e}')
            return False
    
    async def _handle_mapping_command(self, intent: str, text: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
        self.get_logger().info(f'üó∫Ô∏è Mapping intent: {intent}')
        
        if intent == 'start_mapping':
            # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            self.pending_confirmation = 'start_mapping'
            self.confirmation_time = time.time()
            self._trigger_sound('confused')  # –ó–≤—É–∫ –≤–æ–ø—Ä–æ—Å–∞
            return "–ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ? –°—Ç–∞—Ä–∞—è –∫–∞—Ä—Ç–∞ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é."
        
        elif intent == 'continue_mapping':
            # –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤ mapping mode
            try:
                self.get_logger().info('  ‚Üí –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ SLAM mode...')
                future = self.set_mode_mapping_client.call_async(Empty.Request())
                # –ù–µ –∂–¥—ë–º –æ—Ç–≤–µ—Ç–∞ (async), –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                self._trigger_sound('cute')  # –ó–≤—É–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                return "–ü—Ä–æ–¥–æ–ª–∂–∞—é –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏. –î–æ–±–∞–≤–ª—è—é –Ω–æ–≤—ã–µ –æ–±–ª–∞—Å—Ç–∏ –∫ –∫–∞—Ä—Ç–µ."
            except Exception as e:
                self.get_logger().error(f'‚ùå –û—à–∏–±–∫–∞ set_mode_mapping: {e}')
                self._trigger_sound('confused')
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏–∏."
        
        elif intent == 'finish_mapping':
            # –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤ localization mode
            try:
                self.get_logger().info('  ‚Üí –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ Localization mode...')
                future = self.set_mode_localization_client.call_async(Empty.Request())
                # –ù–µ –∂–¥—ë–º –æ—Ç–≤–µ—Ç–∞ (async), –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                self._trigger_sound('cute')  # –ó–≤—É–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                return "–ó–∞–∫–∞–Ω—á–∏–≤–∞—é –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ. –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –≤ —Ä–µ–∂–∏–º –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≥–æ—Ç–æ–≤–æ–π –∫–∞—Ä—Ç–µ."
            except Exception as e:
                self.get_logger().error(f'‚ùå –û—à–∏–±–∫–∞ set_mode_localization: {e}')
                self._trigger_sound('confused')
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤ —Ä–µ–∂–∏–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏."
        
        return None
    
    async def _confirm_start_mapping(self) -> str:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ start_mapping - —Å–æ–∑–¥–∞—Ç—å backup –∏ reset –ë–î"""
        self.get_logger().warning('üó∫Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ start_mapping...')
        
        # 1. Backup
        backup_ok = await self._backup_rtabmap_db()
        if not backup_ok:
            self._trigger_sound('angry_2')
            return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∫–∞—Ä—Ç—ã. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."
        
        # 2. Reset memory
        try:
            self.get_logger().info('  ‚Üí Reset RTABMap memory...')
            future = self.reset_memory_client.call_async(Empty.Request())
            # –ù–µ –∂–¥—ë–º –æ—Ç–≤–µ—Ç–∞ (async)
            self._trigger_sound('cute')  # –ó–≤—É–∫ —É—Å–ø–µ—Ö–∞
            return "–ù–∞—á–∏–Ω–∞—é –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ. –°—Ç–∞—Ä–∞—è –∫–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏."
        except Exception as e:
            self.get_logger().error(f'‚ùå –û—à–∏–±–∫–∞ reset_memory: {e}')
            self._trigger_sound('angry_2')
            return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞–º—è—Ç—å RTABMap. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    def command_feedback_callback(self, msg: String):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ feedback –æ—Ç command_node (Phase 5)"""
        feedback = msg.data.strip()
        if not feedback:
            return
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º feedback –µ—Å–ª–∏ dialogue —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞–ø—Ä–æ—Å
        if self.dialogue_in_progress:
            self.get_logger().debug(f'üîá –ò–≥–Ω–æ—Ä command feedback (dialogue in progress): {feedback}')
            return
        
        self.get_logger().info(f'üì¢ Command feedback: {feedback}')
        
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å feedback –≤ TTS (–Ω–∞–ø—Ä—è–º—É—é –≤ response)
        response_json = {
            "ssml": f"<speak>{feedback}</speak>"
        }
        
        response_msg = String()
        response_msg.data = json.dumps(response_json, ensure_ascii=False)
        self.response_pub.publish(response_msg)
    
    def _check_dialogue_timeout(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–π–º-–∞—É—Ç –¥–∏–∞–ª–æ–≥–∞ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ IDLE –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        if self.state not in ['LISTENING', 'DIALOGUE']:
            return
        
        elapsed = time.time() - self.last_interaction_time
        if elapsed > self.dialogue_timeout:
            self.get_logger().info(f'‚è∞ Dialogue timeout ({elapsed:.1f}s) ‚Üí IDLE')
            self.state = 'IDLE'
            self._publish_state()


def main(args=None):
    rclpy.init(args=args)
    node = DialogueNode()
    
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()


if __name__ == '__main__':
    main()

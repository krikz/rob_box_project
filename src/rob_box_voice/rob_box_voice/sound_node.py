#!/usr/bin/env python3
"""
SoundNode - –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è: /voice/sound/trigger (String)
–ü—É–±–ª–∏–∫—É–µ—Ç: /voice/sound/state (String)
"""

import rclpy
from rclpy.node import Node
from std_msgs.msg import String

import os
import sys
import random
import threading
import time
import numpy as np
import sounddevice as sd
from typing import Dict, List, Optional
from contextlib import contextmanager
from pydub import AudioSegment
import io


@contextmanager
def ignore_stderr(enable=True):
    """–ü–æ–¥–∞–≤–∏—Ç—å ALSA –æ—à–∏–±–∫–∏ –æ—Ç PyAudio (–∫–∞–∫ –≤ audio_node)"""
    if enable:
        devnull = None
        try:
            devnull = os.open(os.devnull, os.O_WRONLY)
            stderr = os.dup(2)
            sys.stderr.flush()
            os.dup2(devnull, 2)
            try:
                yield
            finally:
                os.dup2(stderr, 2)
                os.close(stderr)
        finally:
            if devnull is not None:
                os.close(devnull)
    else:
        yield


class SoundNode(Node):
    """–ù–æ–¥–∞ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
    
    def __init__(self):
        super().__init__('sound_node')
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.declare_parameter('sound_pack_dir', '/ws/sound_pack')  # Docker path –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.declare_parameter('volume_db', -12.0)  # –†–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ (dB), -12dB ‚âà 24% –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        self.declare_parameter('trigger_animations', True)
        self.declare_parameter('animation_topic', '/animations/trigger')
        
        sound_pack_dir = self.get_parameter('sound_pack_dir').value
        # Expand ~ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å (–Ω–µ /ws/...)
        if sound_pack_dir.startswith('~'):
            self.sound_pack_dir = os.path.expanduser(sound_pack_dir)
        else:
            self.sound_pack_dir = sound_pack_dir
        self.volume_db = self.get_parameter('volume_db').value
        self.trigger_animations = self.get_parameter('trigger_animations').value
        self.animation_topic = self.get_parameter('animation_topic').value
        
        # Subscribers
        self.trigger_sub = self.create_subscription(
            String,
            '/voice/sound/trigger',
            self.trigger_callback,
            10
        )
        
        # Publishers
        self.state_pub = self.create_publisher(String, '/voice/sound/state', 10)
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Ç—Ä–∏–≥–≥–µ—Ä –∞–Ω–∏–º–∞—Ü–∏–π
        if self.trigger_animations:
            self.animation_pub = self.create_publisher(
                String,
                self.animation_topic,
                10
            )
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–≤—É–∫–æ–≤
        self.sounds: Dict[str, AudioSegment] = {}
        self.sound_groups: Dict[str, List[str]] = {
            'talk': ['talk_1', 'talk_2', 'talk_3', 'talk_4'],
            'angry': ['angry_1', 'angry_2'],
            'cute': ['cute', 'very_cute']
        }
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_playing = False
        self.current_sound: Optional[str] = None
        self.play_thread: Optional[threading.Thread] = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self.get_logger().info('SoundNode –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
        self.load_sounds()
    
    def load_sounds(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∑–≤—É–∫–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ sound_pack/"""
        if not os.path.exists(self.sound_pack_dir):
            self.get_logger().error(f'‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è sound_pack –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.sound_pack_dir}')
            self.publish_state('error_no_dir')
            return
        
        self.get_logger().info(f'üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–≤—É–∫–æ–≤ –∏–∑ {self.sound_pack_dir}...')
        
        loaded_count = 0
        for filename in os.listdir(self.sound_pack_dir):
            if filename.endswith('.mp3'):
                sound_name = filename.replace('.mp3', '')
                filepath = os.path.join(self.sound_pack_dir, filename)
                
                try:
                    # –ó–∞–≥—Ä—É–∑–∏—Ç—å MP3
                    audio = AudioSegment.from_mp3(filepath)
                    
                    # –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫—É –≥—Ä–æ–º–∫–æ—Å—Ç–∏
                    if self.volume_db != 0:
                        audio = audio + self.volume_db
                    
                    self.sounds[sound_name] = audio
                    loaded_count += 1
                    self.get_logger().info(f'  ‚úì {sound_name}: {len(audio)}ms, {audio.frame_rate}Hz')
                    
                except Exception as e:
                    self.get_logger().error(f'  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}')
        
        self.get_logger().info(f'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–≤—É–∫–æ–≤: {loaded_count}/{len(os.listdir(self.sound_pack_dir))}')
        
        if loaded_count > 0:
            self.publish_state('ready')
        else:
            self.publish_state('error_no_sounds')
    
    def trigger_callback(self, msg: String):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –∑–≤—É–∫–æ–≤–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞"""
        trigger = msg.data.strip()
        
        self.get_logger().info(f'üîî –¢—Ä–∏–≥–≥–µ—Ä: {trigger}')
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –∏–≥—Ä–∞–µ—Ç –ª–∏ —É–∂–µ –∑–≤—É–∫
        if self.is_playing:
            self.get_logger().warn(f'‚ö†Ô∏è –ó–≤—É–∫ —É–∂–µ –∏–≥—Ä–∞–µ—Ç ({self.current_sound}), –ø—Ä–æ–ø—É—Å–∫–∞—é {trigger}')
            return
        
        # –í—ã–±—Ä–∞—Ç—å –∑–≤—É–∫
        sound_name = self.select_sound(trigger)
        
        if sound_name is None:
            self.get_logger().warn(f'‚ö†Ô∏è –ó–≤—É–∫ –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ "{trigger}" –Ω–µ –Ω–∞–π–¥–µ–Ω')
            return
        
        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.play_thread = threading.Thread(
            target=self.play_sound_thread,
            args=(sound_name, trigger),
            daemon=True
        )
        self.play_thread.start()
    
    def select_sound(self, trigger: str) -> Optional[str]:
        """–í—ã–±—Ä–∞—Ç—å –∑–≤—É–∫ –ø–æ —Ç—Ä–∏–≥–≥–µ—Ä—É"""
        # –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if trigger in self.sounds:
            return trigger
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, trigger="talk" ‚Üí random –∏–∑ talk_1..4)
        if trigger in self.sound_groups:
            available = [name for name in self.sound_groups[trigger] if name in self.sounds]
            if available:
                return random.choice(available)
        
        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–π
        for sound_name in self.sounds.keys():
            if trigger.lower() in sound_name.lower():
                return sound_name
        
        return None
    
    def play_sound_thread(self, sound_name: str, trigger: str):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        self.is_playing = True
        self.current_sound = sound_name
        self.publish_state(f'playing_{sound_name}')
        
        try:
            self.get_logger().info(f'‚ñ∂Ô∏è –ò–≥—Ä–∞—é: {sound_name}')
            
            # –¢—Ä–∏–≥–≥–µ—Ä –∞–Ω–∏–º–∞—Ü–∏–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
            if self.trigger_animations:
                self.trigger_animation(trigger)
            
            # –ü–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ
            audio = self.sounds[sound_name]
            
            # ReSpeaker playback —Ç—Ä–µ–±—É–µ—Ç: 16kHz, stereo (2 channels)
            # (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —á–µ—Ä–µ–∑ /proc/asound/card1/stream0)
            if audio.frame_rate != 16000:
                self.get_logger().debug(f'–†–µ—Å–µ–º–ø–ª–∏–Ω–≥ {audio.frame_rate} Hz ‚Üí 16000 Hz')
                audio = audio.set_frame_rate(16000)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ numpy array
            samples = np.array(audio.get_array_of_samples())
            
            # Mono ‚Üí Stereo (ReSpeaker —Ç—Ä–µ–±—É–µ—Ç 2 –∫–∞–Ω–∞–ª–∞)
            if audio.channels == 1:
                samples = np.column_stack((samples, samples))
            elif audio.channels == 2:
                samples = samples.reshape((-1, 2))
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è float32
            samples = samples.astype(np.float32) / 32768.0
            
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ sounddevice (–∫–∞–∫ –≤ TTS)
            sd.play(samples, samplerate=16000, device=1)  # device 1 = ReSpeaker
            sd.wait()
            
            self.get_logger().info(f'‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {sound_name}')
            
            # Cleanup –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –±–µ–ª–æ–≥–æ —à—É–º–∞ –ø–æ—Å–ª–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            self.cleanup_playback_noise()
            
        except Exception as e:
            self.get_logger().error(f'‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è {sound_name}: {e}')
        
        finally:
            self.is_playing = False
            self.current_sound = None
            self.publish_state('ready')
    
    def cleanup_playback_noise(self):
        """
        –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –±–µ–ª–æ–≥–æ —à—É–º–∞ –ø–æ—Å–ª–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞.
        
        –ü—Ä–æ–±–ª–µ–º–∞: –ü–æ—Å–ª–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ ReSpeaker (USB Audio Class 1.0)
        –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –±–µ–ª—ã–π —à—É–º –∏–∑-–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ playback channel.
        
        –†–µ—à–µ–Ω–∏–µ:
        1. Properly close sounddevice stream
        2. Flush audio buffers
        3. Small delay –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ USB audio interface
        """
        try:
            # 1. Ensure sounddevice is fully stopped
            sd.stop()
            
            # 2. Small delay to let USB audio interface stabilize
            # ReSpeaker USB Audio Class 1.0 requires time to properly close playback path
            import time
            time.sleep(0.1)
            
            # 3. Log cleanup completion
            self.get_logger().debug('üßπ Playback noise cleanup completed')
            
        except Exception as e:
            self.get_logger().warn(f'‚ö†Ô∏è Noise cleanup failed: {e}')
    
    def trigger_animation(self, trigger: str):
        """–¢—Ä–∏–≥–≥–µ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∞–Ω–∏–º–∞—Ü–∏–∏"""
        # –ú–∞–ø–ø–∏–Ω–≥ –∑–≤—É–∫–æ–≤ –Ω–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
        animation_map = {
            'thinking': 'thinking',
            'surprise': 'surprise',
            'confused': 'confused',
            'angry': 'angry',
            'angry_1': 'angry',
            'angry_2': 'angry',
            'cute': 'happy',
            'very_cute': 'very_happy',
            'talk': 'talking'
        }
        
        animation = animation_map.get(trigger, trigger)
        
        try:
            msg = String()
            msg.data = animation
            self.animation_pub.publish(msg)
            self.get_logger().debug(f'üé¨ –¢—Ä–∏–≥–≥–µ—Ä –∞–Ω–∏–º–∞—Ü–∏–∏: {animation}')
        except Exception as e:
            self.get_logger().warn(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –∞–Ω–∏–º–∞—Ü–∏–∏: {e}')
    
    def publish_state(self, state: str):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–æ–¥—ã"""
        msg = String()
        msg.data = state
        self.state_pub.publish(msg)


def main(args=None):
    rclpy.init(args=args)
    node = SoundNode()
    
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()


if __name__ == '__main__':
    main()

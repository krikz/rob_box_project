#!/usr/bin/env python3
"""
STTNode - Speech-to-Text —Å Vosk
–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è: /audio/speech_audio (AudioData)
–ü—É–±–ª–∏–∫—É–µ—Ç: /voice/stt/result (String)
"""

import rclpy
from rclpy.node import Node
from rclpy.qos import QoSProfile, ReliabilityPolicy, DurabilityPolicy
from std_msgs.msg import String
from audio_common_msgs.msg import AudioData

import json
from typing import Optional
from vosk import Model, KaldiRecognizer


class STTNode(Node):
    """–ù–æ–¥–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ —Å –ø–æ–º–æ—â—å—é Vosk"""
    
    def __init__(self):
        super().__init__('stt_node')
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.declare_parameter('model_path', '/models/vosk-model-small-ru-0.22')
        self.declare_parameter('sample_rate', 16000)
        
        self.model_path = self.get_parameter('model_path').value
        self.sample_rate = self.get_parameter('sample_rate').value
        
        # QoS –¥–ª—è –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞
        audio_qos = QoSProfile(
            reliability=ReliabilityPolicy.BEST_EFFORT,
            durability=DurabilityPolicy.VOLATILE,
            depth=10
        )
        
        # Subscriber - —Å–ª—É—à–∞–µ–º —Ç–æ–ª—å–∫–æ speech_audio (—É–∂–µ –≥–æ—Ç–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã)
        self.audio_sub = self.create_subscription(
            AudioData,
            '/audio/speech_audio',
            self.speech_audio_callback,
            audio_qos
        )
        
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ TTS (—á—Ç–æ–±—ã –Ω–µ —Å–ª—ã—à–∞—Ç—å —Å–µ–±—è)
        self.tts_state_sub = self.create_subscription(
            String,
            '/voice/tts/state',
            self.tts_state_callback,
            10
        )
        
        # Publishers
        self.result_pub = self.create_publisher(String, '/voice/stt/result', 10)
        self.state_pub = self.create_publisher(String, '/voice/stt/state', 10)
        
        # Vosk –º–æ–¥–µ–ª—å –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å
        self.model: Optional[Model] = None
        self.recognizer: Optional[KaldiRecognizer] = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_robot_speaking = False  # –§–ª–∞–≥: —Ä–æ–±–æ—Ç –≥–æ–≤–æ—Ä–∏—Ç (–Ω–µ —Å–ª—É—à–∞—Ç—å!)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self.get_logger().info('STTNode –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
        self.initialize_vosk()
    
    def initialize_vosk(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ Vosk –º–æ–¥–µ–ª–∏"""
        try:
            self.get_logger().info(f'–ó–∞–≥—Ä—É–∑–∫–∞ Vosk –º–æ–¥–µ–ª–∏ –∏–∑ {self.model_path}...')
            self.model = Model(self.model_path)
            self.recognizer = KaldiRecognizer(self.model, self.sample_rate)
            self.recognizer.SetWords(True)  # –ü–æ–ª—É—á–∞—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É –ø–æ —Å–ª–æ–≤–∞–º
            self.get_logger().info('‚úì Vosk –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞')
            self.publish_state('ready')
        except Exception as e:
            self.get_logger().error(f'‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Vosk: {e}')
            self.publish_state('error')
    
    def tts_state_callback(self, msg: String):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è TTS - –Ω–µ —Å–ª—É—à–∞—Ç—å –∫–æ–≥–¥–∞ —Ä–æ–±–æ—Ç –≥–æ–≤–æ—Ä–∏—Ç!"""
        if msg.data in ['synthesizing', 'playing']:
            if not self.is_robot_speaking:
                self.get_logger().info('üîá –†–æ–±–æ—Ç –≥–æ–≤–æ—Ä–∏—Ç - —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ')
                self.is_robot_speaking = True
        elif msg.data in ['ready', 'idle']:
            if self.is_robot_speaking:
                self.get_logger().info('üéôÔ∏è –†–æ–±–æ—Ç –∑–∞–º–æ–ª—á–∞–ª - —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ')
                self.is_robot_speaking = False
    
    def speech_audio_callback(self, msg: AudioData):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö —Ñ—Ä–∞–∑ –æ—Ç audio_node
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –µ—Å—Ç—å –∑–∞–∫–æ–Ω—á–µ–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞ —Ä–µ—á–∏
        """
        if self.recognizer is None:
            return
        
        # –ù–ï –°–õ–£–®–ê–¢–¨ –∫–æ–≥–¥–∞ —Ä–æ–±–æ—Ç –≥–æ–≤–æ—Ä–∏—Ç (—Å–∞–º–æ–≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ!)
        if self.is_robot_speaking:
            self.get_logger().info('üîá –ò–≥–Ω–æ—Ä: —Ä–æ–±–æ—Ç –≥–æ–≤–æ—Ä–∏—Ç')
            return
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ bytes
        audio_bytes = bytes(msg.data)
        duration = len(audio_bytes) / (self.sample_rate * 2)  # 16-bit = 2 bytes
        
        self.get_logger().info(f'üé§ –ü–æ–ª—É—á–µ–Ω–∞ —Ñ—Ä–∞–∑–∞: {duration:.2f}—Å ({len(audio_bytes)} bytes)')
        self.publish_state('recognizing')
        
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ—Å—å –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä –≤ Vosk
        if self.recognizer.AcceptWaveform(audio_bytes):
            result = json.loads(self.recognizer.Result())
        else:
            result = json.loads(self.recognizer.FinalResult())
        
        text = result.get('text', '').strip()
        
        self.get_logger().info(f'üîç Vosk —Ä–µ–∑—É–ª—å—Ç–∞—Ç: "{text}" (–¥–ª–∏–Ω–∞={len(text)})')
        
        # –°–±—Ä–æ—Å–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Ñ—Ä–∞–∑—ã
        self.recognizer = KaldiRecognizer(self.model, self.sample_rate)
        self.recognizer.SetWords(True)
        
        # –§–ò–õ–¨–¢–†: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞ (—à—É–º —Ç–∏–ø–∞ "–∏ –∏")
        if text and len(text) >= 3:
            self.get_logger().info(f'‚úÖ –ü–†–ò–ù–Ø–¢–û: {text}')
            self.publish_result(text)
            self.publish_state('ready')
        elif text:
            self.get_logger().warn(f'‚ùå –û–¢–ö–õ–û–ù–ï–ù–û (–∫–æ—Ä–æ—Ç–∫–æ–µ): "{text}"')
            self.publish_state('ready')
        else:
            self.get_logger().warn(f'‚ùå –û–¢–ö–õ–û–ù–ï–ù–û (–ø—É—Å—Ç–æ–µ)')
            self.publish_state('ready')
    
    def publish_result(self, text: str):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
        msg = String()
        msg.data = text
        self.result_pub.publish(msg)
        self.get_logger().info(f'üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {text}')
    
    def publish_state(self, state: str):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–æ–¥—ã"""
        msg = String()
        msg.data = state
        self.state_pub.publish(msg)


def main(args=None):
    rclpy.init(args=args)
    node = STTNode()
    
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()


if __name__ == '__main__':
    main()

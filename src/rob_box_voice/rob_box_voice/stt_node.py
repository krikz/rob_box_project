#!/usr/bin/env python3
"""
STTNode - Speech-to-Text —Å Vosk
–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è: /audio/audio (AudioData), /audio/vad (Bool)
–ü—É–±–ª–∏–∫—É–µ—Ç: /voice/stt/result (String), /voice/stt/partial (String)
"""

import rclpy
from rclpy.node import Node
from rclpy.qos import QoSProfile, ReliabilityPolicy, DurabilityPolicy
from std_msgs.msg import Bool, String
from audio_common_msgs.msg import AudioData

import wave
import io
import json
from typing import Optional
from vosk import Model, KaldiRecognizer


class STTNode(Node):
    """–ù–æ–¥–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ —Å –ø–æ–º–æ—â—å—é Vosk"""
    
    def __init__(self):
        super().__init__('stt_node')
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.declare_parameter('model_path', '/models/vosk-model-small-ru-0.22')
        self.declare_parameter('sample_rate', 16000)
        self.declare_parameter('vad_timeout', 1.5)  # –°–µ–∫—É–Ω–¥—ã —Ç–∏—à–∏–Ω—ã –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self.declare_parameter('min_speech_duration', 0.5)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ä–µ—á–∏
        
        self.model_path = self.get_parameter('model_path').value
        self.sample_rate = self.get_parameter('sample_rate').value
        self.vad_timeout = self.get_parameter('vad_timeout').value
        self.min_speech_duration = self.get_parameter('min_speech_duration').value
        
        # QoS –¥–ª—è –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞
        audio_qos = QoSProfile(
            reliability=ReliabilityPolicy.BEST_EFFORT,
            durability=DurabilityPolicy.VOLATILE,
            depth=10
        )
        
        # Subscribers
        self.audio_sub = self.create_subscription(
            AudioData,
            '/audio/audio',
            self.audio_callback,
            audio_qos
        )
        self.vad_sub = self.create_subscription(
            Bool,
            '/audio/vad',
            self.vad_callback,
            10
        )
        
        # Publishers
        self.result_pub = self.create_publisher(String, '/voice/stt/result', 10)
        self.partial_pub = self.create_publisher(String, '/voice/stt/partial', 10)
        self.state_pub = self.create_publisher(String, '/voice/stt/state', 10)
        
        # Vosk –º–æ–¥–µ–ª—å –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å
        self.model: Optional[Model] = None
        self.recognizer: Optional[KaldiRecognizer] = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_speech_active = False
        self.speech_start_time: Optional[float] = None
        self.silence_start_time: Optional[float] = None
        self.audio_buffer = bytearray()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self.get_logger().info('STTNode –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
        self.initialize_vosk()
    
    def initialize_vosk(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ Vosk –º–æ–¥–µ–ª–∏"""
        try:
            self.get_logger().info(f'–ó–∞–≥—Ä—É–∑–∫–∞ Vosk –º–æ–¥–µ–ª–∏ –∏–∑ {self.model_path}...')
            self.model = Model(self.model_path)
            self.recognizer = KaldiRecognizer(self.model, self.sample_rate)
            self.recognizer.SetWords(True)  # –ü–æ–ª—É—á–∞—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É –ø–æ —Å–ª–æ–≤–∞–º
            self.get_logger().info('‚úì Vosk –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞')
            self.publish_state('ready')
        except Exception as e:
            self.get_logger().error(f'‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Vosk: {e}')
            self.publish_state('error')
    
    def vad_callback(self, msg: Bool):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ VAD (Voice Activity Detection)"""
        current_time = self.get_clock().now().nanoseconds / 1e9
        
        if msg.data:  # –†–µ—á—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞
            if not self.is_speech_active:
                # –ù–∞—á–∞–ª–æ —Ä–µ—á–∏
                self.is_speech_active = True
                self.speech_start_time = current_time
                self.silence_start_time = None
                self.get_logger().info('üéôÔ∏è –ù–∞—á–∞–ª–æ —Ä–µ—á–∏')
                self.publish_state('listening')
            else:
                # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–µ—á–∏ - —Å–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ —Ç–∏—à–∏–Ω—ã
                self.silence_start_time = None
        else:  # –¢–∏—à–∏–Ω–∞
            if self.is_speech_active:
                if self.silence_start_time is None:
                    # –ù–∞—á–∞–ª–æ —Ç–∏—à–∏–Ω—ã
                    self.silence_start_time = current_time
                else:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ —Ç–∏—à–∏–Ω—ã
                    silence_duration = current_time - self.silence_start_time
                    if silence_duration >= self.vad_timeout:
                        # –ö–æ–Ω–µ—Ü —Ä–µ—á–∏ - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                        self.finalize_recognition()
    
    def audio_callback(self, msg: AudioData):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞"""
        if not self.is_speech_active or self.recognizer is None:
            return
        
        # –î–æ–±–∞–≤–∏—Ç—å –∞—É–¥–∏–æ –≤ –±—É—Ñ–µ—Ä
        self.audio_buffer.extend(msg.data)
        
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ –≤ Vosk –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        if self.recognizer.AcceptWaveform(bytes(msg.data)):
            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–∫–æ–Ω–µ—Ü —Ñ—Ä–∞–∑—ã)
            result = json.loads(self.recognizer.Result())
            text = result.get('text', '').strip()
            if text:
                self.get_logger().info(f'üìù –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {text}')
                self.publish_result(text)
        else:
            # –ß–∞—Å—Ç–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–≤–æ –≤—Ä–µ–º—è —Ä–µ—á–∏)
            partial = json.loads(self.recognizer.PartialResult())
            text = partial.get('partial', '').strip()
            if text:
                self.get_logger().debug(f'üìù –ß–∞—Å—Ç–∏—á–Ω—ã–π: {text}')
                self.publish_partial(text)
    
    def finalize_recognition(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        if self.recognizer is None:
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã —Ä–µ—á–∏
        current_time = self.get_clock().now().nanoseconds / 1e9
        if self.speech_start_time is not None:
            speech_duration = current_time - self.speech_start_time
            if speech_duration < self.min_speech_duration:
                self.get_logger().info(f'‚ö†Ô∏è –†–µ—á—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è ({speech_duration:.2f}s), –∏–≥–Ω–æ—Ä–∏—Ä—É—é')
                self.reset_recognition()
                return
        
        # –ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        final_result = json.loads(self.recognizer.FinalResult())
        text = final_result.get('text', '').strip()
        
        if text:
            self.get_logger().info(f'‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: "{text}"')
            self.publish_result(text)
        else:
            self.get_logger().info('‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è')
        
        self.reset_recognition()
    
    def reset_recognition(self):
        """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
        self.is_speech_active = False
        self.speech_start_time = None
        self.silence_start_time = None
        self.audio_buffer.clear()
        
        # –°–±—Ä–æ—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–æ–≤–æ–π —Ñ—Ä–∞–∑—ã
        if self.recognizer is not None:
            self.recognizer = KaldiRecognizer(self.model, self.sample_rate)
            self.recognizer.SetWords(True)
        
        self.publish_state('ready')
    
    def publish_result(self, text: str):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
        msg = String()
        msg.data = text
        self.result_pub.publish(msg)
        self.get_logger().info(f'üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {text}')
    
    def publish_partial(self, text: str):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        msg = String()
        msg.data = text
        self.partial_pub.publish(msg)
    
    def publish_state(self, state: str):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–æ–¥—ã"""
        msg = String()
        msg.data = state
        self.state_pub.publish(msg)


def main(args=None):
    rclpy.init(args=args)
    node = STTNode()
    
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()


if __name__ == '__main__':
    main()

#!/usr/bin/env python3
"""
TTSNode - Text-to-Speech —Å Yandex Cloud TTS API v3 (gRPC) + Silero fallback

–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞: /voice/dialogue/response (JSON chunks)
–ü—É–±–ª–∏–∫—É–µ—Ç: /voice/audio/speech (AudioData)
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç:
  - Yandex Cloud TTS API v3 (gRPC, primary, anton voice)
  - Silero TTS v4 (fallback, –æ—Ñ–ª–∞–π–Ω, –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç)
"""

import io
import json
import os
import sys
import wave
from contextlib import contextmanager
from pathlib import Path

import grpc
import numpy as np
import rclpy
import sounddevice as sd
import torch
from audio_common_msgs.msg import AudioData
from rclpy.node import Node
from std_msgs.msg import String


@contextmanager
def ignore_stderr(enable=True):
    """–ü–æ–¥–∞–≤–∏—Ç—å ALSA –æ—à–∏–±–∫–∏ –æ—Ç sounddevice"""
    if enable:
        devnull = None
        try:
            devnull = os.open(os.devnull, os.O_WRONLY)
            stderr = os.dup(2)
            sys.stderr.flush()
            os.dup2(devnull, 2)
            try:
                yield
            finally:
                os.dup2(stderr, 2)
                os.close(stderr)
        finally:
            if devnull is not None:
                os.close(devnull)
    else:
        yield


# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º text_normalizer –∏ Yandex gRPC
scripts_path = Path(__file__).parent.parent / "scripts"
sys.path.insert(0, str(scripts_path))

try:
    from text_normalizer import normalize_for_tts
except ImportError:

    def normalize_for_tts(text):
        """Fallback –µ—Å–ª–∏ –Ω–µ—Ç normalizer"""
        return text


# Yandex Cloud TTS API v3 (gRPC)
try:
    from yandex.cloud.ai.tts.v3 import tts_pb2, tts_service_pb2_grpc

    YANDEX_GRPC_AVAILABLE = True
except ImportError:
    YANDEX_GRPC_AVAILABLE = False
    print("‚ö†Ô∏è  yandex-cloud-ml-sdk –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Silero fallback.")


class TTSNode(Node):
    """ROS2 –Ω–æ–¥–∞ –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ —Å YandexSpeechKit + Silero fallback"""

    def __init__(self):
        super().__init__("tts_node")

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.declare_parameter("provider", "yandex")  # yandex (primary) | silero (fallback)

        # Yandex Cloud TTS gRPC v3 (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ROBBOX –≥–æ–ª–æ—Å!)
        self.declare_parameter("yandex_api_key", "")
        self.declare_parameter("yandex_voice", "anton")  # anton (–û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –ì–û–õ–û–° –†–û–ë–ë–û–ö–°–ê!)
        self.declare_parameter("yandex_speed", 1)  # 0.1-3.0 (0.4 = –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –°–ö–û–†–û–°–¢–¨ –†–û–ë–ë–û–ö–°–ê!)

        # Silero TTS (fallback)
        self.declare_parameter("silero_speaker", "baya")  # aidar (male) | baya (female) | kseniya | xenia
        self.declare_parameter("silero_sample_rate", 24000)

        # –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.declare_parameter("chipmunk_mode", True)
        self.declare_parameter("pitch_shift", 2.0)  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è playback rate (2.0x = –±—ã—Å—Ç—Ä–æ)
        self.declare_parameter("normalize_text", True)
        self.declare_parameter("volume_db", -3.0)  # –ì—Ä–æ–º–∫–æ—Å—Ç—å –≤ dB (-3dB = 70%)

        # –ß–∏—Ç–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.provider = self.get_parameter("provider").value

        # Yandex Cloud TTS gRPC v3
        self.yandex_api_key = self.get_parameter("yandex_api_key").value or os.getenv("YANDEX_API_KEY", "")
        self.yandex_voice = self.get_parameter("yandex_voice").value
        self.yandex_speed = self.get_parameter("yandex_speed").value

        # Silero
        self.silero_speaker = self.get_parameter("silero_speaker").value
        self.silero_sample_rate = self.get_parameter("silero_sample_rate").value

        # –û–±—â–∏–µ
        self.chipmunk_mode = self.get_parameter("chipmunk_mode").value
        self.pitch_shift = self.get_parameter("pitch_shift").value
        self.normalize_text = self.get_parameter("normalize_text").value
        self.volume_db = self.get_parameter("volume_db").value

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º dB –≤ –ª–∏–Ω–µ–π–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
        self.volume_gain = 10.0 ** (self.volume_db / 20.0)

        # Callback –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        self.add_on_set_parameters_callback(self.parameters_callback)

        # Silero TTS –º–æ–¥–µ–ª—å (lazy loading - –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏)
        self.silero_model = None
        self.silero_loading = False
        self.device = torch.device("cpu")

        # –ï—Å–ª–∏ provider='silero' - –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ä–∞–∑—É
        if self.provider == "silero":
            self.get_logger().info("üîÑ Provider=silero ‚Üí –∑–∞–≥—Ä—É–∑–∫–∞ Silero TTS...")
            self._load_silero_model()

        # Yandex Cloud TTS gRPC v3 (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ROBBOX –≥–æ–ª–æ—Å anton!)
        self.yandex_channel = None
        self.yandex_stub = None
        if YANDEX_GRPC_AVAILABLE and self.yandex_api_key:
            try:
                self.yandex_channel = grpc.secure_channel(
                    "tts.api.cloud.yandex.net:443", grpc.ssl_channel_credentials()
                )
                self.yandex_stub = tts_service_pb2_grpc.SynthesizerStub(self.yandex_channel)
                self.get_logger().info("‚úÖ Yandex Cloud TTS gRPC v3 –ø–æ–¥–∫–ª—é—á–µ–Ω")
            except Exception as e:
                self.get_logger().warn(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Yandex gRPC: {e}")

        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ dialogue response (–æ—Ç dialogue_node)
        self.dialogue_sub = self.create_subscription(String, "/voice/dialogue/response", self.dialogue_callback, 10)

        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ TTS requests (–æ—Ç reflection_node –∏ –¥—Ä—É–≥–∏—Ö)
        self.tts_request_sub = self.create_subscription(
            String, "/voice/tts/request", self.dialogue_callback, 10  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ callback
        )

        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ control commands (STOP)
        self.control_sub = self.create_subscription(String, "/voice/tts/control", self.control_callback, 10)

        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∞—É–¥–∏–æ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.audio_pub = self.create_publisher(AudioData, "/voice/audio/speech", 10)
        self.state_pub = self.create_publisher(String, "/voice/tts/state", 10)

        # –§–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        self.stop_requested = False
        self.current_stream = None  # –¢–µ–∫—É—â–∏–π sounddevice stream

        # Dialogue session tracking (–¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å dialogue_node)
        self.current_dialogue_id = None
        self.processing_dialogue_id = None  # ID –¥–∏–∞–ª–æ–≥–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–∏–Ω—Ç–µ–∑–∞/–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è

        # –ü—É–±–ª–∏–∫—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.publish_state("ready")

        self.get_logger().info("‚úÖ TTSNode –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        self.get_logger().info("  Provider: Yandex Cloud TTS gRPC v3 (primary) + Silero (fallback)")
        self.get_logger().info(
            f"  Yandex gRPC v3: voice={self.yandex_voice} (ROBBOX original!), speed={self.yandex_speed}"
        )
        self.get_logger().info(f"  Silero: speaker={self.silero_speaker}, rate={self.silero_sample_rate} Hz")
        self.get_logger().info(f"  Volume: {self.volume_db:.1f} dB (gain: {self.volume_gain:.2f}x)")
        self.get_logger().info(f"  Chipmunk mode: {self.chipmunk_mode}")
        if self.chipmunk_mode:
            self.get_logger().info(f"  Pitch shift: {self.pitch_shift}x (—É—Å–∫–æ—Ä—è–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ)")

        if not self.yandex_stub:
            self.get_logger().warn("‚ö†Ô∏è  Yandex gRPC –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ Silero fallback")

    def _load_silero_model(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å Silero TTS –º–æ–¥–µ–ª—å (lazy loading)"""
        if self.silero_model is not None:
            return  # –£–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞

        if self.silero_loading:
            self.get_logger().warn("‚è≥ Silero –º–æ–¥–µ–ª—å —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
            return

        self.silero_loading = True
        self.get_logger().info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ Silero TTS v4...")

        # ‚ö° –ö–†–ò–¢–ò–ß–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø ARM64! ‚ö°
        torch.set_num_threads(4)
        torch._C._jit_set_profiling_mode(False)
        torch.set_grad_enabled(False)

        try:
            self.silero_model, _ = torch.hub.load(
                repo_or_dir="snakers4/silero-models", model="silero_tts", language="ru", speaker="v4_ru"
            )
            self.silero_model.to(self.device)
            self.get_logger().info("‚úÖ Silero TTS –∑–∞–≥—Ä—É–∂–µ–Ω (ARM64 –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)")
        except Exception as e:
            self.get_logger().error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Silero: {e}")
            self.silero_model = None
        finally:
            self.silero_loading = False

    def control_callback(self, msg: String):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ control commands (STOP)"""
        command = msg.data.strip().upper()

        if command == "STOP":
            self.get_logger().warn("üîá STOP command received - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ TTS")
            self._interrupt_playback()
            self.publish_state("stopped")

    def _interrupt_playback(self):
        """–ü—Ä–µ—Ä–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ (helper –º–µ—Ç–æ–¥)"""
        self.stop_requested = True

        # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π sounddevice stream –µ—Å–ª–∏ –µ—Å—Ç—å
        if self.current_stream:
            try:
                sd.stop()
                self.current_stream = None
            except Exception as e:
                self.get_logger().error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ stream: {e}")

    def dialogue_callback(self, msg: String):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ JSON chunks –æ—Ç dialogue_node"""
        try:
            chunk_data = json.loads(msg.data)

            if "ssml" not in chunk_data:
                self.get_logger().warn("‚ö† Chunk –±–µ–∑ SSML")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º dialogue_id (–µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
            dialogue_id = chunk_data.get("dialogue_id", None)

            if dialogue_id:
                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ - –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π
                if self.current_dialogue_id and dialogue_id != self.current_dialogue_id:
                    self.get_logger().warning(
                        f"üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω! "
                        f"–ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π ({self.current_dialogue_id[:8]}...) ‚Üí "
                        f"–Ω–æ–≤—ã–π ({dialogue_id[:8]}...)"
                    )
                    # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
                    self._interrupt_playback()

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π dialogue_id
                self.current_dialogue_id = dialogue_id

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å–ª–∏ –º—ã —Å–µ–π—á–∞—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–æ–π –¥–∏–∞–ª–æ–≥ - –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º chunk
                if self.processing_dialogue_id and self.processing_dialogue_id != dialogue_id:
                    self.get_logger().warning(
                        f"‚ùå –û—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π chunk (dialogue_id: {dialogue_id[:8]}..., "
                        f"–æ–∂–∏–¥–∞–µ—Ç—Å—è: {self.processing_dialogue_id[:8]}...)"
                    )
                    return

            ssml = chunk_data["ssml"]

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ SSML
            text = self._extract_text_from_ssml(ssml)

            if not text.strip():
                return

            self.get_logger().info(
                f'üîä TTS: {text[:50]}... (dialogue_id: {dialogue_id[:8] if dialogue_id else "None"}...)'
            )

            # –°–∏–Ω—Ç–µ–∑ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            self._synthesize_and_play(ssml, text, dialogue_id)

        except json.JSONDecodeError as e:
            self.get_logger().error(f"‚ùå JSON parse error: {e}")
        except Exception as e:
            self.get_logger().error(f"‚ùå TTS error: {e}")

    def _extract_text_from_ssml(self, ssml: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ SSML —Ç–µ–≥–æ–≤"""
        import re

        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ XML —Ç–µ–≥–∏
        text = re.sub(r"<[^>]+>", "", ssml)
        return text.strip()

    def _synthesize_and_play(self, ssml: str, text: str, dialogue_id: str = None):
        """–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ"""
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ stop –ø—Ä–∏ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
        self.stop_requested = False

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º processing_dialogue_id –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞
        if dialogue_id:
            self.processing_dialogue_id = dialogue_id
            self.get_logger().debug(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É dialogue_id: {dialogue_id[:8]}...")

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
        if self.normalize_text:
            text = normalize_for_tts(text)

        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º Yandex
            audio_np = None
            sample_rate = 16000  # Yandex –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 16kHz

            if self.yandex_stub:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ gRPC –∫–∞–Ω–∞–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                try:
                    self.publish_state("synthesizing")
                    self.get_logger().info("üîä –°–∏–Ω—Ç–µ–∑ —á–µ—Ä–µ–∑ Yandex Cloud TTS gRPC v3 (anton)...")
                    audio_np = self._synthesize_yandex(text)
                    sample_rate = 22050  # Yandex –æ–±—ã—á–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 22050 Hz –∏–ª–∏ 48000 Hz
                    # sample_rate —É–∂–µ –ø–æ–ª—É—á–µ–Ω –≤ _synthesize_yandex, –Ω–æ –ø–æ–∫–∞ –∑–∞—Ö–∞—Ä–¥–∫–æ–¥–∏–º
                except Exception as e:
                    self.get_logger().warn(f"‚ö†Ô∏è  Yandex gRPC –æ—Ç–≤–∞–ª–∏–ª—Å—è: {e}, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ Silero fallback")
                    audio_np = None

            # Fallback –Ω–∞ Silero –µ—Å–ª–∏ Yandex –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
            if audio_np is None:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º Silero –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ (lazy loading)
                if self.silero_model is None:
                    self.get_logger().warn("‚ö†Ô∏è  Silero –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∑–∞–≥—Ä—É–∂–∞—é —Å–µ–π—á–∞—Å...")
                    self._load_silero_model()

                if self.silero_model is None:
                    raise Exception("Silero fallback –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å!")

                self.publish_state("synthesizing")
                self.get_logger().info("üîä –°–∏–Ω—Ç–µ–∑ —á–µ—Ä–µ–∑ Silero (fallback)...")

                # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ SSML –¥–ª—è Silero
                if not ssml.startswith("<speak>"):
                    ssml_text = f'<speak><prosody pitch="medium">{text}</prosody></speak>'
                else:
                    ssml_text = ssml

                audio = self.silero_model.apply_tts(
                    ssml_text=ssml_text, speaker=self.silero_speaker, sample_rate=self.silero_sample_rate
                )
                audio_np = audio.numpy()
                sample_rate = self.silero_sample_rate  # 24000 Hz
                self.get_logger().info(f"‚úÖ Silero fallback —É—Å–ø–µ—à–µ–Ω: {len(audio_np)} samples @ {sample_rate} Hz")

            # –ü—É–±–ª–∏–∫—É–µ–º –≤ ROS topic
            self._publish_audio(audio_np)

            # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: dialogue_id –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è —Å–∏–Ω—Ç–µ–∑–∞?
            if dialogue_id and self.current_dialogue_id != dialogue_id:
                self.get_logger().warning(
                    f"‚ö†Ô∏è  Dialogue –∏–∑–º–µ–Ω–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è —Å–∏–Ω—Ç–µ–∑–∞! "
                    f"–û—Ç–º–µ–Ω—è–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ chunk "
                    f"(–±—ã–ª–æ: {dialogue_id[:8]}..., —Å–µ–π—á–∞—Å: {self.current_dialogue_id[:8]}...)"
                )
                self.processing_dialogue_id = None
                return

            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ª–æ–∫–∞–ª—å–Ω–æ
            self.publish_state("playing")

            # –í–ê–ñ–ù–û: ReSpeaker –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¢–û–õ–¨–ö–û 16kHz —Å—Ç–µ—Ä–µ–æ!
            target_rate = 16000

            # –î–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ ROBBOX –±—É—Ä—É–Ω–¥—É–∫–∞:
            # Yandex –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç WAV 22050 Hz + –∑–∞–≥–æ–ª–æ–≤–æ–∫
            # –í –æ—Ä–∏–≥–∏–Ω–∞–ª–µ: 22050 Hz ‚Üí 44100 Hz = 2x —É—Å–∫–æ—Ä–µ–Ω–∏–µ (–±—É—Ä—É–Ω–¥—É–∫!)
            # –£ –Ω–∞—Å ReSpeaker —Ç–æ–ª—å–∫–æ 16000 Hz, –ø–æ—ç—Ç–æ–º—É:
            # 1. –ß–∏—Ç–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º WAV)
            # 2. –†–µ—Å–µ–º–ø–ª–∏—Ä—É–µ–º –≤–Ω–∏–∑: —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ç–º–ø–ª–æ–≤ –≤ 2x
            #    –≠—Ç–æ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é –Ω–∞ 2x —Å–∫–æ—Ä–æ—Å—Ç–∏!

            # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ç–º–ø–ª–æ–≤ –≤ 2 —Ä–∞–∑–∞ (—ç—Ñ—Ñ–µ–∫—Ç —É—Å–∫–æ—Ä–µ–Ω–∏—è 2x)
            audio_accelerated = audio_np[::2]  # –ë–µ—Ä–µ–º –∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–æ–π —Å—ç–º–ø–ª
            self.get_logger().info(
                f"üêøÔ∏è  –≠—Ñ—Ñ–µ–∫—Ç –±—É—Ä—É–Ω–¥—É–∫–∞: {len(audio_np)} ‚Üí {len(audio_accelerated)} samples (2x —É—Å–∫–æ—Ä–µ–Ω–∏–µ)"
            )

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å
            audio_np_adjusted = audio_accelerated * self.volume_gain

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–æ–Ω–æ ‚Üí —Å—Ç–µ—Ä–µ–æ (ReSpeaker —Ç—Ä–µ–±—É–µ—Ç 2 –∫–∞–Ω–∞–ª–∞!)
            audio_stereo = np.column_stack((audio_np_adjusted, audio_np_adjusted))
            self.get_logger().info(f"üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: {len(audio_stereo)} frames, {target_rate} Hz, —Å—Ç–µ—Ä–µ–æ")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ STOP –î–û –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            if self.stop_requested:
                self.get_logger().warn("üîá STOP: –æ—Ç–º–µ–Ω–µ–Ω–æ –î–û –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è")
                self.publish_state("stopped")
                return

            # –ë–ª–æ–∫–∏—Ä—É—é—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            with ignore_stderr(enable=True):
                self.current_stream = True  # –ú–∞—Ä–∫–µ—Ä —á—Ç–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏–¥—ë—Ç
                sd.play(audio_stereo, target_rate, device=1, blocking=False)

                # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º stop_requested
                while sd.get_stream().active:
                    if self.stop_requested:
                        self.get_logger().warn("üîá STOP: –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ")
                        sd.stop()
                        break
                    sd.wait(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10ms

                self.current_stream = None

            # Cleanup –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –±–µ–ª–æ–≥–æ —à—É–º–∞ –ø–æ—Å–ª–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            self.cleanup_playback_noise()

            # –ó–∞–∫–æ–Ω—á–∏–ª–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            if self.stop_requested:
                self.publish_state("stopped")
                self.get_logger().warn("üîá –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ")
            else:
                self.publish_state("ready")
                self.get_logger().info("‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

            # –û—á–∏—â–∞–µ–º processing_dialogue_id –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            if dialogue_id and self.processing_dialogue_id == dialogue_id:
                self.processing_dialogue_id = None

        except Exception as e:
            self.get_logger().error(f"‚ùå Synthesis error: {e}")
            self.publish_state("ready")
            # –û—á–∏—â–∞–µ–º processing_dialogue_id –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if dialogue_id and self.processing_dialogue_id == dialogue_id:
                self.processing_dialogue_id = None

    def _synthesize_yandex(self, text: str) -> np.ndarray:
        """–°–∏–Ω—Ç–µ–∑ —á–µ—Ä–µ–∑ Yandex Cloud TTS gRPC API v3 (anton voice!)"""
        if not self.yandex_stub:
            raise Exception("Yandex gRPC stub –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º ROBBOX –∫–æ–¥–µ
        request = tts_pb2.UtteranceSynthesisRequest(
            text=text,
            output_audio_spec=tts_pb2.AudioFormatOptions(
                container_audio=tts_pb2.ContainerAudio(container_audio_type=tts_pb2.ContainerAudio.WAV)
            ),
            hints=[
                tts_pb2.Hints(voice=self.yandex_voice),  # anton!
                tts_pb2.Hints(speed=self.yandex_speed),  # 0.4
            ],
            loudness_normalization_type=tts_pb2.UtteranceSynthesisRequest.LUFS,
        )

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
            responses = self.yandex_stub.UtteranceSynthesis(
                request, metadata=(("authorization", f"Api-Key {self.yandex_api_key}"),)
            )

            # –°–æ–±–∏—Ä–∞–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–∏–º–∞
            audio_data = b""
            for response in responses:
                audio_data += response.audio_chunk.data

            if not audio_data:
                raise Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Yandex TTS")

            # –í–ê–ñ–ù–û! –≠—Ñ—Ñ–µ–∫—Ç –±—É—Ä—É–Ω–¥—É–∫–∞ ROBBOX –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Ç–∞–∫:
            # 1. Yandex –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç WAV —Ñ–∞–π–ª 22050 Hz
            # 2. –ß–∏—Ç–∞–µ–º –í–ï–°–¨ —Ñ–∞–π–ª (—Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º!) –∫–∞–∫ int16 PCM
            # 3. –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –Ω–∞ 44100 Hz (–≤ 2 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ)
            # –†–µ–∑—É–ª—å—Ç–∞—Ç: 2x pitch shift + –Ω–µ–±–æ–ª—å—à–æ–µ –∏—Å–∫–∞–∂–µ–Ω–∏–µ –æ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ = –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –ó–í–£–ö ROBBOX!

            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –°–´–†–´–ï –±–∞–π—Ç—ã (–≤–∫–ª—é—á–∞—è WAV –∑–∞–≥–æ–ª–æ–≤–æ–∫!) –∫–∞–∫ PCM
            audio_np = np.frombuffer(audio_data, dtype=np.int16).astype(np.float32) / 32768.0

            # –î–ª—è –ª–æ–≥–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–∏–º —Ä–µ–∞–ª—å–Ω—É—é —á–∞—Å—Ç–æ—Ç—É –∏–∑ WAV –∑–∞–≥–æ–ª–æ–≤–∫–∞
            try:
                with io.BytesIO(audio_data) as wav_file:
                    with wave.open(wav_file, "rb") as wav:
                        actual_sample_rate = wav.getframerate()
            except Exception:  # noqa: E722
                actual_sample_rate = 22050  # fallback

            self.get_logger().info(
                f"‚úÖ Yandex gRPC v3 (ROBBOX original!): {len(audio_np)} samples, source {actual_sample_rate} Hz"
            )

            return audio_np

        except grpc.RpcError as e:
            raise Exception(f"Yandex gRPC error: {e.code()} - {e.details()}")
        except Exception as e:
            raise Exception(f"Yandex synthesis error: {e}")

    def _publish_audio(self, audio_np: np.ndarray):
        """–ü—É–±–ª–∏–∫—É–µ—Ç –∞—É–¥–∏–æ –≤ ROS topic"""
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ int16 –¥–ª—è AudioData
        audio_int16 = (audio_np * 32767).astype(np.int16)

        msg = AudioData()
        msg.data = audio_int16.tobytes()

        self.audio_pub.publish(msg)

    def cleanup_playback_noise(self):
        """
        –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –±–µ–ª–æ–≥–æ —à—É–º–∞ –ø–æ—Å–ª–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è TTS.
        
        –ü—Ä–æ–±–ª–µ–º–∞: –ü–æ—Å–ª–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ ReSpeaker (USB Audio Class 1.0)
        –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –±–µ–ª—ã–π —à—É–º –∏–∑-–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ playback channel.
        
        –†–µ—à–µ–Ω–∏–µ:
        1. Properly close sounddevice stream
        2. Flush audio buffers
        3. Small delay –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ USB audio interface
        """
        try:
            # 1. Ensure sounddevice is fully stopped
            sd.stop()
            
            # 2. Small delay to let USB audio interface stabilize
            # ReSpeaker USB Audio Class 1.0 requires time to properly close playback path
            import time
            time.sleep(0.1)
            
            # 3. Log cleanup completion
            self.get_logger().debug('üßπ TTS playback noise cleanup completed')
            
        except Exception as e:
            self.get_logger().warn(f'‚ö†Ô∏è TTS noise cleanup failed: {e}')

    def publish_state(self, state: str):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è TTS"""
        msg = String()
        msg.data = state
        self.state_pub.publish(msg)

    def parameters_callback(self, params):
        """Callback –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã"""
        from rcl_interfaces.msg import SetParametersResult

        for param in params:
            if param.name == "volume_db":
                self.volume_db = param.value
                self.volume_gain = 10.0 ** (self.volume_db / 20.0)
                self.get_logger().info(
                    f"üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞: {self.volume_db:.1f} dB (gain: {self.volume_gain:.2f}x)"
                )
            elif param.name == "pitch_shift":
                self.pitch_shift = param.value
                self.get_logger().info(f"üêøÔ∏è Pitch shift –∏–∑–º–µ–Ω—ë–Ω: {self.pitch_shift}x")
            elif param.name == "chipmunk_mode":
                self.chipmunk_mode = param.value
                self.get_logger().info(f"üêøÔ∏è Chipmunk mode: {self.chipmunk_mode}")

        return SetParametersResult(successful=True)


def main(args=None):
    rclpy.init(args=args)
    node = TTSNode()

    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()


if __name__ == "__main__":
    main()

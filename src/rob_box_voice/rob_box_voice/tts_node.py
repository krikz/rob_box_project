#!/usr/bin/env python3
"""
TTSNode - Text-to-Speech —Å YandexSpeechKit + Silero fallback

–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞: /voice/dialogue/response (JSON chunks)
–ü—É–±–ª–∏–∫—É–µ—Ç: /voice/audio/speech (AudioData)
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç: 
  - YandexSpeechKit (primary, –æ–Ω–ª–∞–π–Ω, –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
  - Silero TTS v4 (fallback, –æ—Ñ–ª–∞–π–Ω, –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç)
"""

import rclpy
from rclpy.node import Node
from std_msgs.msg import String
from audio_common_msgs.msg import AudioData
import json
import torch
import sounddevice as sd
import numpy as np
from typing import Optional
import sys
import os
from pathlib import Path
from contextlib import contextmanager
import requests
from io import BytesIO


@contextmanager
def ignore_stderr(enable=True):
    """–ü–æ–¥–∞–≤–∏—Ç—å ALSA –æ—à–∏–±–∫–∏ –æ—Ç sounddevice"""
    if enable:
        devnull = None
        try:
            devnull = os.open(os.devnull, os.O_WRONLY)
            stderr = os.dup(2)
            sys.stderr.flush()
            os.dup2(devnull, 2)
            try:
                yield
            finally:
                os.dup2(stderr, 2)
                os.close(stderr)
        finally:
            if devnull is not None:
                os.close(devnull)
    else:
        yield

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º text_normalizer
scripts_path = Path(__file__).parent.parent / 'scripts'
sys.path.insert(0, str(scripts_path))

try:
    from text_normalizer import normalize_for_tts
except ImportError:
    def normalize_for_tts(text):
        """Fallback –µ—Å–ª–∏ –Ω–µ—Ç normalizer"""
        return text


class TTSNode(Node):
    """ROS2 –Ω–æ–¥–∞ –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ —Å YandexSpeechKit + Silero fallback"""
    
    def __init__(self):
        super().__init__('tts_node')
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.declare_parameter('provider', 'yandex')  # yandex (primary) | silero (fallback)
        
        # Yandex SpeechKit
        self.declare_parameter('yandex_folder_id', '')
        self.declare_parameter('yandex_api_key', '')
        self.declare_parameter('yandex_voice', 'alena')  # anton, alena, oksana, jane
        self.declare_parameter('yandex_emotion', 'good')  # neutral, good, evil
        self.declare_parameter('yandex_speed', 0.9)  # 0.1-3.0
        
        # Silero TTS (fallback)
        self.declare_parameter('silero_speaker', 'baya')  # aidar (male) | baya (female) | kseniya | xenia
        self.declare_parameter('silero_sample_rate', 24000)
        
        # –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.declare_parameter('chipmunk_mode', True)
        self.declare_parameter('pitch_shift', 2.0)  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è playback rate (2.0x = –±—ã—Å—Ç—Ä–æ)
        self.declare_parameter('normalize_text', True)
        self.declare_parameter('volume_db', -3.0)  # –ì—Ä–æ–º–∫–æ—Å—Ç—å –≤ dB (-3dB = 70%)
        
        # –ß–∏—Ç–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.provider = self.get_parameter('provider').value
        
        # Yandex
        self.yandex_folder_id = self.get_parameter('yandex_folder_id').value or os.getenv('YANDEX_FOLDER_ID', '')
        self.yandex_api_key = self.get_parameter('yandex_api_key').value or os.getenv('YANDEX_API_KEY', '')
        self.yandex_voice = self.get_parameter('yandex_voice').value
        self.yandex_emotion = self.get_parameter('yandex_emotion').value
        self.yandex_speed = self.get_parameter('yandex_speed').value
        
        # Silero
        self.silero_speaker = self.get_parameter('silero_speaker').value
        self.silero_sample_rate = self.get_parameter('silero_sample_rate').value
        
        # –û–±—â–∏–µ
        self.chipmunk_mode = self.get_parameter('chipmunk_mode').value
        self.pitch_shift = self.get_parameter('pitch_shift').value
        self.normalize_text = self.get_parameter('normalize_text').value
        self.volume_db = self.get_parameter('volume_db').value
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º dB –≤ –ª–∏–Ω–µ–π–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
        self.volume_gain = 10.0 ** (self.volume_db / 20.0)
        
        # Callback –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        self.add_on_set_parameters_callback(self.parameters_callback)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ Silero TTS (fallback, –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤)
        self.get_logger().info('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ Silero TTS v4 (fallback)...')
        self.device = torch.device('cpu')
        
        # ‚ö° –ö–†–ò–¢–ò–ß–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø ARM64! ‚ö°
        torch.set_num_threads(4)
        torch._C._jit_set_profiling_mode(False)
        torch.set_grad_enabled(False)
        
        try:
            self.silero_model, _ = torch.hub.load(
                repo_or_dir='snakers4/silero-models',
                model='silero_tts',
                language='ru',
                speaker='v4_ru'
            )
            self.silero_model.to(self.device)
            self.get_logger().info('‚úÖ Silero TTS –∑–∞–≥—Ä—É–∂–µ–Ω (fallback, ARM64 –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)')
        except Exception as e:
            self.get_logger().error(f'‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Silero: {e}')
            self.silero_model = None
        
        # Yandex SpeechKit URL
        self.yandex_url = 'https://tts.api.cloud.yandex.net/speech/v1/tts:synthesize'
        
        # Yandex SpeechKit URL
        self.yandex_url = 'https://tts.api.cloud.yandex.net/speech/v1/tts:synthesize'
        
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ dialogue response
        self.dialogue_sub = self.create_subscription(
            String,
            '/voice/dialogue/response',
            self.dialogue_callback,
            10
        )
        
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∞—É–¥–∏–æ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.audio_pub = self.create_publisher(AudioData, '/voice/audio/speech', 10)
        self.state_pub = self.create_publisher(String, '/voice/tts/state', 10)
        
        # –ü—É–±–ª–∏–∫—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.publish_state('ready')
        
        self.get_logger().info('‚úÖ TTSNode –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
        self.get_logger().info(f'  Provider: Yandex (primary) + Silero (fallback)')
        self.get_logger().info(f'  Yandex: voice={self.yandex_voice}, emotion={self.yandex_emotion}, speed={self.yandex_speed}')
        self.get_logger().info(f'  Silero: speaker={self.silero_speaker}, rate={self.silero_sample_rate} Hz')
        self.get_logger().info(f'  Volume: {self.volume_db:.1f} dB (gain: {self.volume_gain:.2f}x)')
        self.get_logger().info(f'  Chipmunk mode: {self.chipmunk_mode}')
        if self.chipmunk_mode:
            self.get_logger().info(f'  Pitch shift: {self.pitch_shift}x (—É—Å–∫–æ—Ä—è–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ)')
        
        if not self.yandex_api_key or not self.yandex_folder_id:
            self.get_logger().warn('‚ö†Ô∏è  Yandex credentials –Ω–µ –∑–∞–¥–∞–Ω—ã - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ Silero fallback')
    
    def dialogue_callback(self, msg: String):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ JSON chunks –æ—Ç dialogue_node"""
        try:
            chunk_data = json.loads(msg.data)
            
            if 'ssml' not in chunk_data:
                self.get_logger().warn('‚ö† Chunk –±–µ–∑ SSML')
                return
            
            ssml = chunk_data['ssml']
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ SSML
            text = self._extract_text_from_ssml(ssml)
            
            if not text.strip():
                return
            
            self.get_logger().info(f'üîä TTS: {text[:50]}...')
            
            # –°–∏–Ω—Ç–µ–∑ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            self._synthesize_and_play(ssml, text)
            
        except json.JSONDecodeError as e:
            self.get_logger().error(f'‚ùå JSON parse error: {e}')
        except Exception as e:
            self.get_logger().error(f'‚ùå TTS error: {e}')
    
    def _extract_text_from_ssml(self, ssml: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ SSML —Ç–µ–≥–æ–≤"""
        import re
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ XML —Ç–µ–≥–∏
        text = re.sub(r'<[^>]+>', '', ssml)
        return text.strip()
    
    def _synthesize_and_play(self, ssml: str, text: str):
        """–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ"""
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
        if self.normalize_text:
            text = normalize_for_tts(text)
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º Yandex
            audio_np = None
            sample_rate = 16000  # Yandex –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 16kHz
            
            if self.yandex_api_key and self.yandex_folder_id:
                try:
                    self.publish_state('synthesizing')
                    self.get_logger().info('üîä –°–∏–Ω—Ç–µ–∑ —á–µ—Ä–µ–∑ Yandex SpeechKit...')
                    audio_np = self._synthesize_yandex(text)
                    sample_rate = 16000  # Yandex –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 16kHz
                    self.get_logger().info(f'‚úÖ Yandex —Å–∏–Ω—Ç–µ–∑ —É—Å–ø–µ—à–µ–Ω: {len(audio_np)} samples @ {sample_rate} Hz')
                except Exception as e:
                    self.get_logger().warn(f'‚ö†Ô∏è  Yandex –æ—Ç–≤–∞–ª–∏–ª—Å—è: {e}, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ Silero fallback')
                    audio_np = None
            
            # Fallback –Ω–∞ Silero –µ—Å–ª–∏ Yandex –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
            if audio_np is None:
                if self.silero_model is None:
                    raise Exception('Silero fallback –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!')
                
                self.publish_state('synthesizing')
                self.get_logger().info('üîä –°–∏–Ω—Ç–µ–∑ —á–µ—Ä–µ–∑ Silero (fallback)...')
                
                # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ SSML –¥–ª—è Silero
                if not ssml.startswith('<speak>'):
                    ssml_text = f'<speak><prosody pitch="medium">{text}</prosody></speak>'
                else:
                    ssml_text = ssml
                
                audio = self.silero_model.apply_tts(
                    ssml_text=ssml_text,
                    speaker=self.silero_speaker,
                    sample_rate=self.silero_sample_rate
                )
                audio_np = audio.numpy()
                sample_rate = self.silero_sample_rate  # 24000 Hz
                self.get_logger().info(f'‚úÖ Silero fallback —É—Å–ø–µ—à–µ–Ω: {len(audio_np)} samples @ {sample_rate} Hz')
            
            # –ü—É–±–ª–∏–∫—É–µ–º –≤ ROS topic
            self._publish_audio(audio_np)
            
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ª–æ–∫–∞–ª—å–Ω–æ
            self.publish_state('playing')
            
            # –í–ê–ñ–ù–û: ReSpeaker –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¢–û–õ–¨–ö–û 16kHz —Å—Ç–µ—Ä–µ–æ!
            target_rate = 16000
            
            if self.chipmunk_mode:
                # Chipmunk: —É—Å–∫–æ—Ä—è–µ–º playback
                playback_rate = int(sample_rate * self.pitch_shift)
                self.get_logger().info(f'üêøÔ∏è  –ë—É—Ä—É–Ω–¥—É–∫ —Ä–µ–∂–∏–º: {self.pitch_shift}x ‚Üí {playback_rate} Hz (–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π)')
                
                # –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –¥–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ playback_rate
                num_samples_intermediate = int(len(audio_np) * playback_rate / sample_rate)
                audio_intermediate = np.interp(
                    np.linspace(0, len(audio_np) - 1, num_samples_intermediate),
                    np.arange(len(audio_np)),
                    audio_np
                )
                
                # –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –¥–æ 16kHz –¥–ª—è ReSpeaker
                num_samples_final = int(len(audio_intermediate) * target_rate / playback_rate)
                audio_resampled = np.interp(
                    np.linspace(0, len(audio_intermediate) - 1, num_samples_final),
                    np.arange(len(audio_intermediate)),
                    audio_intermediate
                )
                self.get_logger().info(f'üîÑ –†–µ—Å–µ–º–ø–ª–∏–Ω–≥: {playback_rate} Hz ‚Üí {target_rate} Hz (ReSpeaker)')
            else:
                # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: –ø—Ä–æ—Å—Ç–æ–π —Ä–µ—Å–µ–º–ø–ª–∏–Ω–≥ –¥–æ 16kHz
                num_samples = int(len(audio_np) * target_rate / sample_rate)
                audio_resampled = np.interp(
                    np.linspace(0, len(audio_np) - 1, num_samples),
                    np.arange(len(audio_np)),
                    audio_np
                )
                self.get_logger().info(f'üîÑ –†–µ—Å–µ–º–ø–ª–∏–Ω–≥: {sample_rate} Hz ‚Üí {target_rate} Hz (ReSpeaker)')
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å
            audio_np_adjusted = audio_resampled * self.volume_gain
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–æ–Ω–æ ‚Üí —Å—Ç–µ—Ä–µ–æ (ReSpeaker —Ç—Ä–µ–±—É–µ—Ç 2 –∫–∞–Ω–∞–ª–∞!)
            audio_stereo = np.column_stack((audio_np_adjusted, audio_np_adjusted))
            self.get_logger().info(f'üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: {len(audio_stereo)} frames, {target_rate} Hz, —Å—Ç–µ—Ä–µ–æ')
            
            # –ë–ª–æ–∫–∏—Ä—É—é—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            with ignore_stderr(enable=True):
                sd.play(audio_stereo, target_rate, device=1, blocking=True)
                sd.stop()
                sd.wait()
            
            # –ó–∞–∫–æ–Ω—á–∏–ª–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            self.publish_state('ready')
            self.get_logger().info('‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
            
        except Exception as e:
            self.get_logger().error(f'‚ùå Synthesis error: {e}')
            self.publish_state('ready')
    
    def _synthesize_yandex(self, text: str) -> np.ndarray:
        """–°–∏–Ω—Ç–µ–∑ —á–µ—Ä–µ–∑ Yandex SpeechKit"""
        headers = {
            'Authorization': f'Api-Key {self.yandex_api_key}'
        }
        
        data = {
            'text': text,
            'lang': 'ru-RU',
            'voice': self.yandex_voice,
            'emotion': self.yandex_emotion,
            'speed': self.yandex_speed,
            'format': 'lpcm',
            'sampleRateHertz': '16000',
            'folderId': self.yandex_folder_id
        }
        
        response = requests.post(self.yandex_url, headers=headers, data=data, timeout=10)
        
        if response.status_code != 200:
            raise Exception(f'Yandex API error: {response.status_code} - {response.text}')
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º LPCM (16-bit signed PCM)
        audio_bytes = response.content
        audio_np = np.frombuffer(audio_bytes, dtype=np.int16).astype(np.float32) / 32768.0
        
        return audio_np
    
    def _publish_audio(self, audio_np: np.ndarray):
        """–ü—É–±–ª–∏–∫—É–µ—Ç –∞—É–¥–∏–æ –≤ ROS topic"""
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ int16 –¥–ª—è AudioData
        audio_int16 = (audio_np * 32767).astype(np.int16)
        
        msg = AudioData()
        msg.data = audio_int16.tobytes()
        
        self.audio_pub.publish(msg)
    
    def publish_state(self, state: str):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è TTS"""
        msg = String()
        msg.data = state
        self.state_pub.publish(msg)
    
    def parameters_callback(self, params):
        """Callback –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã"""
        from rcl_interfaces.msg import SetParametersResult
        
        for param in params:
            if param.name == 'volume_db':
                self.volume_db = param.value
                self.volume_gain = 10.0 ** (self.volume_db / 20.0)
                self.get_logger().info(f'üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞: {self.volume_db:.1f} dB (gain: {self.volume_gain:.2f}x)')
            elif param.name == 'pitch_shift':
                self.pitch_shift = param.value
                self.get_logger().info(f'üêøÔ∏è Pitch shift –∏–∑–º–µ–Ω—ë–Ω: {self.pitch_shift}x')
            elif param.name == 'chipmunk_mode':
                self.chipmunk_mode = param.value
                self.get_logger().info(f'üêøÔ∏è Chipmunk mode: {self.chipmunk_mode}')
        
        return SetParametersResult(successful=True)


def main(args=None):
    rclpy.init(args=args)
    node = TTSNode()
    
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()


if __name__ == '__main__':
    main()

#!/usr/bin/env python3
"""
TTSNode - Text-to-Speech —Å Silero TTS v4

–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞: /voice/dialogue/response (JSON chunks)
–ü—É–±–ª–∏–∫—É–µ—Ç: /voice/audio/speech (AudioData)
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç: Silero TTS v4 (aidar, baya, kseniya, xenia)
"""

import rclpy
from rclpy.node import Node
from std_msgs.msg import String
from audio_common_msgs.msg import AudioData
import json
import torch
import sounddevice as sd
import numpy as np
from typing import Optional
import sys
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º text_normalizer
scripts_path = Path(__file__).parent.parent / 'scripts'
sys.path.insert(0, str(scripts_path))

try:
    from text_normalizer import normalize_for_tts
except ImportError:
    def normalize_for_tts(text):
        """Fallback –µ—Å–ª–∏ –Ω–µ—Ç normalizer"""
        return text


class TTSNode(Node):
    """ROS2 –Ω–æ–¥–∞ –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ —Å Silero TTS"""
    
    def __init__(self):
        super().__init__('tts_node')
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.declare_parameter('speaker', 'aidar')  # aidar, baya, kseniya, xenia
        self.declare_parameter('sample_rate', 24000)
        self.declare_parameter('chipmunk_mode', True)
        self.declare_parameter('pitch_shift', 2.0)  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è playback rate
        self.declare_parameter('prosody_rate', 'x-slow')  # x-slow, slow, medium, fast
        self.declare_parameter('prosody_pitch', 'medium')  # x-low, low, medium, high, x-high
        self.declare_parameter('normalize_text', True)
        
        self.speaker = self.get_parameter('speaker').value
        self.sample_rate = self.get_parameter('sample_rate').value
        self.chipmunk_mode = self.get_parameter('chipmunk_mode').value
        self.pitch_shift = self.get_parameter('pitch_shift').value
        self.prosody_rate = self.get_parameter('prosody_rate').value
        self.prosody_pitch = self.get_parameter('prosody_pitch').value
        self.normalize_text = self.get_parameter('normalize_text').value
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ Silero TTS
        self.get_logger().info('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ Silero TTS v4...')
        self.device = torch.device('cpu')
        
        try:
            self.model, _ = torch.hub.load(
                repo_or_dir='snakers4/silero-models',
                model='silero_tts',
                language='ru',
                speaker='v4_ru'
            )
            self.model.to(self.device)
            self.get_logger().info('‚úÖ Silero TTS –∑–∞–≥—Ä—É–∂–µ–Ω')
        except Exception as e:
            self.get_logger().error(f'‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Silero: {e}')
            raise
        
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ dialogue response
        self.dialogue_sub = self.create_subscription(
            String,
            '/voice/dialogue/response',
            self.dialogue_callback,
            10
        )
        
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∞—É–¥–∏–æ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.audio_pub = self.create_publisher(AudioData, '/voice/audio/speech', 10)
        self.state_pub = self.create_publisher(String, '/voice/tts/state', 10)
        
        # –ü—É–±–ª–∏–∫—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.publish_state('ready')
        
        self.get_logger().info('‚úÖ TTSNode –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
        self.get_logger().info(f'  Speaker: {self.speaker}')
        self.get_logger().info(f'  Sample rate: {self.sample_rate} Hz')
        self.get_logger().info(f'  Chipmunk mode: {self.chipmunk_mode}')
        if self.chipmunk_mode:
            self.get_logger().info(f'  Pitch shift: {self.pitch_shift}x')
            self.get_logger().info(f'  Prosody: rate={self.prosody_rate}, pitch={self.prosody_pitch}')
    
    def dialogue_callback(self, msg: String):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ JSON chunks –æ—Ç dialogue_node"""
        try:
            chunk_data = json.loads(msg.data)
            
            if 'ssml' not in chunk_data:
                self.get_logger().warn('‚ö† Chunk –±–µ–∑ SSML')
                return
            
            ssml = chunk_data['ssml']
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ SSML
            text = self._extract_text_from_ssml(ssml)
            
            if not text.strip():
                return
            
            self.get_logger().info(f'üîä TTS: {text[:50]}...')
            
            # –°–∏–Ω—Ç–µ–∑ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            self._synthesize_and_play(ssml, text)
            
        except json.JSONDecodeError as e:
            self.get_logger().error(f'‚ùå JSON parse error: {e}')
        except Exception as e:
            self.get_logger().error(f'‚ùå TTS error: {e}')
    
    def _extract_text_from_ssml(self, ssml: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ SSML —Ç–µ–≥–æ–≤"""
        import re
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ XML —Ç–µ–≥–∏
        text = re.sub(r'<[^>]+>', '', ssml)
        return text.strip()
    
    def _synthesize_and_play(self, ssml: str, text: str):
        """–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ"""
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
        if self.normalize_text:
            text = normalize_for_tts(text)
        
        # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ SSML —Å prosody –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        if not ssml.startswith('<speak>'):
            ssml_text = f'<speak><prosody rate="{self.prosody_rate}" pitch="{self.prosody_pitch}">{text}</prosody></speak>'
        else:
            # –£–∂–µ –µ—Å—Ç—å SSML –æ—Ç DeepSeek, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            ssml_text = ssml
        
        try:
            # –°–∏–Ω—Ç–µ–∑
            self.publish_state('synthesizing')
            self.get_logger().info('üîä –°–∏–Ω—Ç–µ–∑–∏—Ä—É—é —Ä–µ—á—å...')
            
            audio = self.model.apply_tts(
                ssml_text=ssml_text,
                speaker=self.speaker,
                sample_rate=self.sample_rate
            )
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy
            audio_np = audio.numpy()
            
            # –ü—É–±–ª–∏–∫—É–µ–º –≤ ROS topic
            self._publish_audio(audio_np)
            
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ª–æ–∫–∞–ª—å–Ω–æ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            self.publish_state('playing')
            
            if self.chipmunk_mode:
                playback_rate = int(self.sample_rate * self.pitch_shift)
                self.get_logger().info(f'üêøÔ∏è  –ë—É—Ä—É–Ω–¥—É–∫ —Ä–µ–∂–∏–º: {self.pitch_shift}x')
            else:
                playback_rate = self.sample_rate
            
            # –°–Ω–∏–∂–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –¥–æ 24%
            audio_np_quiet = audio_np * 0.24
            
            # –î–æ–±–∞–≤–ª—è–µ–º 200ms —Ç–∏—à–∏–Ω—ã –≤ –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –±–µ–ª—ã–π —à—É–º
            silence_samples = int(playback_rate * 0.2)  # 200ms
            silence = np.zeros(silence_samples, dtype=audio_np_quiet.dtype)
            audio_with_silence = np.concatenate([silence, audio_np_quiet, silence])
            
            # –ë–ª–æ–∫–∏—Ä—É—é—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            sd.play(audio_with_silence, playback_rate, blocking=True)
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –æ—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã
            sd.stop()
            sd.wait()
            
            # –ó–∞–∫–æ–Ω—á–∏–ª–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            self.publish_state('ready')
            self.get_logger().info('‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
            
        except Exception as e:
            self.get_logger().error(f'‚ùå Synthesis error: {e}')
    
    def _publish_audio(self, audio_np: np.ndarray):
        """–ü—É–±–ª–∏–∫—É–µ—Ç –∞—É–¥–∏–æ –≤ ROS topic"""
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ int16 –¥–ª—è AudioData
        audio_int16 = (audio_np * 32767).astype(np.int16)
        
        msg = AudioData()
        msg.data = audio_int16.tobytes()
        
        self.audio_pub.publish(msg)
    
    def publish_state(self, state: str):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è TTS"""
        msg = String()
        msg.data = state
        self.state_pub.publish(msg)


def main(args=None):
    rclpy.init(args=args)
    node = TTSNode()
    
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()


if __name__ == '__main__':
    main()

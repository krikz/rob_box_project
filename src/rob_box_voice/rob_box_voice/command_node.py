#!/usr/bin/env python3
"""
CommandNode - —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–±–æ—Ç–æ–º
–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è: /voice/stt/result (String)
–ü—É–±–ª–∏–∫—É–µ—Ç: /voice/command/intent (String), /voice/command/feedback (String)
Action Clients: NavigateToPose, FollowPath
"""

import rclpy
from rclpy.node import Node
from rclpy.action import ActionClient
from std_msgs.msg import String
from geometry_msgs.msg import PoseStamped
from nav2_msgs.action import NavigateToPose

import re
from typing import Optional, Dict, List, Tuple
from dataclasses import dataclass
from enum import Enum


class IntentType(Enum):
    """–¢–∏–ø—ã –Ω–∞–º–µ—Ä–µ–Ω–∏–π –∫–æ–º–∞–Ω–¥"""
    NAVIGATE = "navigate"           # –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Ç–æ—á–∫–µ
    STOP = "stop"                   # –û—Å—Ç–∞–Ω–æ–≤–∫–∞
    FOLLOW = "follow"               # –°–ª–µ–¥–æ–≤–∞–Ω–∏–µ
    STATUS = "status"               # –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞
    MAP = "map"                     # –†–∞–±–æ—Ç–∞ —Å –∫–∞—Ä—Ç–æ–π
    VISION = "vision"               # –ó—Ä–µ–Ω–∏–µ/–¥–µ—Ç–µ–∫—Ü–∏—è
    UNKNOWN = "unknown"             # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞


@dataclass
class Command:
    """–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"""
    intent: IntentType
    text: str
    entities: Dict[str, any]
    confidence: float


class CommandNode(Node):
    """–ù–æ–¥–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥"""
    
    def __init__(self):
        super().__init__('command_node')
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.declare_parameter('confidence_threshold', 0.7)
        self.declare_parameter('enable_navigation', True)
        self.declare_parameter('enable_follow', False)  # TODO: Phase 6
        self.declare_parameter('enable_vision', False)  # TODO: Phase 6
        
        self.confidence_threshold = self.get_parameter('confidence_threshold').value
        self.enable_navigation = self.get_parameter('enable_navigation').value
        self.enable_follow = self.get_parameter('enable_follow').value
        self.enable_vision = self.get_parameter('enable_vision').value
        
        # Subscribers
        self.stt_sub = self.create_subscription(
            String,
            '/voice/stt/result',
            self.stt_callback,
            10
        )
        
        # Subscribe to dialogue state (—á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å –¥–∏–∞–ª–æ–≥—É)
        self.dialogue_state_sub = self.create_subscription(
            String,
            '/voice/dialogue/state',
            self.dialogue_state_callback,
            10
        )
        
        # Publishers
        self.intent_pub = self.create_publisher(String, '/voice/command/intent', 10)
        self.feedback_pub = self.create_publisher(String, '/voice/command/feedback', 10)
        
        # Publisher –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏–µ–º
        from geometry_msgs.msg import Twist
        self.cmd_vel_pub = self.create_publisher(Twist, '/cmd_vel', 10)
        
        # State tracking
        self.dialogue_state = 'IDLE'  # IDLE | LISTENING | DIALOGUE | SILENCED
        
        # Action clients
        if self.enable_navigation:
            self.nav_client = ActionClient(self, NavigateToPose, 'navigate_to_pose')
        
        # –°–ª–æ–≤–∞—Ä—å –∫–æ–º–∞–Ω–¥ (–ø–∞—Ç—Ç–µ—Ä–Ω—ã)
        self._build_command_patterns()
        
        # Waypoints (–∑–∞—Ä–∞–Ω–µ–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–æ—á–∫–∏)
        self.waypoints = {
            '–¥–æ–º': {'x': 0.0, 'y': 0.0, 'theta': 0.0},
            '–∫—É—Ö–Ω—è': {'x': 2.0, 'y': 1.0, 'theta': 0.0},
            '–≥–æ—Å—Ç–∏–Ω–∞—è': {'x': 3.0, 'y': 2.0, 'theta': 1.57},
            '—Ç–æ—á–∫–∞ 1': {'x': 1.0, 'y': 0.0, 'theta': 0.0},
            '—Ç–æ—á–∫–∞ 2': {'x': 2.0, 'y': 0.0, 'theta': 0.0},
            '—Ç–æ—á–∫–∞ 3': {'x': 3.0, 'y': 0.0, 'theta': 0.0},
        }
        
        self.get_logger().info('‚úÖ CommandNode –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
        self.get_logger().info(f'  Navigation: {"‚úì" if self.enable_navigation else "‚úó"}')
        self.get_logger().info(f'  Waypoints: {len(self.waypoints)}')
    
    def _build_command_patterns(self):
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥"""
        self.patterns = {
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è
            IntentType.NAVIGATE: [
                (r'(–¥–≤–∏–≥–∞–π—Å—è|–∏–¥–∏|–ø–æ–µ–∑–∂–∞–π|–µ–∑–∂–∞–π|–Ω–∞–ø—Ä–∞–≤–ª—è–π—Å—è)\s+–∫\s+—Ç–æ—á–∫–µ\s+(\d+)', 'waypoint_number'),
                (r'(–¥–≤–∏–≥–∞–π—Å—è|–∏–¥–∏|–ø–æ–µ–∑–∂–∞–π|–µ–∑–∂–∞–π)\s+–∫\s+(–¥–æ–º|–∫—É—Ö–Ω—è|–≥–æ—Å—Ç–∏–Ω–∞—è)', 'waypoint_name'),
                (r'(–¥–≤–∏–≥–∞–π—Å—è|–∏–¥–∏|–ø–æ–µ–∑–∂–∞–π)\s+(–≤–ø–µ—Ä–µ–¥|–Ω–∞–∑–∞–¥|–≤–ª–µ–≤–æ|–≤–ø—Ä–∞–≤–æ)', 'direction'),
                (r'(–ø–æ–≤–µ—Ä–Ω–∏|–ø–æ–≤–µ—Ä–Ω–∏—Å—å|—Ä–∞–∑–≤–µ—Ä–Ω|—Ä–∞–∑–≤–µ—Ä–Ω–∏—Å—å)\s+(–Ω–∞–ª–µ–≤–æ|–Ω–∞–ø—Ä–∞–≤–æ|–≤–ª–µ–≤–æ|–≤–ø—Ä–∞–≤–æ)', 'turn'),
            ],
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞
            IntentType.STOP: [
                (r'(—Å—Ç–æ–π|—Å—Ç–æ–ø|–æ—Å—Ç–∞–Ω–æ–≤–∏—Å—å|–æ—Å—Ç–∞–Ω–æ–≤–∏|halt)', None),
                (r'(–æ—Ç–º–µ–Ω–∏|cancel)\s+(–¥–≤–∏–∂–µ–Ω–∏–µ|–Ω–∞–≤–∏–≥–∞—Ü–∏—é)', None),
            ],
            # –°–ª–µ–¥–æ–≤–∞–Ω–∏–µ
            IntentType.FOLLOW: [
                (r'(—Å–ª–µ–¥—É–π|–∏–¥–∏)\s+–∑–∞\s+(–º–Ω–æ–π|—á–µ–ª–æ–≤–µ–∫–æ–º)', None),
                (r'(–≤–∫–ª—é—á–∏|–∞–∫—Ç–∏–≤–∏—Ä—É–π)\s+—Ä–µ–∂–∏–º\s+—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è', None),
            ],
            # –°—Ç–∞—Ç—É—Å
            IntentType.STATUS: [
                (r'(–≥–¥–µ|–∫—É–¥–∞)\s+(—Ç—ã|—Ä–æ–±–æ—Ç)', None),
                (r'(–ø–æ–∫–∞–∂–∏|—Ä–∞—Å—Å–∫–∞–∂–∏)\s+(—Å—Ç–∞—Ç—É—Å|–ø–æ–ª–æ–∂–µ–Ω–∏–µ|–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)', None),
            ],
            # –ö–∞—Ä—Ç–∞
            IntentType.MAP: [
                (r'(–ø–æ–∫–∞–∂–∏|–æ—Ç–∫—Ä–æ–π|–∑–∞–≥—Ä—É–∑–∏)\s+–∫–∞—Ä—Ç—É', None),
                (r'(—Å–æ–∑–¥–∞–π|–ø–æ—Å—Ç—Ä–æ–π|—Å–¥–µ–ª–∞–π)\s+–∫–∞—Ä—Ç—É', None),
            ],
            # –ó—Ä–µ–Ω–∏–µ
            IntentType.VISION: [
                (r'—á—Ç–æ\s+(–≤–∏–¥–∏—à—å|–ø–µ—Ä–µ–¥\s+—Ç–æ–±–æ–π)', None),
                (r'(–Ω–∞–π–¥–∏|–ø–æ–∫–∞–∂–∏|–æ–±–Ω–∞—Ä—É–∂—å)\s+(–æ–±—ä–µ–∫—Ç|—á–µ–ª–æ–≤–µ–∫–∞|–ø—Ä–µ–¥–º–µ—Ç)', None),
            ],
        }
    
    def dialogue_state_callback(self, msg: String):
        """Callback –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è dialogue_node"""
        self.dialogue_state = msg.data
        self.get_logger().debug(f'üìä Dialogue state: {self.dialogue_state}')
    
    def stt_callback(self, msg: String):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–π —Ä–µ—á–∏"""
        text = msg.data.strip().lower()
        if not text:
            return
        
        self.get_logger().info(f'üé§ STT: {text}')
        
        # –£–¥–∞–ª–∏—Ç—å wake word –∏–∑ –Ω–∞—á–∞–ª–∞ –∫–æ–º–∞–Ω–¥—ã
        wake_words = ['—Ä–æ–±–æ—Ç', '—Ä–æ–±–æ–∫—Å', '—Ä–æ–±–æ–±–æ–∫—Å']
        for wake_word in wake_words:
            if text.startswith(wake_word):
                text = text[len(wake_word):].strip()
                break
        
        # –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—É
        command = self.classify_intent(text)
        
        # –í—Å–µ–≥–¥–∞ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å intent (–¥–∞–∂–µ UNKNOWN) –¥–ª—è dialogue_node
        self.publish_intent(command)
        
        if command.intent == IntentType.UNKNOWN:
            self.get_logger().debug(f'ü§∑ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ - –ø–µ—Ä–µ –¥–∞—é dialogue_node: {text}')
            # –ù–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É, –Ω–æ –ø—É–±–ª–∏–∫—É–µ–º intent=UNKNOWN –¥–ª—è dialogue
            return
        
        if command.confidence < self.confidence_threshold:
            self.get_logger().warn(f'‚ö†Ô∏è –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {command.confidence:.2f}')
            self.publish_feedback('–Ø –Ω–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª')
            return
        
        self.get_logger().info(f'üéØ Intent: {command.intent.value} ({command.confidence:.2f})')
        self.get_logger().info(f'üì¶ Entities: {command.entities}')
        
        # –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
        self.execute_command(command)
    
    def classify_intent(self, text: str) -> Command:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∏ –∏–∑–≤–ª–µ—á—å —Å—É—â–Ω–æ—Å—Ç–∏"""
        best_match = None
        best_confidence = 0.0
        best_intent = IntentType.UNKNOWN
        best_entities = {}
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        for intent, patterns in self.patterns.items():
            for pattern, entity_type in patterns:
                match = re.search(pattern, text, re.IGNORECASE)
                if match:
                    confidence = 0.8 + (len(match.group(0)) / len(text)) * 0.2
                    
                    if confidence > best_confidence:
                        best_confidence = confidence
                        best_intent = intent
                        best_match = match
                        
                        # –ò–∑–≤–ª–µ—á—å —Å—É—â–Ω–æ—Å—Ç–∏
                        if entity_type == 'waypoint_number':
                            best_entities = {'waypoint': f"—Ç–æ—á–∫–∞ {match.group(2)}"}
                        elif entity_type == 'waypoint_name':
                            best_entities = {'waypoint': match.group(2)}
                        elif entity_type == 'direction':
                            best_entities = {'direction': match.group(2)}
                        elif entity_type == 'turn':
                            best_entities = {'direction': match.group(2)}
        
        return Command(
            intent=best_intent,
            text=text,
            entities=best_entities,
            confidence=best_confidence
        )
    
    def execute_command(self, command: Command):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É"""
        if command.intent == IntentType.NAVIGATE:
            self.handle_navigate(command)
        elif command.intent == IntentType.STOP:
            self.handle_stop(command)
        elif command.intent == IntentType.STATUS:
            self.handle_status(command)
        elif command.intent == IntentType.MAP:
            self.handle_map(command)
        elif command.intent == IntentType.VISION:
            self.handle_vision(command)
        elif command.intent == IntentType.FOLLOW:
            self.handle_follow(command)
    
    def handle_navigate(self, command: Command):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        if not self.enable_navigation:
            self.get_logger().warn('‚ö†Ô∏è –ù–∞–≤–∏–≥–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞')
            self.publish_feedback('–ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–ø–æ–≤–µ—Ä–Ω–∏ –Ω–∞–ª–µ–≤–æ/–Ω–∞–ø—Ä–∞–≤–æ)
        direction = command.entities.get('direction')
        if direction:
            self.handle_direction(direction)
            return
        
        waypoint_name = command.entities.get('waypoint')
        if not waypoint_name:
            self.publish_feedback('–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ç–æ—á–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è')
            return
        
        # –ù–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã waypoint
        if waypoint_name not in self.waypoints:
            self.get_logger().warn(f'‚ö†Ô∏è Waypoint –Ω–µ –Ω–∞–π–¥–µ–Ω: {waypoint_name}')
            self.publish_feedback(f'–Ø –Ω–µ –∑–Ω–∞—é –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è {waypoint_name}')
            return
        
        coords = self.waypoints[waypoint_name]
        
        self.get_logger().info(f'üéØ –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ "{waypoint_name}": x={coords["x"]}, y={coords["y"]}')
        self.publish_feedback(f'–ò–¥—É –∫ {waypoint_name}')
        
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å Nav2 goal
        self.send_nav2_goal(coords['x'], coords['y'], coords['theta'])
    
    def send_nav2_goal(self, x: float, y: float, theta: float):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ü–µ–ª—å –≤ Nav2"""
        if not self.nav_client.wait_for_server(timeout_sec=1.0):
            self.get_logger().error('‚ùå Nav2 action server –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
            self.publish_feedback('–ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
            return
        
        # –°–æ–∑–¥–∞—Ç—å goal
        goal = NavigateToPose.Goal()
        goal.pose.header.frame_id = 'map'
        goal.pose.header.stamp = self.get_clock().now().to_msg()
        
        goal.pose.pose.position.x = x
        goal.pose.pose.position.y = y
        goal.pose.pose.position.z = 0.0
        
        # –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –∏–∑ —É–≥–ª–∞ theta
        import math
        goal.pose.pose.orientation.z = math.sin(theta / 2.0)
        goal.pose.pose.orientation.w = math.cos(theta / 2.0)
        
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å goal
        self.get_logger().info(f'üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ Nav2 goal: ({x:.2f}, {y:.2f}, {theta:.2f})')
        future = self.nav_client.send_goal_async(goal, feedback_callback=self.nav_feedback_callback)
        future.add_done_callback(self.nav_goal_response_callback)
    
    def nav_goal_response_callback(self, future):
        """Callback –æ—Ç–≤–µ—Ç–∞ Nav2 goal"""
        goal_handle = future.result()
        if not goal_handle.accepted:
            self.get_logger().warn('‚ö†Ô∏è Nav2 goal –æ—Ç–∫–ª–æ–Ω—ë–Ω')
            self.publish_feedback('–ù–µ –º–æ–≥—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é')
            return
        
        self.get_logger().info('‚úÖ Nav2 goal –ø—Ä–∏–Ω—è—Ç')
        
        # –û–∂–∏–¥–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result_future = goal_handle.get_result_async()
        result_future.add_done_callback(self.nav_result_callback)
    
    def nav_feedback_callback(self, feedback_msg):
        """Callback feedback Nav2"""
        feedback = feedback_msg.feedback
        # –ú–æ–∂–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
        # self.get_logger().debug(f'Nav2 feedback: {feedback}')
    
    def nav_result_callback(self, future):
        """Callback —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ Nav2"""
        result = future.result().result
        self.get_logger().info(f'‚úÖ Nav2 –∑–∞–≤–µ—Ä—à—ë–Ω: {result}')
        self.publish_feedback('–ü—Ä–∏–±—ã–ª –≤ —Ç–æ—á–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è')
    
    def handle_stop(self, command: Command):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        self.get_logger().info('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞')
        self.publish_feedback('–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Å—å')
        
        # –û—Ç–º–µ–Ω–∏—Ç—å Nav2 goal
        if self.enable_navigation and hasattr(self, 'nav_client'):
            # TODO: Cancel current goal
            pass
    
    def handle_direction(self, direction: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–≤–æ—Ä–æ—Ç–∞/–¥–≤–∏–∂–µ–Ω–∏—è –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏"""
        from geometry_msgs.msg import Twist
        
        # –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
        direction_map = {
            '–Ω–∞–ª–µ–≤–æ': (0.0, 0.5),    # linear_x, angular_z (–ø–æ–≤–æ—Ä–æ—Ç –Ω–∞–ª–µ–≤–æ)
            '–≤–ª–µ–≤–æ': (0.0, 0.5),
            '–Ω–∞–ø—Ä–∞–≤–æ': (0.0, -0.5),  # –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞–ø—Ä–∞–≤–æ
            '–≤–ø—Ä–∞–≤–æ': (0.0, -0.5),
            '–≤–ø–µ—Ä–µ–¥': (0.3, 0.0),    # –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä—ë–¥
            '–Ω–∞–∑–∞–¥': (-0.3, 0.0),    # –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–∑–∞–¥
        }
        
        if direction not in direction_map:
            self.get_logger().warn(f'‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}')
            self.publish_feedback(f'–ù–µ –ø–æ–Ω–∏–º–∞—é –∫—É–¥–∞ {direction}')
            return
        
        linear_x, angular_z = direction_map[direction]
        
        self.get_logger().info(f'üéØ –ü–æ–≤–æ—Ä–æ—Ç {direction}: linear={linear_x}, angular={angular_z}')
        self.publish_feedback(f'–ü–æ–≤–æ—Ä–∞—á–∏–≤–∞—é {direction}')
        
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å Twist –∫–æ–º–∞–Ω–¥—É
        twist = Twist()
        twist.linear.x = linear_x
        twist.angular.z = angular_z
        
        # –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —Å–µ–∫—É–Ω–¥ (–ø—Ä–∏–º–µ—Ä–Ω–æ –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞ 90 –≥—Ä–∞–¥—É—Å–æ–≤ –ø—Ä–∏ 0.5 —Ä–∞–¥/—Å)
        import time
        duration = 2.0  # —Å–µ–∫—É–Ω–¥—ã
        rate = 10  # –ì—Ü
        iterations = int(duration * rate)
        
        for _ in range(iterations):
            self.cmd_vel_pub.publish(twist)
            time.sleep(1.0 / rate)
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞
        twist.linear.x = 0.0
        twist.angular.z = 0.0
        self.cmd_vel_pub.publish(twist)
        
        self.get_logger().info(f'‚úÖ –ü–æ–≤–æ—Ä–æ—Ç {direction} –∑–∞–≤–µ—Ä—à—ë–Ω')
    
    def handle_status(self, command: Command):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        self.get_logger().info('üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞')
        # TODO: –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∏–∑ /odom –∏–ª–∏ /tf
        self.publish_feedback('–Ø –Ω–∞—Ö–æ–∂—É—Å—å –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏')
    
    def handle_map(self, command: Command):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Å –∫–∞—Ä—Ç–æ–π"""
        self.get_logger().info('üó∫Ô∏è –ö–æ–º–∞–Ω–¥–∞ –∫–∞—Ä—Ç—ã')
        self.publish_feedback('–§—É–Ω–∫—Ü–∏—è –∫–∞—Ä—Ç—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
    
    def handle_vision(self, command: Command):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∑—Ä–µ–Ω–∏—è"""
        if not self.enable_vision:
            self.get_logger().warn('‚ö†Ô∏è –ó—Ä–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ')
            self.publish_feedback('–§—É–Ω–∫—Ü–∏—è –∑—Ä–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
            return
        
        self.get_logger().info('üëÅÔ∏è –ö–æ–º–∞–Ω–¥–∞ –∑—Ä–µ–Ω–∏—è')
        # TODO: Object detection
        self.publish_feedback('–°–∫–∞–Ω–∏—Ä—É—é –æ–∫—Ä—É–∂–µ–Ω–∏–µ')
    
    def handle_follow(self, command: Command):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
        if not self.enable_follow:
            self.get_logger().warn('‚ö†Ô∏è –°–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ')
            self.publish_feedback('–§—É–Ω–∫—Ü–∏—è —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
            return
        
        self.get_logger().info('üö∂ –†–µ–∂–∏–º —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è')
        # TODO: Person following
        self.publish_feedback('–í–∫–ª—é—á–∞—é —Ä–µ–∂–∏–º —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è')
    
    def publish_intent(self, command: Command):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è"""
        msg = String()
        msg.data = f'{command.intent.value}:{command.confidence:.2f}'
        self.intent_pub.publish(msg)
    
    def publish_feedback(self, text: str):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è feedback –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        msg = String()
        msg.data = text
        self.feedback_pub.publish(msg)
        self.get_logger().info(f'üí¨ Feedback: {text}')


def main(args=None):
    rclpy.init(args=args)
    node = CommandNode()
    
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()


if __name__ == '__main__':
    main()

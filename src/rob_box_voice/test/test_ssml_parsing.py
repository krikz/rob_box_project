#!/usr/bin/env python3
"""
–¢–µ—Å—Ç SSML –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è TTS Node

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ pitch –∏ rate –∏–∑ SSML —Ç–µ–≥–æ–≤.
"""

import re


def _parse_ssml_attributes(ssml: str) -> dict:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞—Ç—Ä–∏–±—É—Ç—ã –∏–∑ SSML —Ç–µ–≥–æ–≤ (pitch, rate/speed)
    
    Returns:
        dict: {'pitch': float, 'rate': float} –∏–ª–∏ –ø—É—Å—Ç–æ–π dict
    """
    attributes = {}
    
    # –ò—â–µ–º <prosody> —Ç–µ–≥–∏ —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
    prosody_pattern = r'<prosody\s+([^>]+)>'
    matches = re.finditer(prosody_pattern, ssml, re.IGNORECASE)
    
    for match in matches:
        attrs_str = match.group(1)
        
        # –ü–∞—Ä—Å–∏–º pitch
        pitch_match = re.search(r'pitch\s*=\s*["\']?([^"\'>\s]+)["\']?', attrs_str, re.IGNORECASE)
        if pitch_match:
            pitch_value = pitch_match.group(1)
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è Yandex
            if '%' in pitch_value:
                try:
                    percent = float(pitch_value.replace('%', ''))
                    attributes['pitch'] = 1.0 + (percent / 100.0)
                except ValueError:
                    pass
            elif pitch_value == 'high':
                attributes['pitch'] = 1.2
            elif pitch_value == 'low':
                attributes['pitch'] = 0.8
            elif pitch_value == 'medium':
                attributes['pitch'] = 1.0
            else:
                try:
                    attributes['pitch'] = float(pitch_value)
                except ValueError:
                    pass
        
        # –ü–∞—Ä—Å–∏–º rate
        rate_match = re.search(r'rate\s*=\s*["\']?([^"\'>\s]+)["\']?', attrs_str, re.IGNORECASE)
        if rate_match:
            rate_value = rate_match.group(1)
            if '%' in rate_value:
                try:
                    percent = float(rate_value.replace('%', ''))
                    attributes['rate'] = percent / 100.0
                except ValueError:
                    pass
            elif rate_value == 'fast':
                attributes['rate'] = 1.5
            elif rate_value == 'slow':
                attributes['rate'] = 0.7
            elif rate_value == 'medium':
                attributes['rate'] = 1.0
            else:
                try:
                    attributes['rate'] = float(rate_value)
                except ValueError:
                    pass
    
    return attributes


def test_ssml_parsing():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö SSML —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
    
    test_cases = [
        # (SSML, Expected attributes)
        ('<speak><prosody rate="1.5">–ë—ã—Å—Ç—Ä–∞—è —Ä–µ—á—å</prosody></speak>', {'rate': 1.5}),
        ('<speak><prosody rate="fast">–ë—ã—Å—Ç—Ä–æ</prosody></speak>', {'rate': 1.5}),
        ('<speak><prosody rate="slow">–ú–µ–¥–ª–µ–Ω–Ω–æ</prosody></speak>', {'rate': 0.7}),
        ('<speak><prosody rate="150%">–ü–æ–ª—Ç–æ—Ä–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏</prosody></speak>', {'rate': 1.5}),
        ('<speak><prosody pitch="+10%">–í—ã—à–µ –Ω–∞ 10%</prosody></speak>', {'pitch': 1.1}),
        ('<speak><prosody pitch="-10%">–ù–∏–∂–µ –Ω–∞ 10%</prosody></speak>', {'pitch': 0.9}),
        ('<speak><prosody pitch="high">–í—ã—Å–æ–∫–∏–π –≥–æ–ª–æ—Å</prosody></speak>', {'pitch': 1.2}),
        ('<speak><prosody pitch="low">–ù–∏–∑–∫–∏–π –≥–æ–ª–æ—Å</prosody></speak>', {'pitch': 0.8}),
        (
            '<speak><prosody pitch="high" rate="1.2">–í—ã—Å–æ–∫–∏–π –∏ –±—ã—Å—Ç—Ä—ã–π</prosody></speak>',
            {'pitch': 1.2, 'rate': 1.2}
        ),
        ('<speak>–û–±—ã—á–Ω–∞—è —Ä–µ—á—å –±–µ–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤</speak>', {}),
    ]
    
    print("üß™ –¢–µ—Å—Ç SSML –ø–∞—Ä—Å–∏–Ω–≥–∞\n")
    
    passed = 0
    failed = 0
    
    for ssml, expected in test_cases:
        result = _parse_ssml_attributes(ssml)
        
        if result == expected:
            print(f"‚úÖ PASS: {ssml[:60]}...")
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            passed += 1
        else:
            print(f"‚ùå FAIL: {ssml[:60]}...")
            print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: {expected}")
            print(f"   –ü–æ–ª—É—á–µ–Ω–æ:  {result}")
            failed += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed} passed, {failed} failed")
    
    return failed == 0


if __name__ == '__main__':
    success = test_ssml_parsing()
    exit(0 if success else 1)

#!/usr/bin/env python3
"""
–¢–µ—Å—Ç JSK ReSpeaker –∫–æ–¥ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –∏—Ö –ø–æ–¥—Ö–æ–¥
"""

import sys
import os
sys.path.insert(0, '/tmp/jsk_3rdparty/respeaker_ros/src')

from respeaker_ros import RespeakerInterface, RespeakerAudio, ignore_stderr
import time

print("=" * 60)
print("–¢–ï–°–¢ JSK-ROS-PKG RESPEAKER")
print("=" * 60)

# 1. –¢–µ—Å—Ç RespeakerInterface (USB)
print("\n1. –¢–µ—Å—Ç RespeakerInterface (USB –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)...")
try:
    respeaker = RespeakerInterface()
    print(f"   ‚úì RespeakerInterface —Å–æ–∑–¥–∞–Ω")
    print(f"   ‚úì Version: {respeaker.version}")
    
    # –ß–∏—Ç–∞–µ–º VAD
    print("\n2. –ß–∏—Ç–∞–µ–º VAD –≤ —Ü–∏–∫–ª–µ (5 —Å–µ–∫—É–Ω–¥)...")
    for i in range(50):
        try:
            vad = respeaker.is_voice()
            direction = respeaker.direction
            if vad:
                print(f"   üéôÔ∏è  VAD: 1 - –†–ï–ß–¨! Direction: {direction}¬∞")
            else:
                if i % 10 == 0:
                    print(f"   VAD: 0 - —Ç–∏—à–∏–Ω–∞, Direction: {direction}¬∞")
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
        time.sleep(0.1)
    
    print("\n‚úÖ USB –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    
except Exception as e:
    print(f"\n‚ùå –û—à–∏–±–∫–∞ USB: {e}")
    import traceback
    traceback.print_exc()

print("\n" + "=" * 60)

# 2. –¢–µ—Å—Ç RespeakerAudio (PyAudio)
print("\n3. –¢–µ—Å—Ç RespeakerAudio (PyAudio stream)...")

audio_data_count = 0

def on_audio(data, rate, bitdepth, channels):
    global audio_data_count
    audio_data_count += 1
    if audio_data_count % 100 == 0:
        print(f"   Audio chunk #{audio_data_count}: rate={rate}, channels={channels}, len={len(data)}")

try:
    print("   –°–æ–∑–¥–∞–µ–º RespeakerAudio —Å suppress_error=True...")
    audio = RespeakerAudio(on_audio, channel=0, suppress_error=True)
    print(f"   ‚úì Channels: {audio.channels}")
    print(f"   ‚úì Rate: {audio.rate}")
    print(f"   ‚úì Device index: {audio.device_index}")
    
    print("\n   –ó–∞–ø—É—Å–∫–∞–µ–º stream –Ω–∞ 5 —Å–µ–∫—É–Ω–¥...")
    audio.start()
    time.sleep(5)
    audio.stop()
    
    print(f"\n‚úÖ PyAudio —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–ª—É—á–µ–Ω–æ {audio_data_count} –∞—É–¥–∏–æ —á–∞–Ω–∫–æ–≤")
    
except Exception as e:
    print(f"\n‚ùå –û—à–∏–±–∫–∞ PyAudio: {e}")
    import traceback
    traceback.print_exc()

print("\n" + "=" * 60)
print("4. –¢–µ—Å—Ç –û–î–ù–û–í–†–ï–ú–ï–ù–ù–û–ô —Ä–∞–±–æ—Ç—ã USB VAD + PyAudio...")
print("=" * 60)

# 3. –¢–µ—Å—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã
try:
    # –°–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ
    respeaker2 = RespeakerInterface()
    audio2 = RespeakerAudio(on_audio, channel=0, suppress_error=True)
    
    print("\n   –ó–∞–ø—É—Å–∫–∞–µ–º PyAudio stream...")
    audio2.start()
    
    print("   –ü—Ä–æ–±—É–µ–º —á–∏—Ç–∞—Ç—å VAD –ü–û–ö–ê PyAudio —Ä–∞–±–æ—Ç–∞–µ—Ç...")
    vad_success = 0
    vad_errors = 0
    
    for i in range(50):
        try:
            vad = respeaker2.is_voice()
            direction = respeaker2.direction
            vad_success += 1
            if vad:
                print(f"   üéôÔ∏è  VAD: 1 - –†–ï–ß–¨! Direction: {direction}¬∞ [—É—Å–ø–µ—Ö #{vad_success}]")
            else:
                if i % 10 == 0:
                    print(f"   VAD: 0 - —Ç–∏—à–∏–Ω–∞, Direction: {direction}¬∞ [—É—Å–ø–µ—Ö #{vad_success}]")
        except Exception as e:
            vad_errors += 1
            if vad_errors <= 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
                print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è VAD: {e}")
        
        time.sleep(0.1)
    
    audio2.stop()
    
    print(f"\n   –†–µ–∑—É–ª—å—Ç–∞—Ç: —É—Å–ø–µ—à–Ω—ã—Ö —á—Ç–µ–Ω–∏–π VAD: {vad_success}, –æ—à–∏–±–æ–∫: {vad_errors}")
    
    if vad_success > 0:
        print("\n‚úÖ –û–î–ù–û–í–†–ï–ú–ï–ù–ù–ê–Ø —Ä–∞–±–æ—Ç–∞ USB VAD + PyAudio –í–û–ó–ú–û–ñ–ù–ê!")
    else:
        print("\n‚ùå –û–î–ù–û–í–†–ï–ú–ï–ù–ù–ê–Ø —Ä–∞–±–æ—Ç–∞ –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç - –≤—Å–µ VAD —á—Ç–µ–Ω–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
    
except Exception as e:
    print(f"\n‚ùå –û—à–∏–±–∫–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã: {e}")
    import traceback
    traceback.print_exc()

print("\n" + "=" * 60)
print("–¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
print("=" * 60)

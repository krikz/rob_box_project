# Использует переменные из .env файла:
# - ROS_DISTRO: версия ROS 2 (humble, jazzy, и т.д.)
# - IMAGE_TAG: тег ветки (latest, dev, rc-X.Y.Z)
# - BASE_IMAGE_PREFIX: ghcr.io/krikz/rob_box_base
# - SERVICE_IMAGE_PREFIX: ghcr.io/krikz/rob_box

services:
  # Zenoh Router - центральный роутер для связи между Pi и облаком
  zenoh-router:
    image: eclipse/zenoh:latest
    container_name: zenoh-router
    network_mode: host
    environment:
      - RUST_LOG=zenoh=info
      - ROBOT_ID=${ROBOT_ID}  # ID робота для namespace при публикации в облако
    volumes:
      - ./config:/config:ro
      - ./scripts/zenoh-router:/scripts:ro
    entrypoint: ["/bin/sh", "/scripts/start_zenoh_router.sh"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8000/@/local/router || exit 1"]
      interval: 5s
      timeout: 10s
      retries: 20
      start_period: 30s
    labels:
      logging: "promtail"

  # twist_mux - мультиплексирование команд скорости с приоритизацией
  twist-mux:
    image: ${SERVICE_IMAGE_PREFIX:-ghcr.io/krikz/rob_box}:twist-mux-${ROS_DISTRO:-humble}-${IMAGE_TAG:-latest}
    container_name: twist-mux
    network_mode: host
    environment:
      - ROS_DOMAIN_ID=0
      - RMW_IMPLEMENTATION=rmw_zenoh_cpp
      - RUST_LOG=zenoh=info
      - ROS_AUTOMATIC_DISCOVERY_RANGE=LOCALHOST
      - ROBOT_ID=${ROBOT_ID}  # Для генерации namespace
      - ZENOH_SESSION_CONFIG_URI=/tmp/zenoh_session_config.json5  # Сгенерированный конфиг
      - LD_LIBRARY_PATH=/opt/ros/humble/opt/zenoh_cpp_vendor/lib:/opt/ros/humble/lib/aarch64-linux-gnu:/opt/ros/humble/lib
    volumes:
      - ./config:/config:ro
      - ./scripts:/ros_scripts:ro
      - ./scripts/twist_mux:/scripts:ro
    command: ["/ros_scripts/ros_with_namespace.sh", "/scripts/start_twist_mux.sh"]
    depends_on:
      - zenoh-router
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f twist_mux || exit 1"]
      interval: 10s
      timeout: 5s
      start_period: 15s
      retries: 3
    labels:
      logging: "promtail"

  # micro-ROS Agent - связь с ESP32 Sensor Hub по UART
  # Транслирует сообщения между ROS2 (DDS/Zenoh) и micro-ROS (XRCE-DDS)
  micro-ros-agent:
    image: ${SERVICE_IMAGE_PREFIX:-ghcr.io/krikz/rob_box}:micro-ros-agent-${ROS_DISTRO:-humble}-${IMAGE_TAG:-latest}
    container_name: micro-ros-agent
    network_mode: host
    privileged: true  # Нужен для доступа к serial устройствам
    environment:
      - ROS_DOMAIN_ID=0
      - RMW_IMPLEMENTATION=rmw_zenoh_cpp
      - RUST_LOG=zenoh=info
      - ROS_AUTOMATIC_DISCOVERY_RANGE=LOCALHOST
      - ROBOT_ID=${ROBOT_ID}  # Для генерации namespace
      - ZENOH_SESSION_CONFIG_URI=/tmp/zenoh_session_config.json5  # Сгенерированный конфиг
      - LD_LIBRARY_PATH=/opt/ros/humble/opt/zenoh_cpp_vendor/lib:/opt/ros/humble/lib/aarch64-linux-gnu:/opt/ros/humble/lib
      # micro-ROS специфичные переменные
      - MICROROS_SERIAL_PORT=/dev/ttyUSB0  # ESP32 USB serial (измените на /dev/ttyAMA0 для GPIO UART)
      - MICROROS_BAUDRATE=115200
    volumes:
      - ./config:/config:ro
      - ./scripts:/ros_scripts:ro
      - ./scripts/micro_ros_agent:/scripts:ro
    devices:
      - /dev/ttyUSB0:/dev/ttyUSB0  # ESP32 через USB (измените при необходимости)
    command: ["/ros_scripts/ros_with_namespace.sh", "/scripts/start_micro_ros_agent.sh"]
    depends_on:
      - zenoh-router
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f micro_ros_agent || exit 1"]
      interval: 15s
      timeout: 5s
      start_period: 10s
      retries: 3
    labels:
      logging: "promtail"

  # Robot State Publisher - публикует TF дерево робота из URDF
  robot-state-publisher:
    image: ${SERVICE_IMAGE_PREFIX:-ghcr.io/krikz/rob_box}:robot-state-publisher-${ROS_DISTRO:-humble}-${IMAGE_TAG:-latest}
    container_name: robot-state-publisher
    network_mode: host
    environment:
      - ROS_DOMAIN_ID=0
      - RMW_IMPLEMENTATION=rmw_zenoh_cpp
      - RUST_LOG=zenoh=info
      - ROS_AUTOMATIC_DISCOVERY_RANGE=LOCALHOST
      - ROBOT_ID=${ROBOT_ID}  # Для генерации namespace
      - LD_LIBRARY_PATH=/opt/ros/humble/opt/zenoh_cpp_vendor/lib:/opt/ros/humble/lib/aarch64-linux-gnu:/opt/ros/humble/lib
    volumes:
      - ./config:/config:ro
      - ./scripts:/ros_scripts:ro
      - ./scripts/robot_state_publisher:/scripts:ro
      - ../../src/rob_box_description:/workspace/src/rob_box_description:ro
    command: ["/scripts/start_robot_state_publisher.sh"]
    depends_on:
      - zenoh-router
    restart: unless-stopped
    labels:
      logging: "promtail"

  rtabmap:
    image: ${SERVICE_IMAGE_PREFIX:-ghcr.io/krikz/rob_box}:rtabmap-${ROS_DISTRO:-humble}-${IMAGE_TAG:-latest}
    container_name: rtabmap
    network_mode: host
    environment:
      - ROS_DOMAIN_ID=0
      - QT_QPA_PLATFORM=offscreen
      - RMW_IMPLEMENTATION=rmw_zenoh_cpp
      - ZENOH_ROUTER_CHECK_ATTEMPTS=10  # Подключаемся к локальному router
      - RUST_LOG=zenoh=info
      # Zenoh configuration через JSON
      - ROS_AUTOMATIC_DISCOVERY_RANGE=LOCALHOST
      - ROBOT_ID=${ROBOT_ID}  # Для генерации namespace
      - ZENOH_SESSION_CONFIG_URI=/tmp/zenoh_session_config.json5  # Сгенерированный конфиг
      # КРИТИЧНО: Путь к библиотекам Zenoh (vendor устанавливает в нестандартный путь)
      - LD_LIBRARY_PATH=/opt/ros/${ROS_DISTRO:-humble}/opt/zenoh_cpp_vendor/lib:/opt/ros/${ROS_DISTRO:-humble}/lib/aarch64-linux-gnu:/opt/ros/${ROS_DISTRO:-humble}/lib
    volumes:
      - ./config:/config:ro
      - ./scripts:/ros_scripts:ro
      - ./maps:/maps
    # === RTAB-Map конфигурация для 2D LiDAR SLAM ===
    # Полная документация: docs/reference/RTABMAP_LIDAR_CONFIG.md
    #
    # Источники:
    # 1. http://wiki.ros.org/rtabmap_ros/Tutorials/SetupOnYourRobot
    # 2. rtabmap_demos: turtlebot3_scan.launch.py
    # 3. Анализ rtabmap.launch.py (строки 45-46)
    #
    # КЛЮЧЕВЫЕ ПАРАМЕТРЫ:
    # • depth:=false - КРИТИЧНО! Отключает RGB/Depth подписку
    #   (По умолчанию depth=true → subscribe_rgb=true → камерные топики)
    # • subscribe_scan:=true - включает LaserScan
    # • icp_odometry:=true - ICP одометрия из сканов
    # • Reg/Strategy=1 - ICP регистрация (0=Visual, 1=ICP, 2=Visual+ICP)
    # • Reg/Force3DoF=true - 2D SLAM (только x, y, yaw)
    # • Icp/VoxelSize=0.05 - фильтрация сканов 5см вокселями
    # • Grid/RangeMin=0.2 - игнорировать точки ближе 20см
    # • Grid/Sensor=0 - сетка из лидара (не из depth камеры)
    #
    # ОЖИДАЕМЫЕ ПОДПИСКИ: /scan, /rtabmap/odom_info
    command:
      - /ros_scripts/ros_with_namespace.sh
      - ros2
      - launch
      - rtabmap_launch
      - rtabmap.launch.py
      - depth:=false
      - subscribe_scan:=true
      - scan_topic:=/scan
      - icp_odometry:=true
      - frame_id:=base_link
      - odom_frame_id:=odom
      - odom_topic:=odom
      - apriltag_topic:=/detections
      - qos:=1
      - approx_sync:=false
      - rtabmap_viz:=false
      - rviz:=false
      - visual_odometry:=false
      - database_path:=/maps/rtabmap.db
      - wait_for_transform:=0.5
      - use_sim_time:=false
      - args:=--delete_db_on_start -p Reg/Strategy:1 -p Reg/Force3DoF:true -p Icp/VoxelSize:0.05 -p Icp/MaxCorrespondenceDistance:0.1 -p RGBD/NeighborLinkRefining:true -p RGBD/ProximityBySpace:true -p Grid/RangeMin:0.2 -p Grid/Sensor:0 -p Optimizer/GravitySigma:0
    depends_on:
      - zenoh-router
    restart: unless-stopped
    labels:
      logging: "promtail"

  # ROS2 Control Manager - управление моторами через VESC
  # VESC Nexus работает как hardware_interface плагин
  ros2-control:
    image: ${SERVICE_IMAGE_PREFIX:-ghcr.io/krikz/rob_box}:ros2-control-${ROS_DISTRO:-humble}-${IMAGE_TAG:-latest}
    container_name: ros2-control
    network_mode: host
    privileged: true  # Для доступа к CAN интерфейсу
    environment:
      - ROS_DOMAIN_ID=0
      - RMW_IMPLEMENTATION=rmw_zenoh_cpp
      - RUST_LOG=zenoh=info
      - ROS_AUTOMATIC_DISCOVERY_RANGE=LOCALHOST
      - ROBOT_ID=${ROBOT_ID}  # Для генерации namespace
      - ZENOH_SESSION_CONFIG_URI=/tmp/zenoh_session_config.json5  # Сгенерированный конфиг
      - LD_LIBRARY_PATH=/opt/ros/humble/opt/zenoh_cpp_vendor/lib:/opt/ros/humble/lib/aarch64-linux-gnu:/opt/ros/humble/lib
      # CAN интерфейс (can0 или can1)
      - CAN_INTERFACE=can0
      - CONTROLLER_CONFIG=/config/controllers/controller_manager.yaml
    volumes:
      - ./config:/config:ro
      - ./scripts:/ros_scripts:ro
      - ./scripts/ros2_control:/scripts:ro
      - /dev:/dev  # Доступ к CAN устройствам
    command: ["/ros_scripts/ros_with_namespace.sh", "/scripts/start_ros2_control.sh"]
    depends_on:
      - zenoh-router
      - robot-state-publisher
      - twist-mux
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f ros2_control_node || exit 1"]
      interval: 10s
      timeout: 5s
      start_period: 30s
      retries: 3
    labels:
      logging: "promtail"

  # LSLIDAR N10 - 2D LiDAR scanner
  lslidar:
    image: ${SERVICE_IMAGE_PREFIX:-ghcr.io/krikz/rob_box}:lslidar-${ROS_DISTRO:-humble}-${IMAGE_TAG:-latest}
    container_name: lslidar
    network_mode: host
    privileged: true  # Для доступа к USB/Serial устройству
    devices:
      - /dev/ttyACM0:/dev/ttyACM0  # LSLIDAR N10 USB CDC ACM device
    environment:
      - ROS_DOMAIN_ID=0
      - RMW_IMPLEMENTATION=rmw_zenoh_cpp
      - ROBOT_ID=${ROBOT_ID}  # Для генерации namespace
      - ZENOH_ROUTER_CHECK_ATTEMPTS=10
      - RUST_LOG=zenoh=info
      - ROS_AUTOMATIC_DISCOVERY_RANGE=LOCALHOST
      - ZENOH_SESSION_CONFIG_URI=/tmp/zenoh_session_config.json5  # Сгенерированный конфиг
    volumes:
      - ./config:/config:ro
      - ./scripts:/ros_scripts:ro
      - ./scripts/lslidar:/scripts:ro
      - /dev/shm:/dev/shm
    command: ["/ros_scripts/ros_with_namespace.sh", "/scripts/start_lslidar.sh"]
    depends_on:
      - zenoh-router
    restart: unless-stopped
    labels:
      logging: "promtail"

  # Internal Dialogue Agent - система внутреннего диалога робота
  perception:
    # Image tag automatically determined by IMAGE_TAG environment variable
    image: ${SERVICE_IMAGE_PREFIX:-ghcr.io/krikz/rob_box}:perception-${ROS_DISTRO:-humble}-${IMAGE_TAG:-latest}
    container_name: perception
    network_mode: host
    environment:
      - ROS_DOMAIN_ID=0
      - RMW_IMPLEMENTATION=rmw_zenoh_cpp
      - ZENOH_ROUTER_CHECK_ATTEMPTS=10
      - RUST_LOG=zenoh=info
      - ROS_AUTOMATIC_DISCOVERY_RANGE=LOCALHOST
      - ROBOT_ID=${ROBOT_ID}  # Для генерации namespace
      - ZENOH_SESSION_CONFIG_URI=/tmp/zenoh_session_config.json5  # Сгенерированный конфиг
      # Reflection parameters (v2.0 Event-Driven)
      - DIALOGUE_TIMEOUT=10.0  # секунды - тайм-аут диалога
      - URGENT_RESPONSE_TIMEOUT=2.0  # секунды - тайм-аут срочного ответа
      - ENABLE_SPEECH=true  # Включить речь робота
      # Context Aggregator parameters
      - CONTEXT_PUBLISH_RATE=2.0  # Hz - частота событий
      - MEMORY_WINDOW=60  # секунды - окно короткой памяти
      # Python
      - PYTHONUNBUFFERED=1
    env_file:
      - .env.secrets  # API keys: DEEPSEEK_API_KEY
    volumes:
      - ./config:/config:ro
      - ./scripts:/ros_scripts:ro
      - ./scripts/perception:/scripts:ro
      - /dev/shm:/dev/shm
    mem_limit: 512m  # Perception - лёгкий контейнер
    memswap_limit: 768m
    command: ["/ros_scripts/ros_with_namespace.sh", "/scripts/start_perception.sh"]
    depends_on:
      - zenoh-router
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "bash -c 'source /ws/install/setup.bash && ros2 node list | grep -q reflection_node'"]
      interval: 15s
      timeout: 5s
      start_period: 20s
      retries: 3
    labels:
      logging: "promtail"

  # Nav2 Navigation Stack - автономная навигация
  nav2:
    image: ${SERVICE_IMAGE_PREFIX:-ghcr.io/krikz/rob_box}:nav2-${ROS_DISTRO:-humble}-${IMAGE_TAG:-latest}
    container_name: nav2
    network_mode: host
    environment:
      - ROS_DOMAIN_ID=0
      - RMW_IMPLEMENTATION=rmw_zenoh_cpp
      - RUST_LOG=zenoh=info
      - ROS_AUTOMATIC_DISCOVERY_RANGE=LOCALHOST
      - ROBOT_ID=${ROBOT_ID}  # Для генерации namespace
      - ZENOH_SESSION_CONFIG_URI=/tmp/zenoh_session_config.json5  # Сгенерированный конфиг
      - LD_LIBRARY_PATH=/opt/ros/humble/opt/zenoh_cpp_vendor/lib:/opt/ros/humble/lib/aarch64-linux-gnu:/opt/ros/humble/lib
    volumes:
      - ./config:/config:ro
      - ./scripts:/ros_scripts:ro
      - ./scripts/nav2:/scripts:ro
      - ./maps:/maps:ro  # Карты из RTAB-Map
    command: ["/ros_scripts/ros_with_namespace.sh", "/scripts/start_nav2_direct.sh"]
    depends_on:
      - zenoh-router
      - robot-state-publisher
      - rtabmap
      - ros2-control
      - twist-mux
      - lslidar
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f 'bt_navigator' || exit 1"]
      interval: 15s
      timeout: 10s
      start_period: 60s
      retries: 3
    labels:
      logging: "promtail"

  # ============ Monitoring Agents ============
  # Агенты мониторинга для Main Pi
  # Отправляют метрики и логи на отдельную машину мониторинга
  # Можно отключить через: docker-compose --profile monitoring up -d

  # cAdvisor - мониторинг контейнеров (CPU, память, сеть)
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: cadvisor
    profiles: ["monitoring"]
    network_mode: host
    privileged: true
    devices:
      - /dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    command:
      - '--port=8080'
      - '--housekeeping_interval=30s'
      - '--docker_only=true'
      - '--store_container_labels=false'
    restart: unless-stopped

  # Promtail - сбор логов из Docker контейнеров и отправка на машину мониторинга
  promtail:
    image: grafana/promtail:2.9.2
    container_name: promtail
    profiles: ["monitoring"]
    network_mode: host
    environment:
      - LOKI_HOST=${LOKI_HOST:-monitoring-machine}
    volumes:
      - ./config/monitoring/promtail-config.yaml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: -config.file=/etc/promtail/config.yml -config.expand-env=true
    restart: unless-stopped

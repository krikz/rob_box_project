#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç JSK –ø–æ–¥—Ö–æ–¥–∞ - –ë–ï–ó ROS –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
–ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ—Ç –ª–∏ USB –∏ PyAudio —Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
"""

import usb.core
import usb.util
import pyaudio
import struct
import time
import os
import sys
from contextlib import contextmanager

# ignore_stderr –∏–∑ –∏—Ö –∫–æ–¥–∞
@contextmanager
def ignore_stderr(enable=True):
    if enable:
        devnull = None
        try:
            devnull = os.open(os.devnull, os.O_WRONLY)
            stderr = os.dup(2)
            sys.stderr.flush()
            os.dup2(devnull, 2)
            try:
                yield
            finally:
                os.dup2(stderr, 2)
                os.close(stderr)
        finally:
            if devnull is not None:
                os.close(devnull)
    else:
        yield

print("=" * 70)
print("–¢–ï–°–¢: –ú–æ–∂–µ—Ç –ª–∏ USB VAD —á–∏—Ç–∞—Ç—å—Å—è –ü–û–ö–ê PyAudio —Å—Ç—Ä–∏–º–∏—Ç?")
print("=" * 70)

# 1. –ù–∞–π—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
print("\n1. –ü–æ–∏—Å–∫ ReSpeaker...")
dev = usb.core.find(idVendor=0x2886, idProduct=0x0018)
if dev is None:
    print("‚ùå ReSpeaker –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    sys.exit(1)

print(f"‚úì ReSpeaker –Ω–∞–π–¥–µ–Ω: Bus {dev.bus} Device {dev.address}")

# 2. –ë–ï–ó reset!!! (–∫–∞–∫ –º—ã —Ç–µ–ø–µ—Ä—å –¥–µ–ª–∞–µ–º)
print("\n2. –ù–ï –¥–µ–ª–∞–µ–º dev.reset() (–æ–Ω —É–±–∏–≤–∞–µ—Ç audio interface)")

# 3. –°–æ–∑–¥–∞—Ç—å PyAudio
print("\n3. –°–æ–∑–¥–∞–µ–º PyAudio (—Å suppress_error)...")
with ignore_stderr(enable=True):
    pa = pyaudio.PyAudio()

# 4. –ù–∞–π—Ç–∏ ReSpeaker audio device
print("\n4. –ò—â–µ–º ReSpeaker audio device...")
device_index = None
for i in range(pa.get_device_count()):
    info = pa.get_device_info_by_index(i)
    if 'ReSpeaker' in str(info['name']):
        device_index = i
        print(f"   ‚úì –ù–∞–π–¥–µ–Ω: index={i}, name={info['name']}, channels={info['maxInputChannels']}")
        break

if device_index is None:
    print("‚ùå ReSpeaker audio device –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    sys.exit(1)

# 5. –û—Ç–∫—Ä—ã—Ç—å audio stream
print("\n5. –û—Ç–∫—Ä—ã–≤–∞–µ–º PyAudio stream (6 –∫–∞–Ω–∞–ª–æ–≤, –±–µ–∑ callback)...")
try:
    stream = pa.open(
        format=pyaudio.paInt16,
        channels=6,  # RAW mode
        rate=16000,
        input=True,
        input_device_index=device_index,
        frames_per_buffer=1024,
        start=False  # –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∫–∞
    )
    print("   ‚úì Stream —Å–æ–∑–¥–∞–Ω")
except Exception as e:
    print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è stream: {e}")
    sys.exit(1)

# 6. –¢–µ—Å—Ç USB VAD –î–û –∑–∞–ø—É—Å–∫–∞ stream
print("\n6. –¢–µ—Å—Ç USB VAD –î–û –∑–∞–ø—É—Å–∫–∞ PyAudio stream...")
vad_before = 0
for i in range(10):
    try:
        response = dev.ctrl_transfer(
            usb.util.CTRL_IN | usb.util.CTRL_TYPE_VENDOR | usb.util.CTRL_RECIPIENT_DEVICE,
            0, 0x80 | 32, 19, 8, 100000)
        vad = struct.unpack(b'ii', response.tobytes())[0]
        vad_before += 1
        if i == 0:
            print(f"   ‚úì VAD —á–∏—Ç–∞–µ—Ç—Å—è: {vad}")
    except Exception as e:
        print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞: {e}")
    time.sleep(0.1)

print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {vad_before}/10 —É—Å–ø–µ—à–Ω—ã—Ö —á—Ç–µ–Ω–∏–π")

# 7. –ó–ê–ü–£–°–ö–ê–ï–ú stream
print("\n7. –ó–ê–ü–£–°–ö–ê–ï–ú PyAudio stream...")
stream.start_stream()
print("   ‚úì Stream –∑–∞–ø—É—â–µ–Ω")

# 8. –ß–∏—Ç–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –∞—É–¥–∏–æ
print("\n8. –ß–∏—Ç–∞–µ–º 5 –∞—É–¥–∏–æ —á–∞–Ω–∫–æ–≤...")
for i in range(5):
    data = stream.read(1024, exception_on_overflow=False)
    print(f"   Audio chunk {i+1}: {len(data)} bytes")
    time.sleep(0.1)

# 9. –¢–µ—Å—Ç USB VAD –í–û –í–†–ï–ú–Ø stream
print("\n9. –¢–µ—Å—Ç USB VAD –í–û –í–†–ï–ú–Ø —Ä–∞–±–æ—Ç—ã PyAudio stream...")
vad_during = 0
vad_errors = 0

for i in range(20):
    try:
        response = dev.ctrl_transfer(
            usb.util.CTRL_IN | usb.util.CTRL_TYPE_VENDOR | usb.util.CTRL_RECIPIENT_DEVICE,
            0, 0x80 | 32, 19, 8, 100000)
        vad = struct.unpack(b'ii', response.tobytes())[0]
        vad_during += 1
        if vad:
            print(f"   üéôÔ∏è  VAD: {vad} - –†–ï–ß–¨!")
        else:
            if i % 5 == 0:
                print(f"   VAD: {vad} - —Ç–∏—à–∏–Ω–∞ [—É—Å–ø–µ—Ö #{vad_during}]")
    except Exception as e:
        vad_errors += 1
        if vad_errors <= 3:
            print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ #{vad_errors}: {e}")
    
    time.sleep(0.1)

print(f"\n   –†–µ–∑—É–ª—å—Ç–∞—Ç: {vad_during}/20 —É—Å–ø–µ—à–Ω—ã—Ö —á—Ç–µ–Ω–∏–π, {vad_errors} –æ—à–∏–±–æ–∫")

# 10. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º stream
print("\n10. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PyAudio stream...")
stream.stop_stream()
stream.close()
pa.terminate()
print("   ‚úì Stream –∑–∞–∫—Ä—ã—Ç")

# 11. –¢–µ—Å—Ç USB VAD –ü–û–°–õ–ï –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ stream
print("\n11. –¢–µ—Å—Ç USB VAD –ü–û–°–õ–ï –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ PyAudio stream...")
vad_after = 0
for i in range(10):
    try:
        response = dev.ctrl_transfer(
            usb.util.CTRL_IN | usb.util.CTRL_TYPE_VENDOR | usb.util.CTRL_RECIPIENT_DEVICE,
            0, 0x80 | 32, 19, 8, 100000)
        vad = struct.unpack(b'ii', response.tobytes())[0]
        vad_after += 1
        if i == 0:
            print(f"   ‚úì VAD —á–∏—Ç–∞–µ—Ç—Å—è: {vad}")
    except Exception as e:
        print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞: {e}")
    time.sleep(0.1)

print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {vad_after}/10 —É—Å–ø–µ—à–Ω—ã—Ö —á—Ç–µ–Ω–∏–π")

# –†–ï–ó–£–õ–¨–¢–ê–¢–´
print("\n" + "=" * 70)
print("–†–ï–ó–£–õ–¨–¢–ê–¢–´:")
print("=" * 70)
print(f"USB VAD –î–û stream:      {vad_before}/10  —É—Å–ø–µ—à–Ω—ã—Ö")
print(f"USB VAD –í–û –í–†–ï–ú–Ø stream: {vad_during}/20  —É—Å–ø–µ—à–Ω—ã—Ö, {vad_errors} –æ—à–∏–±–æ–∫")
print(f"USB VAD –ü–û–°–õ–ï stream:    {vad_after}/10  —É—Å–ø–µ—à–Ω—ã—Ö")

if vad_during > 0:
    print("\n‚úÖ –í–´–í–û–î: USB VAD –†–ê–ë–û–¢–ê–ï–¢ –≤–æ –≤—Ä–µ–º—è PyAudio stream!")
    print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {vad_during * 100 / 20:.0f}%")
else:
    print("\n‚ùå –í–´–í–û–î: USB VAD –ù–ï –†–ê–ë–û–¢–ê–ï–¢ –≤–æ –≤—Ä–µ–º—è PyAudio stream!")
    print("   –≠—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —á—Ç–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω")

print("=" * 70)
